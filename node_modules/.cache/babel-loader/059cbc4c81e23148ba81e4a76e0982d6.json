{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\n/* eslint-disable no-underscore-dangle */\nimport { Point, Line, Path } from '../../geometry'; // takes care of math. error for case when jump is too close to end of line\n\nconst CLOSE_PROXIMITY_PADDING = 1;\nconst F13 = 1 / 3;\nconst F23 = 2 / 3;\n\nfunction setupUpdating(view) {\n  let updateList = view.graph._jumpOverUpdateList; // first time setup for this paper\n\n  if (updateList == null) {\n    updateList = view.graph._jumpOverUpdateList = [];\n    /**\n     * Handler for a batch:stop event to force\n     * update of all registered links with jump over connector\n     */\n\n    view.graph.on('cell:mouseup', () => {\n      const list = view.graph._jumpOverUpdateList;\n\n      for (let i = 0; i < list.length; i += 1) {\n        list[i].update();\n      }\n    });\n    view.graph.on('model:reseted', () => {\n      updateList = view.graph._jumpOverUpdateList = [];\n    });\n  } // add this link to a list so it can be updated when some other link is updated\n\n\n  if (updateList.indexOf(view) < 0) {\n    updateList.push(view); // watch for change of connector type or removal of link itself\n    // to remove the link from a list of jump over connectors\n\n    const clean = () => updateList.splice(updateList.indexOf(view), 1);\n\n    view.cell.once('change:connector', clean);\n    view.cell.once('removed', clean);\n  }\n}\n\nfunction createLines(sourcePoint, targetPoint, route = []) {\n  const points = [sourcePoint, ...route, targetPoint];\n  const lines = [];\n  points.forEach((point, idx) => {\n    const next = points[idx + 1];\n\n    if (next != null) {\n      lines.push(new Line(point, next));\n    }\n  });\n  return lines;\n}\n\nfunction findLineIntersections(line, crossCheckLines) {\n  const intersections = [];\n  crossCheckLines.forEach(crossCheckLine => {\n    const intersection = line.intersectsWithLine(crossCheckLine);\n\n    if (intersection) {\n      intersections.push(intersection);\n    }\n  });\n  return intersections;\n}\n\nfunction getDistence(p1, p2) {\n  return new Line(p1, p2).squaredLength();\n}\n/**\n * Split input line into multiple based on intersection points.\n */\n\n\nfunction createJumps(line, intersections, jumpSize) {\n  return intersections.reduce((memo, point, idx) => {\n    // skipping points that were merged with the previous line\n    // to make bigger arc over multiple lines that are close to each other\n    if (skippedPoints.includes(point)) {\n      return memo;\n    } // always grab the last line from buffer and modify it\n\n\n    const lastLine = memo.pop() || line; // calculate start and end of jump by moving by a given size of jump\n\n    const jumpStart = Point.create(point).move(lastLine.start, -jumpSize);\n    let jumpEnd = Point.create(point).move(lastLine.start, +jumpSize); // now try to look at the next intersection point\n\n    const nextPoint = intersections[idx + 1];\n\n    if (nextPoint != null) {\n      const distance = jumpEnd.distance(nextPoint);\n\n      if (distance <= jumpSize) {\n        // next point is close enough, move the jump end by this\n        // difference and mark the next point to be skipped\n        jumpEnd = nextPoint.move(lastLine.start, distance);\n        skippedPoints.push(nextPoint);\n      }\n    } else {\n      // this block is inside of `else` as an optimization so the distance is\n      // not calculated when we know there are no other intersection points\n      const endDistance = jumpStart.distance(lastLine.end); // if the end is too close to possible jump, draw remaining line instead of a jump\n\n      if (endDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {\n        memo.push(lastLine);\n        return memo;\n      }\n    }\n\n    const startDistance = jumpEnd.distance(lastLine.start);\n\n    if (startDistance < jumpSize * 2 + CLOSE_PROXIMITY_PADDING) {\n      // if the start of line is too close to jump, draw that line instead of a jump\n      memo.push(lastLine);\n      return memo;\n    } // finally create a jump line\n\n\n    const jumpLine = new Line(jumpStart, jumpEnd); // it's just simple line but with a `isJump` property\n\n    jumppedLines.push(jumpLine);\n    memo.push(new Line(lastLine.start, jumpStart), jumpLine, new Line(jumpEnd, lastLine.end));\n    return memo;\n  }, []);\n}\n\nfunction buildPath(lines, jumpSize, jumpType, radius) {\n  const path = new Path();\n  let segment; // first move to the start of a first line\n\n  segment = Path.createSegment('M', lines[0].start);\n  path.appendSegment(segment);\n  lines.forEach((line, index) => {\n    if (jumppedLines.includes(line)) {\n      let angle;\n      let diff;\n      let control1;\n      let control2;\n\n      if (jumpType === 'arc') {\n        // approximates semicircle with 2 curves\n        angle = -90; // determine rotation of arc based on difference between points\n\n        diff = line.start.diff(line.end); // make sure the arc always points up (or right)\n\n        const xAxisRotate = diff.x < 0 || diff.x === 0 && diff.y < 0;\n\n        if (xAxisRotate) {\n          angle += 180;\n        }\n\n        const center = line.getCenter();\n        const centerLine = new Line(center, line.end).rotate(angle, center);\n        let halfLine; // first half\n\n        halfLine = new Line(line.start, center);\n        control1 = halfLine.pointAt(2 / 3).rotate(angle, line.start);\n        control2 = centerLine.pointAt(1 / 3).rotate(-angle, centerLine.end);\n        segment = Path.createSegment('C', control1, control2, centerLine.end);\n        path.appendSegment(segment); // second half\n\n        halfLine = new Line(center, line.end);\n        control1 = centerLine.pointAt(1 / 3).rotate(angle, centerLine.end);\n        control2 = halfLine.pointAt(1 / 3).rotate(-angle, line.end);\n        segment = Path.createSegment('C', control1, control2, line.end);\n        path.appendSegment(segment);\n      } else if (jumpType === 'gap') {\n        segment = Path.createSegment('M', line.end);\n        path.appendSegment(segment);\n      } else if (jumpType === 'cubic') {\n        // approximates semicircle with 1 curve\n        angle = line.start.theta(line.end);\n        const xOffset = jumpSize * 0.6;\n        let yOffset = jumpSize * 1.35; // determine rotation of arc based on difference between points\n\n        diff = line.start.diff(line.end); // make sure the arc always points up (or right)\n\n        const xAxisRotate = diff.x < 0 || diff.x === 0 && diff.y < 0;\n\n        if (xAxisRotate) {\n          yOffset *= -1;\n        }\n\n        control1 = new Point(line.start.x + xOffset, line.start.y + yOffset).rotate(angle, line.start);\n        control2 = new Point(line.end.x - xOffset, line.end.y + yOffset).rotate(angle, line.end);\n        segment = Path.createSegment('C', control1, control2, line.end);\n        path.appendSegment(segment);\n      }\n    } else {\n      const nextLine = lines[index + 1];\n\n      if (radius === 0 || !nextLine || jumppedLines.includes(nextLine)) {\n        segment = Path.createSegment('L', line.end);\n        path.appendSegment(segment);\n      } else {\n        buildRoundedSegment(radius, path, line.end, line.start, nextLine.end);\n      }\n    }\n  });\n  return path;\n}\n\nfunction buildRoundedSegment(offset, path, curr, prev, next) {\n  const prevDistance = curr.distance(prev) / 2;\n  const nextDistance = curr.distance(next) / 2;\n  const startMove = -Math.min(offset, prevDistance);\n  const endMove = -Math.min(offset, nextDistance);\n  const roundedStart = curr.clone().move(prev, startMove).round();\n  const roundedEnd = curr.clone().move(next, endMove).round();\n  const control1 = new Point(F13 * roundedStart.x + F23 * curr.x, F23 * curr.y + F13 * roundedStart.y);\n  const control2 = new Point(F13 * roundedEnd.x + F23 * curr.x, F23 * curr.y + F13 * roundedEnd.y);\n  let segment;\n  segment = Path.createSegment('L', roundedStart);\n  path.appendSegment(segment);\n  segment = Path.createSegment('C', control1, control2, roundedEnd);\n  path.appendSegment(segment);\n}\n\nlet jumppedLines;\nlet skippedPoints;\nexport const jumpover = function (sourcePoint, targetPoint, routePoints, options = {}) {\n  jumppedLines = [];\n  skippedPoints = [];\n  setupUpdating(this);\n  const jumpSize = options.size || 5;\n  const jumpType = options.type || 'arc';\n  const radius = options.radius || 0; // list of connector types not to jump over.\n\n  const ignoreConnectors = options.ignoreConnectors || ['smooth'];\n  const graph = this.graph;\n  const model = graph.model;\n  const allLinks = model.getEdges(); // there is just one link, draw it directly\n\n  if (allLinks.length === 1) {\n    return buildPath(createLines(sourcePoint, targetPoint, routePoints), jumpSize, jumpType, radius);\n  }\n\n  const edge = this.cell;\n  const thisIndex = allLinks.indexOf(edge);\n  const defaultConnector = graph.options.connecting.connector || {}; // not all links are meant to be jumped over.\n\n  const edges = allLinks.filter((link, idx) => {\n    const connector = link.getConnector() || defaultConnector; // avoid jumping over links with connector type listed in `ignored connectors`.\n\n    if (ignoreConnectors.includes(connector.name)) {\n      return false;\n    } // filter out links that are above this one and  have the same connector type\n    // otherwise there would double hoops for each intersection\n\n\n    if (idx > thisIndex) {\n      return connector.name !== 'jumpover';\n    }\n\n    return true;\n  }); // find views for all links\n\n  const linkViews = edges.map(edge => {\n    return graph.renderer.findViewByCell(edge);\n  }); // create lines for this link\n\n  const thisLines = createLines(sourcePoint, targetPoint, routePoints); // create lines for all other links\n\n  const linkLines = linkViews.map(linkView => {\n    if (linkView == null) {\n      return [];\n    }\n\n    if (linkView === this) {\n      return thisLines;\n    }\n\n    return createLines(linkView.sourcePoint, linkView.targetPoint, linkView.routePoints);\n  }); // transform lines for this link by splitting with jump lines at\n  // points of intersection with other links\n\n  const jumpingLines = [];\n  thisLines.forEach(line => {\n    // iterate all links and grab the intersections with this line\n    // these are then sorted by distance so the line can be split more easily\n    const intersections = edges.reduce((memo, link, i) => {\n      // don't intersection with itself\n      if (link !== edge) {\n        const lineIntersections = findLineIntersections(line, linkLines[i]);\n        memo.push(...lineIntersections);\n      }\n\n      return memo;\n    }, []).sort((a, b) => getDistence(line.start, a) - getDistence(line.start, b));\n\n    if (intersections.length > 0) {\n      // split the line based on found intersection points\n      jumpingLines.push(...createJumps(line, intersections, jumpSize));\n    } else {\n      // without any intersection the line goes uninterrupted\n      jumpingLines.push(line);\n    }\n  });\n  const path = buildPath(jumpingLines, jumpSize, jumpType, radius);\n  jumppedLines = [];\n  skippedPoints = [];\n  return options.raw ? path : path.serialize();\n};","map":{"version":3,"mappings":"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","names":["Point","Line","Path","CLOSE_PROXIMITY_PADDING","F13","F23","setupUpdating","view","updateList","graph","_jumpOverUpdateList","on","list","i","length","update","indexOf","push","clean","splice","cell","once","createLines","sourcePoint","targetPoint","route","points","lines","forEach","point","idx","next","findLineIntersections","line","crossCheckLines","intersections","crossCheckLine","intersection","intersectsWithLine","getDistence","p1","p2","squaredLength","createJumps","jumpSize","reduce","memo","skippedPoints","includes","lastLine","pop","jumpStart","create","move","start","jumpEnd","nextPoint","distance","endDistance","end","startDistance","jumpLine","jumppedLines","buildPath","jumpType","radius","path","segment","createSegment","appendSegment","index","angle","diff","control1","control2","xAxisRotate","x","y","center","getCenter","centerLine","rotate","halfLine","pointAt","theta","xOffset","yOffset","nextLine","buildRoundedSegment","offset","curr","prev","prevDistance","nextDistance","startMove","Math","min","endMove","roundedStart","clone","round","roundedEnd","jumpover","routePoints","options","size","type","ignoreConnectors","model","allLinks","getEdges","edge","thisIndex","defaultConnector","connecting","connector","edges","filter","link","getConnector","name","linkViews","map","renderer","findViewByCell","thisLines","linkLines","linkView","jumpingLines","lineIntersections","sort","a","b","raw","serialize"],"sourceRoot":"","sources":["../../../src/registry/connector/jumpover.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}