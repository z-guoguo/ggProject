{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","map":{"version":3,"names":["glMatrix","mat3","vec3","vec4","create","out","ARRAY_TYPE","Float32Array","identity","setAxisAngle","axis","rad","s","Math","sin","cos","getAxisAngle","out_axis","q","acos","EPSILON","getAngle","a","b","dotproduct","dot","multiply","ax","ay","az","aw","bx","by","bz","bw","rotateX","rotateY","rotateZ","calculateW","x","y","z","sqrt","abs","exp","w","r","et","ln","t","atan2","log","pow","scale","slerp","omega","cosom","sinom","scale0","scale1","random","u1","RANDOM","u2","u3","sqrt1MinusU1","sqrtU1","PI","invert","a0","a1","a2","a3","invDot","conjugate","fromMat3","m","fTrace","fRoot","i","j","k","fromEuler","halfToRad","sx","cx","sy","cy","sz","cz","str","clone","fromValues","copy","set","add","mul","lerp","length","len","squaredLength","sqrLen","normalize","exactEquals","equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","cross","sqlerp","temp1","temp2","c","d","setAxes","matr","view","right","up"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/gl-matrix/esm/quat.js"],"sourcesContent":["import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}