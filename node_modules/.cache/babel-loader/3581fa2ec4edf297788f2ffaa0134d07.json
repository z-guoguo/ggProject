{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport * as Shape from './shape';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // SVG 中分组对应实体标签 <g>\n\n\n  Group.prototype.isEntityGroup = function () {\n    return true;\n  };\n\n  Group.prototype.createDom = function () {\n    var element = createSVGElement('g');\n    this.set('el', element);\n    var parent = this.getParent();\n\n    if (parent) {\n      var parentNode = parent.get('el');\n\n      if (parentNode) {\n        parentNode.appendChild(element);\n      } else {\n        // parentNode maybe null for group\n        parentNode = parent.createDom();\n        parent.set('el', parentNode);\n        parentNode.appendChild(element);\n      }\n    }\n\n    return element;\n  }; // 覆盖基类的 afterAttrsChange 方法\n\n\n  Group.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n\n    var canvas = this.get('canvas'); // 只有挂载到画布下，才对元素进行实际渲染\n\n    if (canvas && canvas.get('autoDraw')) {\n      var context = canvas.get('context');\n      this.createPath(context, targetAttrs);\n    }\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  Group.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  };\n\n  Group.prototype.draw = function (context) {\n    var children = this.getChildren();\n    var el = this.get('el');\n\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        this.createDom();\n      }\n\n      setClip(this, context);\n      this.createPath(context);\n\n      if (children.length) {\n        drawChildren(context, children);\n      }\n    }\n  };\n  /**\n   * 绘制分组的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n\n\n  Group.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n    setTransform(this);\n  };\n\n  return Group;\n}(AbstractGroup);\n\nexport default Group;","map":{"version":3,"mappings":"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","names":["AbstractGroup","each","Shape","drawChildren","refreshElement","setClip","setTransform","SVG_ATTR_MAP","createSVGElement","__extends","Group","element","set","parent","getParent","parentNode","get","appendChild","createDom","targetAttrs","_super","afterAttrsChange","call","canvas","context","createPath","changeType","children","getChildren","el","removeChild","length","attrs","attr","value","setAttribute"],"sourceRoot":"","sources":["../src/group.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}