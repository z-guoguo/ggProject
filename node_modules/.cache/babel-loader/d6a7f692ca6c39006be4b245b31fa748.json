{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __assign } from \"tslib\";\nimport Util from '../util';\nvar isPolygonsIntersect = Util.isPolygonsIntersect,\n    pathToPoints = Util.pathToPoints;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\n\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      shouldDeselect: undefined,\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: [] // multiple: false,\n\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item; // 排除在节点上拖动\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates('dragstart');\n    }\n\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n\n    return path;\n  },\n  clearStates: function clearStates(action) {\n    if (action === void 0) {\n      action = 'canvas:click';\n    }\n\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState,\n        shouldDeselect = _a.shouldDeselect;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n\n    if (!shouldDeselect || shouldDeselect({\n      action: action,\n      nodes: nodes,\n      edges: edges\n    })) {\n      nodes.forEach(function (node) {\n        return graph.setItemState(node, selectedState, false);\n      });\n      edges.forEach(function (edge) {\n        return graph.setItemState(edge, selectedState, false);\n      });\n    }\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldUpdate = _a.shouldUpdate;\n\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.delegate = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};","map":{"version":3,"names":["__assign","Util","isPolygonsIntersect","pathToPoints","DEFAULT_TRIGGER","ALLOW_EVENTS","isItemIntersecPolygon","item","polyPoints","shapePoints","shape","getKeyShape","get","attr","shapeBBox","getCanvasBBox","minX","minY","maxX","maxY","getDefaultCfg","delegateStyle","fill","fillOpacity","stroke","lineWidth","onSelect","onDeselect","shouldDeselect","undefined","selectedState","trigger","includeEdges","selectedEdges","selectedNodes","getEvents","indexOf","toLowerCase","console","warn","dragstart","drag","dragend","keyup","keydown","onDragStart","e","lasso","length","clearStates","createLasso","dragging","originPoint","x","y","points","push","show","onDragMove","updateLasso","onDragEnd","getSelectedItems","remove","getLassoPath","path","forEach","point","index","action","_a","graph","nodes","findAllByState","edges","node","setItemState","edge","emit","selectedItems","select","_this","shouldUpdate","lassoContour","map","getCanvasByPoint","state","selectedIds","getNodes","isVisible","model","getModel","id","getOutEdges","source","target","includes","self","addShape","attrs","capture","name","delegate","onKeyDown","code","key","onKeyUp"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-pc/es/behavior/lasso-select.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport Util from '../util';\nvar isPolygonsIntersect = Util.isPolygonsIntersect,\n    pathToPoints = Util.pathToPoints;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\n\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      shouldDeselect: undefined,\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: [] // multiple: false,\n\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item; // 排除在节点上拖动\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates('dragstart');\n    }\n\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n\n    return path;\n  },\n  clearStates: function clearStates(action) {\n    if (action === void 0) {\n      action = 'canvas:click';\n    }\n\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState,\n        shouldDeselect = _a.shouldDeselect;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n\n    if (!shouldDeselect || shouldDeselect({\n      action: action,\n      nodes: nodes,\n      edges: edges\n    })) {\n      nodes.forEach(function (node) {\n        return graph.setItemState(node, selectedState, false);\n      });\n      edges.forEach(function (edge) {\n        return graph.setItemState(edge, selectedState, false);\n      });\n    }\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldUpdate = _a.shouldUpdate;\n\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.delegate = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}