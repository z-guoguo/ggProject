{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last.js\");\n\nrequire(\"core-js/modules/esnext.typed-array.find-last-index.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrayToTextureData = exports.attributesToTextureData = exports.buildTextureDataWithTwoEdgeAttr = exports.buildTextureData = exports.proccessToFunc = void 0;\n\nvar _1 = require(\"./\");\n\nvar math_1 = require(\"./math\");\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\n\n\nvar proccessToFunc = function (value, defaultV) {\n  var func;\n\n  if (!value) {\n    func = function () {\n      return defaultV || 1;\n    };\n  } else if ((0, _1.isNumber)(value)) {\n    func = function () {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n\n  return func;\n};\n\nexports.proccessToFunc = proccessToFunc;\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\n\nvar buildTextureData = function (nodes, edges) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    var source = (0, math_1.getEdgeTerminal)(e, 'source');\n    var target = (0, math_1.getEdgeTerminal)(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n  }\n\n  var maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i];\n    var len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = dests.length;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    maxEdgePerVetex: maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n\nexports.buildTextureData = buildTextureData;\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n// export const buildTextureDataWithOneEdgeAttr = (nodes: OutNode[], edges: Edge[], attrs: Function): {\n//   array: Float32Array,\n//   maxEdgePerVetex: number\n// } => {\n//   const dataArray = [];\n//   const nodeDict: any = [];\n//   const mapIdPos: IndexMap = {};\n//   let i = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const n = nodes[i];\n//       mapIdPos[n.id] = i;\n//       dataArray.push(n.x);\n//       dataArray.push(n.y);\n//       dataArray.push(0);\n//       dataArray.push(0);\n//       nodeDict.push([]);\n//   }\n//   for (i = 0; i < edges.length; i++) {\n//       const e = edges[i];\n//       nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n//       nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//       nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n//       nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n//   }\n//   let maxEdgePerVetex = 0;\n//   for (i = 0; i < nodes.length; i++) {\n//       const offset: number = dataArray.length;\n//       const dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n//       const len = dests.length;\n//       dataArray[i * 4 + 2] = offset;\n//       dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n//       maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n//       for (let j = 0; j < len; ++j) {\n//           const dest = dests[j];\n//           dataArray.push(+dest);\n//       }\n//   }\n//   // 不是 4 的倍数，填充 0\n//   while (dataArray.length % 4 !== 0) {\n//       dataArray.push(0);\n//   }\n//   return {\n//       array: new Float32Array(dataArray),\n//       maxEdgePerVetex\n//   }\n// }\n\n/**\n* 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n* @param  {NodeConfig[]}  nodes 节点数组\n* @param  {EdgeConfig[]}  edges 边数组\n* @param  {Function}  attrs 读取边属性的函数\n* @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n*/\n\nvar buildTextureDataWithTwoEdgeAttr = function (nodes, edges, attrs1, attrs2) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    var source = (0, math_1.getEdgeTerminal)(e, 'source');\n    var target = (0, math_1.getEdgeTerminal)(e, 'target');\n    nodeDict[mapIdPos[source]].push(mapIdPos[target]);\n    nodeDict[mapIdPos[source]].push(attrs1(e));\n    nodeDict[mapIdPos[source]].push(attrs2(e));\n    nodeDict[mapIdPos[source]].push(0);\n    nodeDict[mapIdPos[target]].push(mapIdPos[source]);\n    nodeDict[mapIdPos[target]].push(attrs1(e));\n    nodeDict[mapIdPos[target]].push(attrs2(e));\n    nodeDict[mapIdPos[target]].push(0);\n  }\n\n  var maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n\n    var len = dests.length; // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  } // 不是 4 的倍数，填充 0\n\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    maxEdgePerVetex: maxEdgePerVetex,\n    array: new Float32Array(dataArray)\n  };\n};\n\nexports.buildTextureDataWithTwoEdgeAttr = buildTextureDataWithTwoEdgeAttr;\n/**\n* transform the extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @param  {ModelConfig[]}  items the items to be read\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\n\nvar attributesToTextureData = function (attributeNames, items) {\n  var dataArray = [];\n  var attributeNum = attributeNames.length;\n  var attributteStringMap = {};\n  items.forEach(function (item) {\n    attributeNames.forEach(function (name, i) {\n      if (attributteStringMap[item[name]] === undefined) {\n        attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n      }\n\n      dataArray.push(attributteStringMap[item[name]]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  });\n  return {\n    array: new Float32Array(dataArray),\n    count: Object.keys(attributteStringMap).length\n  };\n};\n\nexports.attributesToTextureData = attributesToTextureData;\n/**\n* transform the number array format of extended attributes of nodes or edges to a texture array\n* @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n* @return {Float32Array} the attributes' value array to be read by GPU\n*/\n\nvar arrayToTextureData = function (valueArrays) {\n  var dataArray = [];\n  var attributeNum = valueArrays.length;\n  var itemNum = valueArrays[0].length;\n\n  var _loop_1 = function (j) {\n    valueArrays.forEach(function (valueArray, i) {\n      dataArray.push(valueArray[j]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  };\n\n  for (var j = 0; j < itemNum; j++) {\n    _loop_1(j);\n  }\n\n  return new Float32Array(dataArray);\n};\n\nexports.arrayToTextureData = arrayToTextureData;","map":{"version":3,"mappings":"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","names":["proccessToFunc","value","defaultV","func","exports","buildTextureData","nodes","edges","dataArray","nodeDict","mapIdPos","i","length","n","id","push","x","y","e","source","target","maxEdgePerVetex","offset","dests","len","Math","max","j","dest","array","Float32Array","buildTextureDataWithTwoEdgeAttr","attrs1","attrs2","attributesToTextureData","attributeNames","items","attributeNum","attributteStringMap","forEach","item","name","undefined","Object","keys","count","arrayToTextureData","valueArrays","itemNum","valueArray"],"sourceRoot":"","sources":["../../src/util/gpu.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}