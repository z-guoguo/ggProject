{"ast":null,"code":"const isEdgeView = (val, {\n  view\n}) => {\n  return view.cell.isEdge();\n};\n\nexport const connection = {\n  qualify: isEdgeView,\n\n  set(val, args) {\n    var _a, _b, _c, _d;\n\n    const view = args.view;\n    const reverse = val.reverse || false;\n    const stubs = val.stubs || 0;\n    let d;\n\n    if (Number.isFinite(stubs) && stubs !== 0) {\n      if (!reverse) {\n        let offset;\n\n        if (stubs < 0) {\n          const len = view.getConnectionLength() || 0;\n          offset = (len + stubs) / 2;\n        } else {\n          offset = stubs;\n        }\n\n        const path = view.getConnection();\n\n        if (path) {\n          const sourceParts = path.divideAtLength(offset);\n          const targetParts = path.divideAtLength(-offset);\n\n          if (sourceParts && targetParts) {\n            d = `${sourceParts[0].serialize()} ${targetParts[1].serialize()}`;\n          }\n        }\n      } else {\n        let offset;\n        let length;\n        const len = view.getConnectionLength() || 0;\n\n        if (stubs < 0) {\n          offset = (len + stubs) / 2;\n          length = -stubs;\n        } else {\n          offset = stubs;\n          length = len - stubs * 2;\n        }\n\n        const path = view.getConnection();\n        d = (_d = (_c = (_b = (_a = path === null || path === void 0 ? void 0 : path.divideAtLength(offset)) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.divideAtLength(length)) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.serialize();\n      }\n    }\n\n    return {\n      d: d || view.getConnectionPathData()\n    };\n  }\n\n};\nexport const atConnectionLengthKeepGradient = {\n  qualify: isEdgeView,\n  set: atConnectionWrapper('getTangentAtLength', {\n    rotate: true\n  })\n};\nexport const atConnectionLengthIgnoreGradient = {\n  qualify: isEdgeView,\n  set: atConnectionWrapper('getTangentAtLength', {\n    rotate: false\n  })\n};\nexport const atConnectionRatioKeepGradient = {\n  qualify: isEdgeView,\n  set: atConnectionWrapper('getTangentAtRatio', {\n    rotate: true\n  })\n};\nexport const atConnectionRatioIgnoreGradient = {\n  qualify: isEdgeView,\n  set: atConnectionWrapper('getTangentAtRatio', {\n    rotate: false\n  })\n}; // aliases\n// -------\n\nexport const atConnectionLength = atConnectionLengthKeepGradient;\nexport const atConnectionRatio = atConnectionRatioKeepGradient; // utils\n// -----\n\nfunction atConnectionWrapper(method, options) {\n  const zeroVector = {\n    x: 1,\n    y: 0\n  };\n  return (value, args) => {\n    let p;\n    let angle;\n    const view = args.view;\n    const tangent = view[method](Number(value));\n\n    if (tangent) {\n      angle = options.rotate ? tangent.vector().vectorAngle(zeroVector) : 0;\n      p = tangent.start;\n    } else {\n      p = view.path.start;\n      angle = 0;\n    }\n\n    if (angle === 0) {\n      return {\n        transform: `translate(${p.x},${p.y}')`\n      };\n    }\n\n    return {\n      transform: `translate(${p.x},${p.y}') rotate(${angle})`\n    };\n  };\n}","map":{"version":3,"mappings":"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","names":["isEdgeView","val","view","cell","isEdge","connection","qualify","set","args","reverse","stubs","d","Number","isFinite","offset","len","getConnectionLength","path","getConnection","sourceParts","divideAtLength","targetParts","serialize","length","_a","_b","_c","_d","getConnectionPathData","atConnectionLengthKeepGradient","atConnectionWrapper","rotate","atConnectionLengthIgnoreGradient","atConnectionRatioKeepGradient","atConnectionRatioIgnoreGradient","atConnectionLength","atConnectionRatio","method","options","zeroVector","x","y","value","p","angle","tangent","vector","vectorAngle","start","transform"],"sourceRoot":"","sources":["../../../src/registry/attr/connection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}