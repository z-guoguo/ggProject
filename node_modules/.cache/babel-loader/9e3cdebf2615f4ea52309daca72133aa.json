{"ast":null,"code":"export function diff(oldList, newList, key) {\n  const oldMap = makeKeyIndexAndFree(oldList, key);\n  const newMap = makeKeyIndexAndFree(newList, key);\n  const newFree = newMap.free;\n  const oldKeyIndex = oldMap.keyIndex;\n  const newKeyIndex = newMap.keyIndex;\n  const moves = [];\n  const children = [];\n  let i = 0;\n  let item;\n  let itemKey;\n  let freeIndex = 0;\n\n  while (i < oldList.length) {\n    item = oldList[i];\n    itemKey = item[key];\n\n    if (itemKey) {\n      // eslint-disable-next-line\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null);\n      } else {\n        const newItemIndex = newKeyIndex[itemKey];\n        children.push(newList[newItemIndex]);\n      }\n    } else {\n      freeIndex += 1;\n      const freeItem = newFree[freeIndex];\n      children.push(freeItem || null);\n    }\n\n    i += 1;\n  }\n\n  const simulateList = children.slice(0);\n  i = 0;\n\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i);\n      removeSimulate(i);\n    } else {\n      i += 1;\n    }\n  }\n\n  let j = i = 0;\n\n  while (i < newList.length) {\n    item = newList[i];\n    itemKey = item[key];\n    const simulateItem = simulateList[j];\n\n    if (simulateItem) {\n      const simulateItemKey = simulateItem[key];\n\n      if (itemKey === simulateItemKey) {\n        j += 1;\n      } else {\n        // eslint-disable-next-line\n        if (!oldKeyIndex.hasOwnProperty(itemKey)) {\n          insert(i, item);\n        } else {\n          const nextSimulateItem = simulateList[j + 1];\n\n          if (nextSimulateItem) {\n            const nextItemKey = nextSimulateItem[key];\n\n            if (nextItemKey === itemKey) {\n              remove(i);\n              removeSimulate(j);\n              j += 1;\n            } else {\n              insert(i, item);\n            }\n          }\n        }\n      }\n    } else {\n      insert(i, item);\n    }\n\n    i += 1;\n  }\n\n  let k = simulateList.length - j;\n\n  while ((j += 1) < simulateList.length) {\n    k -= 1;\n    remove(k + i);\n  }\n\n  function remove(index) {\n    const move = {\n      index,\n      type: 0,\n      item: null\n    };\n    moves.push(move);\n  }\n\n  function insert(index, item) {\n    const move = {\n      index,\n      item,\n      type: 1\n    };\n    moves.push(move);\n  }\n\n  function removeSimulate(index) {\n    simulateList.splice(index, 1);\n  }\n\n  return {\n    moves\n  };\n}\n\nfunction makeKeyIndexAndFree(list, key) {\n  const keyIndex = {};\n  const free = [];\n\n  for (let i = 0, len = list.length; i < len; i += 1) {\n    const item = list[i];\n    const itemKey = item[key];\n\n    if (itemKey) {\n      keyIndex[itemKey] = i;\n    } else {\n      free.push(item);\n    }\n  }\n\n  return {\n    keyIndex,\n    free\n  };\n}","map":{"version":3,"mappings":"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","names":["diff","oldList","newList","key","oldMap","makeKeyIndexAndFree","newMap","newFree","free","oldKeyIndex","keyIndex","newKeyIndex","moves","children","i","item","itemKey","freeIndex","length","hasOwnProperty","push","newItemIndex","freeItem","simulateList","slice","remove","removeSimulate","j","simulateItem","simulateItemKey","insert","nextSimulateItem","nextItemKey","k","index","move","type","splice","list","len"],"sourceRoot":"","sources":["../../../src/util/array/diff.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}