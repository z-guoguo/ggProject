{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy';\nimport { each, isObject, isString } from '@antv/util';\nimport Util from '../util';\nimport Graph from './graph';\nvar radialLayout = Util.radialLayout,\n    traverseTree = Util.traverseTree;\n\nvar TreeGraph =\n/** @class */\nfunction (_super) {\n  __extends(TreeGraph, _super);\n\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.layoutAnimating = false; // 用于缓存动画结束后需要删除的节点\n\n    _this.set('removeList', []);\n\n    _this.set('layoutMethod', _this.getLayout());\n\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n\n\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n\n    if (!layout) {\n      return null;\n    }\n\n    if (typeof layout === 'function') {\n      return layout;\n    }\n\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n\n\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1; // eslint-disable-next-line consistent-return\n\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this); // 树图默认打开动画\n\n\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n\n\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n\n    var node = self.addItem('node', model, false);\n\n    if (parent) {\n      node.set('parent', parent);\n\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n\n      var childrenList = parent.get('children');\n\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n\n      self.addItem('edge', {\n        source: parent.get('id'),\n        target: node.get('id'),\n        id: \"\".concat(parent.get('id'), \":\").concat(node.get('id'))\n      }, false);\n    } // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n\n\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id); // 若子树不存在，整体添加即可\n\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    } // 更新新节点下所有子节点\n\n\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    }); // 用现在节点的children实例来删除移除的子节点\n\n    var children = current.get('children');\n\n    if (children) {\n      var len = children.length;\n\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate); // 更新父节点下缓存的子节点 item 实例列表\n\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    var oriX;\n    var oriY;\n\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n\n    var model = current.getModel();\n\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n\n    current.set('model', data.data);\n\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node, false);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n\n\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this; // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod ? layoutMethod(data, self.get('layout')) : data;\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    }); // 将数据添加到源数据中，走changeData方法\n\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n\n    var parentData = self.findDataById(parent);\n\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n\n      parentData.children.push(data);\n      self.changeData();\n    }\n  };\n  /**\n   * 更新某个节点下的所有子节点\n   * @param {TreeGraphData[]} data 子树数据模型集合\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChildren = function (data, parentId) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parentId || !self.findById(parentId)) {\n      console.warn(\"Update children failed! There is no node with id '\".concat(parentId, \"'\"));\n      return;\n    }\n\n    var parentModel = self.findDataById(parentId);\n    parentModel.children = data;\n    self.changeData();\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parentId 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChild = function (data, parentId) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parentId || !self.findById(parentId)) {\n      self.changeData(data);\n      return;\n    }\n\n    var parentModel = self.findDataById(parentId);\n    var current = self.findById(data.id);\n\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    } // 如果不存在该节点，则添加\n\n\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      parentModel.children[index] = data;\n    }\n\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n\n\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    var parent = node.get('parent');\n\n    if (parent && !parent.destroyed) {\n      var parentNode = self.findDataById(parent.get('id'));\n      var siblings = parentNode && parentNode.children || [];\n      var model = node.getModel();\n      var index = TreeGraph.indexOfChild(siblings, model.id);\n      siblings.splice(index, 1);\n    }\n\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n\n\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n\n    if (!parent) {\n      parent = self.get('data');\n    }\n\n    if (id === parent.id) {\n      return parent;\n    }\n\n    var result = null; // eslint-disable-next-line consistent-return\n\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n\n      result = self.findDataById(id, child);\n\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n\n\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    }); // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id); // 只有当存在node的时候才执行\n\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n\n\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n\n\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n\n    if (!data || !isObject(data) || !Object.keys(data).length) {\n      throw new Error('data must be defined first');\n    }\n\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n\n  return TreeGraph;\n}(Graph);\n\nexport default TreeGraph;","map":{"version":3,"names":["__extends","Hierarchy","each","isObject","isString","Util","Graph","radialLayout","traverseTree","TreeGraph","_super","cfg","_this","call","layoutAnimating","set","getLayout","prototype","layout","get","type","direction","radial","data","layoutData","indexOfChild","children","id","index","former","i","getDefaultCfg","animate","innerAddChild","treeData","parent","self","model","x","y","depth","node","addItem","origin_1","parentModel","getModel","childrenList","push","source","target","concat","child","emit","item","innerUpdateChild","current","findById","len","length","innerRemoveChild","splice","oriX","oriY","updatePosition","to","removeItem","changeData","getNodes","map","clearItemStates","getEdges","edge","render","changeLayout","console","warn","updateLayout","refreshLayout","fitView","layoutMethod","undefined","viewController","refresh","paint","layoutAnimate","addChild","parentData","findDataById","updateChildren","parentId","updateChild","removeChild","destroyed","parentNode","siblings","result","onFrame","animateCfg","forEach","sourceAnchor","ratio","origin_2","attrs","Object","assign","from","refreshPositions","duration","easing","ease","callback","delay","stopLayoutAnimate","stopAnimate","isLayoutAnimating","keys","Error","clear","save"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-pc/es/graph/tree-graph.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy';\nimport { each, isObject, isString } from '@antv/util';\nimport Util from '../util';\nimport Graph from './graph';\nvar radialLayout = Util.radialLayout,\n    traverseTree = Util.traverseTree;\n\nvar TreeGraph =\n/** @class */\nfunction (_super) {\n  __extends(TreeGraph, _super);\n\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.layoutAnimating = false; // 用于缓存动画结束后需要删除的节点\n\n    _this.set('removeList', []);\n\n    _this.set('layoutMethod', _this.getLayout());\n\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n\n\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n\n    if (!layout) {\n      return null;\n    }\n\n    if (typeof layout === 'function') {\n      return layout;\n    }\n\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n\n\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1; // eslint-disable-next-line consistent-return\n\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this); // 树图默认打开动画\n\n\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n\n\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n\n    var node = self.addItem('node', model, false);\n\n    if (parent) {\n      node.set('parent', parent);\n\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n\n      var childrenList = parent.get('children');\n\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n\n      self.addItem('edge', {\n        source: parent.get('id'),\n        target: node.get('id'),\n        id: \"\".concat(parent.get('id'), \":\").concat(node.get('id'))\n      }, false);\n    } // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n\n\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id); // 若子树不存在，整体添加即可\n\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    } // 更新新节点下所有子节点\n\n\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    }); // 用现在节点的children实例来删除移除的子节点\n\n    var children = current.get('children');\n\n    if (children) {\n      var len = children.length;\n\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate); // 更新父节点下缓存的子节点 item 实例列表\n\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    var oriX;\n    var oriY;\n\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n\n    var model = current.getModel();\n\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n\n    current.set('model', data.data);\n\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node, false);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n\n\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this; // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod ? layoutMethod(data, self.get('layout')) : data;\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    }); // 将数据添加到源数据中，走changeData方法\n\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n\n    var parentData = self.findDataById(parent);\n\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n\n      parentData.children.push(data);\n      self.changeData();\n    }\n  };\n  /**\n   * 更新某个节点下的所有子节点\n   * @param {TreeGraphData[]} data 子树数据模型集合\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChildren = function (data, parentId) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parentId || !self.findById(parentId)) {\n      console.warn(\"Update children failed! There is no node with id '\".concat(parentId, \"'\"));\n      return;\n    }\n\n    var parentModel = self.findDataById(parentId);\n    parentModel.children = data;\n    self.changeData();\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parentId 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChild = function (data, parentId) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parentId || !self.findById(parentId)) {\n      self.changeData(data);\n      return;\n    }\n\n    var parentModel = self.findDataById(parentId);\n    var current = self.findById(data.id);\n\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    } // 如果不存在该节点，则添加\n\n\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      parentModel.children[index] = data;\n    }\n\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n\n\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    var parent = node.get('parent');\n\n    if (parent && !parent.destroyed) {\n      var parentNode = self.findDataById(parent.get('id'));\n      var siblings = parentNode && parentNode.children || [];\n      var model = node.getModel();\n      var index = TreeGraph.indexOfChild(siblings, model.id);\n      siblings.splice(index, 1);\n    }\n\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n\n\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n\n    if (!parent) {\n      parent = self.get('data');\n    }\n\n    if (id === parent.id) {\n      return parent;\n    }\n\n    var result = null; // eslint-disable-next-line consistent-return\n\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n\n      result = self.findDataById(id, child);\n\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n\n\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    }); // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id); // 只有当存在node的时候才执行\n\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n\n\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n\n\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n\n    if (!data || !isObject(data) || !Object.keys(data).length) {\n      throw new Error('data must be defined first');\n    }\n\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n\n  return TreeGraph;\n}(Graph);\n\nexport default TreeGraph;"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,QAAzB,QAAyC,YAAzC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,IAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;AAAA,IACIC,YAAY,GAAGH,IAAI,CAACG,YADxB;;AAGA,IAAIC,SAAS;AACb;AACA,UAAUC,MAAV,EAAkB;EAChBV,SAAS,CAACS,SAAD,EAAYC,MAAZ,CAAT;;EAEA,SAASD,SAAT,CAAmBE,GAAnB,EAAwB;IACtB,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,GAAlB,KAA0B,IAAtC;;IAEAC,KAAK,CAACE,eAAN,GAAwB,KAAxB,CAHsB,CAGS;;IAE/BF,KAAK,CAACG,GAAN,CAAU,YAAV,EAAwB,EAAxB;;IAEAH,KAAK,CAACG,GAAN,CAAU,cAAV,EAA0BH,KAAK,CAACI,SAAN,EAA1B;;IAEA,OAAOJ,KAAP;EACD;EACD;AACF;AACA;;;EAGEH,SAAS,CAACQ,SAAV,CAAoBD,SAApB,GAAgC,YAAY;IAC1C,IAAIE,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;;IAEA,IAAI,CAACD,MAAL,EAAa;MACX,OAAO,IAAP;IACD;;IAED,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;MAChC,OAAOA,MAAP;IACD;;IAED,IAAI,CAACA,MAAM,CAACE,IAAZ,EAAkB;MAChBF,MAAM,CAACE,IAAP,GAAc,YAAd;IACD;;IAED,IAAI,CAACF,MAAM,CAACG,SAAZ,EAAuB;MACrBH,MAAM,CAACG,SAAP,GAAmB,IAAnB;IACD;;IAED,IAAIH,MAAM,CAACI,MAAX,EAAmB;MACjB,OAAO,UAAUC,IAAV,EAAgB;QACrB,IAAIC,UAAU,GAAGvB,SAAS,CAACiB,MAAM,CAACE,IAAR,CAAT,CAAuBG,IAAvB,EAA6BL,MAA7B,CAAjB;QACAX,YAAY,CAACiB,UAAD,CAAZ;QACA,OAAOA,UAAP;MACD,CAJD;IAKD;;IAED,OAAO,UAAUD,IAAV,EAAgB;MACrB,OAAOtB,SAAS,CAACiB,MAAM,CAACE,IAAR,CAAT,CAAuBG,IAAvB,EAA6BL,MAA7B,CAAP;IACD,CAFD;EAGD,CA9BD;EA+BA;AACF;AACA;AACA;AACA;;;EAGET,SAAS,CAACgB,YAAV,GAAyB,UAAUC,QAAV,EAAoBC,EAApB,EAAwB;IAC/C,IAAIC,KAAK,GAAG,CAAC,CAAb,CAD+C,CAC/B;;IAEhB1B,IAAI,CAACwB,QAAD,EAAW,UAAUG,MAAV,EAAkBC,CAAlB,EAAqB;MAClC,IAAIH,EAAE,KAAKE,MAAM,CAACF,EAAlB,EAAsB;QACpBC,KAAK,GAAGE,CAAR;QACA,OAAO,KAAP;MACD;IACF,CALG,CAAJ;IAMA,OAAOF,KAAP;EACD,CAVD;;EAYAnB,SAAS,CAACQ,SAAV,CAAoBc,aAApB,GAAoC,YAAY;IAC9C,IAAIpB,GAAG,GAAGD,MAAM,CAACO,SAAP,CAAiBc,aAAjB,CAA+BlB,IAA/B,CAAoC,IAApC,CAAV,CAD8C,CACO;;;IAGrDF,GAAG,CAACqB,OAAJ,GAAc,IAAd;IACA,OAAOrB,GAAP;EACD,CAND;EAOA;AACF;AACA;AACA;AACA;AACA;;;EAGEF,SAAS,CAACQ,SAAV,CAAoBgB,aAApB,GAAoC,UAAUC,QAAV,EAAoBC,MAApB,EAA4BH,OAA5B,EAAqC;IACvE,IAAII,IAAI,GAAG,IAAX;IACA,IAAIC,KAAK,GAAGH,QAAQ,CAACX,IAArB;;IAEA,IAAIc,KAAJ,EAAW;MACT;MACAA,KAAK,CAACC,CAAN,GAAUJ,QAAQ,CAACI,CAAnB;MACAD,KAAK,CAACE,CAAN,GAAUL,QAAQ,CAACK,CAAnB;MACAF,KAAK,CAACG,KAAN,GAAcN,QAAQ,CAACM,KAAvB;IACD;;IAED,IAAIC,IAAI,GAAGL,IAAI,CAACM,OAAL,CAAa,MAAb,EAAqBL,KAArB,EAA4B,KAA5B,CAAX;;IAEA,IAAIF,MAAJ,EAAY;MACVM,IAAI,CAAC1B,GAAL,CAAS,QAAT,EAAmBoB,MAAnB;;MAEA,IAAIH,OAAJ,EAAa;QACX,IAAIW,QAAQ,GAAGR,MAAM,CAAChB,GAAP,CAAW,aAAX,CAAf;;QAEA,IAAIwB,QAAJ,EAAc;UACZF,IAAI,CAAC1B,GAAL,CAAS,aAAT,EAAwB4B,QAAxB;QACD,CAFD,MAEO;UACL,IAAIC,WAAW,GAAGT,MAAM,CAACU,QAAP,EAAlB;UACAJ,IAAI,CAAC1B,GAAL,CAAS,aAAT,EAAwB;YACtBuB,CAAC,EAAEM,WAAW,CAACN,CADO;YAEtBC,CAAC,EAAEK,WAAW,CAACL;UAFO,CAAxB;QAID;MACF;;MAED,IAAIO,YAAY,GAAGX,MAAM,CAAChB,GAAP,CAAW,UAAX,CAAnB;;MAEA,IAAI,CAAC2B,YAAL,EAAmB;QACjBX,MAAM,CAACpB,GAAP,CAAW,UAAX,EAAuB,CAAC0B,IAAD,CAAvB;MACD,CAFD,MAEO;QACLK,YAAY,CAACC,IAAb,CAAkBN,IAAlB;MACD;;MAEDL,IAAI,CAACM,OAAL,CAAa,MAAb,EAAqB;QACnBM,MAAM,EAAEb,MAAM,CAAChB,GAAP,CAAW,IAAX,CADW;QAEnB8B,MAAM,EAAER,IAAI,CAACtB,GAAL,CAAS,IAAT,CAFW;QAGnBQ,EAAE,EAAE,GAAGuB,MAAH,CAAUf,MAAM,CAAChB,GAAP,CAAW,IAAX,CAAV,EAA4B,GAA5B,EAAiC+B,MAAjC,CAAwCT,IAAI,CAACtB,GAAL,CAAS,IAAT,CAAxC;MAHe,CAArB,EAIG,KAJH;IAKD,CA3CsE,CA2CrE;;;IAGFjB,IAAI,CAACgC,QAAQ,CAACR,QAAT,IAAqB,EAAtB,EAA0B,UAAUyB,KAAV,EAAiB;MAC7Cf,IAAI,CAACH,aAAL,CAAmBkB,KAAnB,EAA0BV,IAA1B,EAAgCT,OAAhC;IACD,CAFG,CAAJ;IAGAI,IAAI,CAACgB,IAAL,CAAU,eAAV,EAA2B;MACzBC,IAAI,EAAEZ,IADmB;MAEzBN,MAAM,EAAEA;IAFiB,CAA3B;IAIA,OAAOM,IAAP;EACD,CAtDD;EAuDA;AACF;AACA;AACA;AACA;AACA;;;EAGEhC,SAAS,CAACQ,SAAV,CAAoBqC,gBAApB,GAAuC,UAAU/B,IAAV,EAAgBY,MAAhB,EAAwBH,OAAxB,EAAiC;IACtE,IAAII,IAAI,GAAG,IAAX;IACA,IAAImB,OAAO,GAAGnB,IAAI,CAACoB,QAAL,CAAcjC,IAAI,CAACI,EAAnB,CAAd,CAFsE,CAEhC;;IAEtC,IAAI,CAAC4B,OAAL,EAAc;MACZnB,IAAI,CAACH,aAAL,CAAmBV,IAAnB,EAAyBY,MAAzB,EAAiCH,OAAjC;MACA;IACD,CAPqE,CAOpE;;;IAGF9B,IAAI,CAACqB,IAAI,CAACG,QAAL,IAAiB,EAAlB,EAAsB,UAAUyB,KAAV,EAAiB;MACzCf,IAAI,CAACkB,gBAAL,CAAsBH,KAAtB,EAA6BI,OAA7B,EAAsCvB,OAAtC;IACD,CAFG,CAAJ,CAVsE,CAYlE;;IAEJ,IAAIN,QAAQ,GAAG6B,OAAO,CAACpC,GAAR,CAAY,UAAZ,CAAf;;IAEA,IAAIO,QAAJ,EAAc;MACZ,IAAI+B,GAAG,GAAG/B,QAAQ,CAACgC,MAAnB;;MAEA,IAAID,GAAG,GAAG,CAAV,EAAa;QACX,KAAK,IAAI3B,CAAC,GAAGJ,QAAQ,CAACgC,MAAT,GAAkB,CAA/B,EAAkC5B,CAAC,IAAI,CAAvC,EAA0CA,CAAC,EAA3C,EAA+C;UAC7C,IAAIqB,KAAK,GAAGzB,QAAQ,CAACI,CAAD,CAAR,CAAYe,QAAZ,EAAZ;;UAEA,IAAIpC,SAAS,CAACgB,YAAV,CAAuBF,IAAI,CAACG,QAAL,IAAiB,EAAxC,EAA4CyB,KAAK,CAACxB,EAAlD,MAA0D,CAAC,CAA/D,EAAkE;YAChES,IAAI,CAACuB,gBAAL,CAAsBR,KAAK,CAACxB,EAA5B,EAAgC;cAC9BW,CAAC,EAAEf,IAAI,CAACe,CADsB;cAE9BC,CAAC,EAAEhB,IAAI,CAACgB;YAFsB,CAAhC,EAGGP,OAHH,EADgE,CAInD;;YAEbN,QAAQ,CAACkC,MAAT,CAAgB9B,CAAhB,EAAmB,CAAnB;UACD;QACF;MACF;IACF;;IAED,IAAI+B,IAAJ;IACA,IAAIC,IAAJ;;IAEA,IAAIP,OAAO,CAACpC,GAAR,CAAY,aAAZ,CAAJ,EAAgC;MAC9B0C,IAAI,GAAGN,OAAO,CAACpC,GAAR,CAAY,aAAZ,EAA2BmB,CAAlC;MACAwB,IAAI,GAAGP,OAAO,CAACpC,GAAR,CAAY,aAAZ,EAA2BoB,CAAlC;IACD;;IAED,IAAIF,KAAK,GAAGkB,OAAO,CAACV,QAAR,EAAZ;;IAEA,IAAIb,OAAJ,EAAa;MACX;MACAuB,OAAO,CAACxC,GAAR,CAAY,aAAZ,EAA2B;QACzBuB,CAAC,EAAED,KAAK,CAACC,CADgB;QAEzBC,CAAC,EAAEF,KAAK,CAACE;MAFgB,CAA3B;IAID;;IAEDgB,OAAO,CAACxC,GAAR,CAAY,OAAZ,EAAqBQ,IAAI,CAACA,IAA1B;;IAEA,IAAIsC,IAAI,KAAKtC,IAAI,CAACe,CAAd,IAAmBwB,IAAI,KAAKvC,IAAI,CAACgB,CAArC,EAAwC;MACtCgB,OAAO,CAACQ,cAAR,CAAuB;QACrBzB,CAAC,EAAEf,IAAI,CAACe,CADa;QAErBC,CAAC,EAAEhB,IAAI,CAACgB;MAFa,CAAvB;IAID;EACF,CA7DD;EA8DA;AACF;AACA;AACA;AACA;AACA;;;EAGE9B,SAAS,CAACQ,SAAV,CAAoB0C,gBAApB,GAAuC,UAAUhC,EAAV,EAAcqC,EAAd,EAAkBhC,OAAlB,EAA2B;IAChE,IAAII,IAAI,GAAG,IAAX;IACA,IAAIK,IAAI,GAAGL,IAAI,CAACoB,QAAL,CAAc7B,EAAd,CAAX;;IAEA,IAAI,CAACc,IAAL,EAAW;MACT;IACD;;IAEDvC,IAAI,CAACuC,IAAI,CAACtB,GAAL,CAAS,UAAT,CAAD,EAAuB,UAAUgC,KAAV,EAAiB;MAC1Cf,IAAI,CAACuB,gBAAL,CAAsBR,KAAK,CAACN,QAAN,GAAiBlB,EAAvC,EAA2CqC,EAA3C,EAA+ChC,OAA/C;IACD,CAFG,CAAJ;;IAIA,IAAIA,OAAJ,EAAa;MACX,IAAIK,KAAK,GAAGI,IAAI,CAACI,QAAL,EAAZ;MACAJ,IAAI,CAAC1B,GAAL,CAAS,IAAT,EAAeiD,EAAf;MACAvB,IAAI,CAAC1B,GAAL,CAAS,aAAT,EAAwB;QACtBuB,CAAC,EAAED,KAAK,CAACC,CADa;QAEtBC,CAAC,EAAEF,KAAK,CAACE;MAFa,CAAxB;MAIAH,IAAI,CAACjB,GAAL,CAAS,YAAT,EAAuB4B,IAAvB,CAA4BN,IAA5B;IACD,CARD,MAQO;MACLL,IAAI,CAAC6B,UAAL,CAAgBxB,IAAhB,EAAsB,KAAtB;IACD;EACF,CAvBD;EAwBA;AACF;AACA;AACA;;;EAGEhC,SAAS,CAACQ,SAAV,CAAoBiD,UAApB,GAAiC,UAAU3C,IAAV,EAAgB;IAC/C,IAAIa,IAAI,GAAG,IAAX,CAD+C,CAC9B;;IAEjB,KAAK+B,QAAL,GAAgBC,GAAhB,CAAoB,UAAU3B,IAAV,EAAgB;MAClC,OAAOL,IAAI,CAACiC,eAAL,CAAqB5B,IAArB,CAAP;IACD,CAFD;IAGA,KAAK6B,QAAL,GAAgBF,GAAhB,CAAoB,UAAUG,IAAV,EAAgB;MAClC,OAAOnC,IAAI,CAACiC,eAAL,CAAqBE,IAArB,CAAP;IACD,CAFD;;IAIA,IAAIhD,IAAJ,EAAU;MACRa,IAAI,CAACb,IAAL,CAAUA,IAAV;MACAa,IAAI,CAACoC,MAAL;IACD,CAHD,MAGO;MACLpC,IAAI,CAAClB,MAAL,CAAY,KAAKC,GAAL,CAAS,SAAT,CAAZ;IACD;EACF,CAhBD;EAiBA;AACF;AACA;AACA;AACA;;;EAGEV,SAAS,CAACQ,SAAV,CAAoBwD,YAApB,GAAmC,UAAUvD,MAAV,EAAkB;IACnD;IACAwD,OAAO,CAACC,IAAR,CAAa,uFAAb;IACA,IAAIvC,IAAI,GAAG,IAAX;IACAA,IAAI,CAACwC,YAAL,CAAkB1D,MAAlB;EACD,CALD;EAMA;AACF;AACA;AACA;;;EAGET,SAAS,CAACQ,SAAV,CAAoB2D,YAApB,GAAmC,UAAU1D,MAAV,EAAkB;IACnD,IAAIkB,IAAI,GAAG,IAAX;;IAEA,IAAI,CAAClB,MAAL,EAAa;MACX;MACAwD,OAAO,CAACC,IAAR,CAAa,uBAAb;MACA;IACD;;IAEDvC,IAAI,CAACrB,GAAL,CAAS,QAAT,EAAmBG,MAAnB;IACAkB,IAAI,CAACrB,GAAL,CAAS,cAAT,EAAyBqB,IAAI,CAACpB,SAAL,EAAzB;IACAoB,IAAI,CAAClB,MAAL;EACD,CAZD;EAaA;AACF;AACA;AACA;AACA;;;EAGET,SAAS,CAACQ,SAAV,CAAoB4D,aAApB,GAAoC,UAAUC,OAAV,EAAmB;IACrD;IACAJ,OAAO,CAACC,IAAR,CAAa,mFAAb;IACA,IAAIvC,IAAI,GAAG,IAAX;IACAA,IAAI,CAAClB,MAAL,CAAY4D,OAAZ;EACD,CALD;EAMA;AACF;AACA;AACA;;;EAGErE,SAAS,CAACQ,SAAV,CAAoBC,MAApB,GAA6B,UAAU4D,OAAV,EAAmB;IAC9C,IAAI1C,IAAI,GAAG,IAAX;IACA,IAAIb,IAAI,GAAGa,IAAI,CAACjB,GAAL,CAAS,MAAT,CAAX;IACA,IAAI4D,YAAY,GAAG3C,IAAI,CAACjB,GAAL,CAAS,cAAT,CAAnB;IACA,IAAIK,UAAU,GAAGuD,YAAY,GAAGA,YAAY,CAACxD,IAAD,EAAOa,IAAI,CAACjB,GAAL,CAAS,QAAT,CAAP,CAAf,GAA4CI,IAAzE;IACA,IAAIS,OAAO,GAAGI,IAAI,CAACjB,GAAL,CAAS,SAAT,CAAd;IACAiB,IAAI,CAACgB,IAAL,CAAU,qBAAV,EAAiC;MAC/B7B,IAAI,EAAEA,IADyB;MAE/BC,UAAU,EAAEA;IAFmB,CAAjC;IAIAY,IAAI,CAACgB,IAAL,CAAU,cAAV;IACAhB,IAAI,CAACkB,gBAAL,CAAsB9B,UAAtB,EAAkCwD,SAAlC,EAA6ChD,OAA7C;;IAEA,IAAI8C,OAAJ,EAAa;MACX,IAAIG,cAAc,GAAG7C,IAAI,CAACjB,GAAL,CAAS,gBAAT,CAArB;MACA8D,cAAc,CAACH,OAAf;IACD;;IAED,IAAI,CAAC9C,OAAL,EAAc;MACZ;MACAI,IAAI,CAAC8C,OAAL;MACA9C,IAAI,CAAC+C,KAAL;IACD,CAJD,MAIO;MACL/C,IAAI,CAACgD,aAAL,CAAmB5D,UAAnB;IACD;;IAEDY,IAAI,CAACgB,IAAL,CAAU,oBAAV,EAAgC;MAC9B7B,IAAI,EAAEA,IADwB;MAE9BC,UAAU,EAAEA;IAFkB,CAAhC;IAIAY,IAAI,CAACgB,IAAL,CAAU,aAAV;EACD,CA/BD;EAgCA;AACF;AACA;AACA;AACA;;;EAGE3C,SAAS,CAACQ,SAAV,CAAoBoE,QAApB,GAA+B,UAAU9D,IAAV,EAAgBY,MAAhB,EAAwB;IACrD,IAAIC,IAAI,GAAG,IAAX;IACAA,IAAI,CAACgB,IAAL,CAAU,gBAAV,EAA4B;MAC1Bf,KAAK,EAAEd,IADmB;MAE1BY,MAAM,EAAEA;IAFkB,CAA5B,EAFqD,CAKjD;;IAEJ,IAAI,CAAC/B,QAAQ,CAAC+B,MAAD,CAAb,EAAuB;MACrBA,MAAM,GAAGA,MAAM,CAAChB,GAAP,CAAW,IAAX,CAAT;IACD;;IAED,IAAImE,UAAU,GAAGlD,IAAI,CAACmD,YAAL,CAAkBpD,MAAlB,CAAjB;;IAEA,IAAImD,UAAJ,EAAgB;MACd,IAAI,CAACA,UAAU,CAAC5D,QAAhB,EAA0B;QACxB4D,UAAU,CAAC5D,QAAX,GAAsB,EAAtB;MACD;;MAED4D,UAAU,CAAC5D,QAAX,CAAoBqB,IAApB,CAAyBxB,IAAzB;MACAa,IAAI,CAAC8B,UAAL;IACD;EACF,CArBD;EAsBA;AACF;AACA;AACA;AACA;;;EAGEzD,SAAS,CAACQ,SAAV,CAAoBuE,cAApB,GAAqC,UAAUjE,IAAV,EAAgBkE,QAAhB,EAA0B;IAC7D,IAAIrD,IAAI,GAAG,IAAX,CAD6D,CAC5C;;IAEjB,IAAI,CAACqD,QAAD,IAAa,CAACrD,IAAI,CAACoB,QAAL,CAAciC,QAAd,CAAlB,EAA2C;MACzCf,OAAO,CAACC,IAAR,CAAa,qDAAqDzB,MAArD,CAA4DuC,QAA5D,EAAsE,GAAtE,CAAb;MACA;IACD;;IAED,IAAI7C,WAAW,GAAGR,IAAI,CAACmD,YAAL,CAAkBE,QAAlB,CAAlB;IACA7C,WAAW,CAAClB,QAAZ,GAAuBH,IAAvB;IACAa,IAAI,CAAC8B,UAAL;EACD,CAXD;EAYA;AACF;AACA;AACA;AACA;;;EAGEzD,SAAS,CAACQ,SAAV,CAAoByE,WAApB,GAAkC,UAAUnE,IAAV,EAAgBkE,QAAhB,EAA0B;IAC1D,IAAIrD,IAAI,GAAG,IAAX,CAD0D,CACzC;;IAEjB,IAAI,CAACqD,QAAD,IAAa,CAACrD,IAAI,CAACoB,QAAL,CAAciC,QAAd,CAAlB,EAA2C;MACzCrD,IAAI,CAAC8B,UAAL,CAAgB3C,IAAhB;MACA;IACD;;IAED,IAAIqB,WAAW,GAAGR,IAAI,CAACmD,YAAL,CAAkBE,QAAlB,CAAlB;IACA,IAAIlC,OAAO,GAAGnB,IAAI,CAACoB,QAAL,CAAcjC,IAAI,CAACI,EAAnB,CAAd;;IAEA,IAAI,CAACiB,WAAW,CAAClB,QAAjB,EAA2B;MACzB;MACAkB,WAAW,CAAClB,QAAZ,GAAuB,EAAvB;IACD,CAdyD,CAcxD;;;IAGF,IAAI,CAAC6B,OAAL,EAAc;MACZX,WAAW,CAAClB,QAAZ,CAAqBqB,IAArB,CAA0BxB,IAA1B;IACD,CAFD,MAEO;MACL,IAAIK,KAAK,GAAGnB,SAAS,CAACgB,YAAV,CAAuBmB,WAAW,CAAClB,QAAnC,EAA6CH,IAAI,CAACI,EAAlD,CAAZ;MACAiB,WAAW,CAAClB,QAAZ,CAAqBE,KAArB,IAA8BL,IAA9B;IACD;;IAEDa,IAAI,CAAC8B,UAAL;EACD,CAzBD;EA0BA;AACF;AACA;AACA;;;EAGEzD,SAAS,CAACQ,SAAV,CAAoB0E,WAApB,GAAkC,UAAUhE,EAAV,EAAc;IAC9C,IAAIS,IAAI,GAAG,IAAX;IACA,IAAIK,IAAI,GAAGL,IAAI,CAACoB,QAAL,CAAc7B,EAAd,CAAX;;IAEA,IAAI,CAACc,IAAL,EAAW;MACT;IACD;;IAED,IAAIN,MAAM,GAAGM,IAAI,CAACtB,GAAL,CAAS,QAAT,CAAb;;IAEA,IAAIgB,MAAM,IAAI,CAACA,MAAM,CAACyD,SAAtB,EAAiC;MAC/B,IAAIC,UAAU,GAAGzD,IAAI,CAACmD,YAAL,CAAkBpD,MAAM,CAAChB,GAAP,CAAW,IAAX,CAAlB,CAAjB;MACA,IAAI2E,QAAQ,GAAGD,UAAU,IAAIA,UAAU,CAACnE,QAAzB,IAAqC,EAApD;MACA,IAAIW,KAAK,GAAGI,IAAI,CAACI,QAAL,EAAZ;MACA,IAAIjB,KAAK,GAAGnB,SAAS,CAACgB,YAAV,CAAuBqE,QAAvB,EAAiCzD,KAAK,CAACV,EAAvC,CAAZ;MACAmE,QAAQ,CAAClC,MAAT,CAAgBhC,KAAhB,EAAuB,CAAvB;IACD;;IAEDQ,IAAI,CAAC8B,UAAL;EACD,CAnBD;EAoBA;AACF;AACA;AACA;AACA;AACA;;;EAGEzD,SAAS,CAACQ,SAAV,CAAoBsE,YAApB,GAAmC,UAAU5D,EAAV,EAAcQ,MAAd,EAAsB;IACvD,IAAIC,IAAI,GAAG,IAAX;;IAEA,IAAI,CAACD,MAAL,EAAa;MACXA,MAAM,GAAGC,IAAI,CAACjB,GAAL,CAAS,MAAT,CAAT;IACD;;IAED,IAAIQ,EAAE,KAAKQ,MAAM,CAACR,EAAlB,EAAsB;MACpB,OAAOQ,MAAP;IACD;;IAED,IAAI4D,MAAM,GAAG,IAAb,CAXuD,CAWpC;;IAEnB7F,IAAI,CAACiC,MAAM,CAACT,QAAP,IAAmB,EAApB,EAAwB,UAAUyB,KAAV,EAAiB;MAC3C,IAAIA,KAAK,CAACxB,EAAN,KAAaA,EAAjB,EAAqB;QACnBoE,MAAM,GAAG5C,KAAT;QACA,OAAO,KAAP;MACD;;MAED4C,MAAM,GAAG3D,IAAI,CAACmD,YAAL,CAAkB5D,EAAlB,EAAsBwB,KAAtB,CAAT;;MAEA,IAAI4C,MAAJ,EAAY;QACV,OAAO,KAAP;MACD;IACF,CAXG,CAAJ;IAYA,OAAOA,MAAP;EACD,CA1BD;EA2BA;AACF;AACA;AACA;AACA;;;EAGEtF,SAAS,CAACQ,SAAV,CAAoBmE,aAApB,GAAoC,UAAU7D,IAAV,EAAgByE,OAAhB,EAAyB;IAC3D,IAAI5D,IAAI,GAAG,IAAX;IACA,IAAI6D,UAAU,GAAG,KAAK9E,GAAL,CAAS,YAAT,CAAjB;IACAiB,IAAI,CAACgB,IAAL,CAAU,eAAV,EAA2B;MACzB7B,IAAI,EAAEA;IADmB,CAA3B,EAH2D,CAKvD;;IAEJa,IAAI,CAACkC,QAAL,GAAgB4B,OAAhB,CAAwB,UAAU3B,IAAV,EAAgB;MACtC,IAAIlC,KAAK,GAAGkC,IAAI,CAACpD,GAAL,CAAS,OAAT,CAAZ;;MAEA,IAAI,CAACkB,KAAK,CAAC8D,YAAX,EAAyB;QACvB9D,KAAK,CAAC8D,YAAN,GAAqB5B,IAAI,CAACpD,GAAL,CAAS,mBAAT,CAArB;MACD;IACF,CAND;IAOA,KAAKA,GAAL,CAAS,QAAT,EAAmBa,OAAnB,CAA2B,UAAUoE,KAAV,EAAiB;MAC1C5F,YAAY,CAACe,IAAD,EAAO,UAAU4B,KAAV,EAAiB;QAClC,IAAIV,IAAI,GAAGL,IAAI,CAACoB,QAAL,CAAcL,KAAK,CAACxB,EAApB,CAAX,CADkC,CACE;;QAEpC,IAAIc,IAAJ,EAAU;UACR,IAAI4D,QAAQ,GAAG5D,IAAI,CAACtB,GAAL,CAAS,aAAT,CAAf;UACA,IAAIkB,KAAK,GAAGI,IAAI,CAACtB,GAAL,CAAS,OAAT,CAAZ;;UAEA,IAAI,CAACkF,QAAL,EAAe;YACbA,QAAQ,GAAG;cACT/D,CAAC,EAAED,KAAK,CAACC,CADA;cAETC,CAAC,EAAEF,KAAK,CAACE;YAFA,CAAX;YAIAE,IAAI,CAAC1B,GAAL,CAAS,aAAT,EAAwBsF,QAAxB;UACD;;UAED,IAAIL,OAAJ,EAAa;YACX,IAAIM,KAAK,GAAGN,OAAO,CAACvD,IAAD,EAAO2D,KAAP,EAAcC,QAAd,EAAwB9E,IAAxB,CAAnB;YACAkB,IAAI,CAAC1B,GAAL,CAAS,OAAT,EAAkBwF,MAAM,CAACC,MAAP,CAAcnE,KAAd,EAAqBiE,KAArB,CAAlB;UACD,CAHD,MAGO;YACLjE,KAAK,CAACC,CAAN,GAAU+D,QAAQ,CAAC/D,CAAT,GAAa,CAACa,KAAK,CAACb,CAAN,GAAU+D,QAAQ,CAAC/D,CAApB,IAAyB8D,KAAhD;YACA/D,KAAK,CAACE,CAAN,GAAU8D,QAAQ,CAAC9D,CAAT,GAAa,CAACY,KAAK,CAACZ,CAAN,GAAU8D,QAAQ,CAAC9D,CAApB,IAAyB6D,KAAhD;UACD;QACF;;QAED,OAAO,IAAP;MACD,CAzBW,CAAZ;MA0BAlG,IAAI,CAACkC,IAAI,CAACjB,GAAL,CAAS,YAAT,CAAD,EAAyB,UAAUsB,IAAV,EAAgB;QAC3C,IAAIJ,KAAK,GAAGI,IAAI,CAACI,QAAL,EAAZ;QACA,IAAI4D,IAAI,GAAGhE,IAAI,CAACtB,GAAL,CAAS,aAAT,CAAX;QACA,IAAI6C,EAAE,GAAGvB,IAAI,CAACtB,GAAL,CAAS,IAAT,CAAT;QACAkB,KAAK,CAACC,CAAN,GAAUmE,IAAI,CAACnE,CAAL,GAAS,CAAC0B,EAAE,CAAC1B,CAAH,GAAOmE,IAAI,CAACnE,CAAb,IAAkB8D,KAArC;QACA/D,KAAK,CAACE,CAAN,GAAUkE,IAAI,CAAClE,CAAL,GAAS,CAACyB,EAAE,CAACzB,CAAH,GAAOkE,IAAI,CAAClE,CAAb,IAAkB6D,KAArC;MACD,CANG,CAAJ;MAOAhE,IAAI,CAACsE,gBAAL;IACD,CAnCD,EAmCG;MACDC,QAAQ,EAAEV,UAAU,CAACU,QADpB;MAEDC,MAAM,EAAEX,UAAU,CAACY,IAFlB;MAGDC,QAAQ,EAAE,SAASA,QAAT,GAAoB;QAC5B5G,IAAI,CAACkC,IAAI,CAAC+B,QAAL,EAAD,EAAkB,UAAU1B,IAAV,EAAgB;UACpCA,IAAI,CAAC1B,GAAL,CAAS,aAAT,EAAwB,IAAxB;QACD,CAFG,CAAJ;QAGAb,IAAI,CAACkC,IAAI,CAACjB,GAAL,CAAS,YAAT,CAAD,EAAyB,UAAUsB,IAAV,EAAgB;UAC3CL,IAAI,CAAC6B,UAAL,CAAgBxB,IAAhB;QACD,CAFG,CAAJ;QAGAL,IAAI,CAACrB,GAAL,CAAS,YAAT,EAAuB,EAAvB;;QAEA,IAAIkF,UAAU,CAACa,QAAf,EAAyB;UACvBb,UAAU,CAACa,QAAX;QACD;;QAED1E,IAAI,CAACgB,IAAL,CAAU,cAAV,EAA0B;UACxB7B,IAAI,EAAEA;QADkB,CAA1B;MAGD,CAnBA;MAoBDwF,KAAK,EAAEd,UAAU,CAACc;IApBjB,CAnCH;EAyDD,CAvED;EAwEA;AACF;AACA;;;EAGEtG,SAAS,CAACQ,SAAV,CAAoB+F,iBAApB,GAAwC,YAAY;IAClD,KAAK7F,GAAL,CAAS,QAAT,EAAmB8F,WAAnB;IACA,KAAK7D,IAAL,CAAU,kBAAV,EAA8B;MAC5B7B,IAAI,EAAE,KAAKJ,GAAL,CAAS,MAAT;IADsB,CAA9B;IAGA,KAAKL,eAAL,GAAuB,KAAvB;EACD,CAND;EAOA;AACF;AACA;AACA;;;EAGEL,SAAS,CAACQ,SAAV,CAAoBiG,iBAApB,GAAwC,YAAY;IAClD,OAAO,KAAKpG,eAAZ;EACD,CAFD;EAGA;AACF;AACA;;;EAGEL,SAAS,CAACQ,SAAV,CAAoBuD,MAApB,GAA6B,YAAY;IACvC,IAAIpC,IAAI,GAAG,IAAX;IACA,IAAIb,IAAI,GAAGa,IAAI,CAACjB,GAAL,CAAS,MAAT,CAAX;;IAEA,IAAI,CAACI,IAAD,IAAS,CAACpB,QAAQ,CAACoB,IAAD,CAAlB,IAA4B,CAACgF,MAAM,CAACY,IAAP,CAAY5F,IAAZ,EAAkBmC,MAAnD,EAA2D;MACzD,MAAM,IAAI0D,KAAJ,CAAU,4BAAV,CAAN;IACD;;IAEDhF,IAAI,CAACiF,KAAL;IACAjF,IAAI,CAACgB,IAAL,CAAU,cAAV;IACAhB,IAAI,CAAClB,MAAL,CAAY,KAAKC,GAAL,CAAS,SAAT,CAAZ;IACAiB,IAAI,CAACgB,IAAL,CAAU,aAAV;EACD,CAZD;EAaA;AACF;AACA;AACA;;;EAGE3C,SAAS,CAACQ,SAAV,CAAoBqG,IAApB,GAA2B,YAAY;IACrC,OAAO,KAAKnG,GAAL,CAAS,MAAT,CAAP;EACD,CAFD;;EAIA,OAAOV,SAAP;AACD,CA1mBD,CA0mBEH,KA1mBF,CAFA;;AA8mBA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}