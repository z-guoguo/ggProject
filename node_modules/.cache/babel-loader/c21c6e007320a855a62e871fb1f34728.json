{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.slack = exports.longestPathWithLayer = exports.longestPath = void 0;\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\n\nvar longestPath = function (g) {\n  var _a;\n\n  var visited = {};\n\n  var dfs = function (v) {\n    var _a;\n\n    var label = g.node(v);\n\n    if (visited[v]) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n    var rank;\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (edgeObj) {\n      var wRank = dfs(edgeObj.w);\n      var minLen = g.edge(edgeObj).minlen;\n      var r = wRank - minLen;\n\n      if (r) {\n        if (rank === undefined || r < rank) {\n          rank = r;\n        }\n      }\n    });\n\n    if (!rank) {\n      rank = 0;\n    }\n\n    label.rank = rank;\n    return rank;\n  };\n\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(function (source) {\n    return dfs(source);\n  });\n};\n\nexports.longestPath = longestPath;\n\nvar longestPathWithLayer = function (g) {\n  var _a; // 用longest path，找出最深的点\n\n\n  var visited = {};\n  var minRank;\n\n  var dfs = function (v) {\n    var _a;\n\n    var label = g.node(v);\n\n    if (visited[v]) {\n      return label.rank;\n    }\n\n    visited[v] = true;\n    var rank;\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (edgeObj) {\n      var wRank = dfs(edgeObj.w);\n      var minLen = g.edge(edgeObj).minlen;\n      var r = wRank - minLen;\n\n      if (r) {\n        if (rank === undefined || r < rank) {\n          rank = r;\n        }\n      }\n    });\n\n    if (!rank) {\n      rank = 0;\n    }\n\n    if (minRank === undefined || rank < minRank) {\n      minRank = rank;\n    }\n\n    label.rank = rank;\n    return rank;\n  };\n\n  (_a = g.sources()) === null || _a === void 0 ? void 0 : _a.forEach(function (source) {\n    return dfs(source);\n  });\n\n  if (minRank === undefined) {\n    minRank = 0;\n  } // minRank += 1; // NOTE: 最小的层级是dummy root，+1\n  // forward一遍，赋值层级\n\n\n  var dfsForward = function (v, nextRank) {\n    var _a;\n\n    var label = g.node(v);\n    var currRank = !isNaN(label.layer) ? label.layer : nextRank; // 没有指定，取最大值\n\n    if (label.rank === undefined || label.rank < currRank) {\n      label.rank = currRank;\n    } // DFS遍历子节点\n\n\n    (_a = g.outEdges(v)) === null || _a === void 0 ? void 0 : _a.map(function (e) {\n      dfsForward(e.w, currRank + g.edge(e).minlen);\n    });\n  }; // 指定层级的，更新下游\n\n\n  g.nodes().forEach(function (n) {\n    var label = g.node(n);\n\n    if (!isNaN(label.layer)) {\n      dfsForward(n, label.layer); // 默认的dummy root所在层的rank是-1\n    } else {\n      label.rank -= minRank;\n    }\n  });\n};\n\nexports.longestPathWithLayer = longestPathWithLayer;\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\n\nvar slack = function (g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n};\n\nexports.slack = slack;\nexports.default = {\n  longestPath: longestPath,\n  longestPathWithLayer: longestPathWithLayer,\n  slack: slack\n};","map":{"version":3,"mappings":"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","names":["longestPath","g","visited","dfs","v","label","node","rank","outEdges","_a","forEach","edgeObj","wRank","w","minLen","edge","minlen","r","undefined","sources","source","exports","longestPathWithLayer","minRank","dfsForward","nextRank","currRank","isNaN","layer","map","e","nodes","n","slack"],"sourceRoot":"","sources":["../../../../../src/layout/dagre/src/rank/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}