{"ast":null,"code":"import { Model } from '../model/model';\nexport function grid(cells, options = {}) {\n  const model = Model.isModel(cells) ? cells : new Model().resetCells(cells, {\n    sort: false,\n    dryrun: true\n  });\n  const nodes = model.getNodes();\n  const columns = options.columns || 1;\n  const rows = Math.ceil(nodes.length / columns);\n  const dx = options.dx || 0;\n  const dy = options.dy || 0;\n  const centre = options.center !== false;\n  const resizeToFit = options.resizeToFit === true;\n  const marginX = options.marginX || 0;\n  const marginY = options.marginY || 0;\n  const columnWidths = [];\n  let columnWidth = options.columnWidth;\n\n  if (columnWidth === 'compact') {\n    for (let j = 0; j < columns; j += 1) {\n      const items = GridLayout.getNodesInColumn(nodes, j, columns);\n      columnWidths.push(GridLayout.getMaxDim(items, 'width') + dx);\n    }\n  } else {\n    if (columnWidth == null || columnWidth === 'auto') {\n      columnWidth = GridLayout.getMaxDim(nodes, 'width') + dx;\n    }\n\n    for (let i = 0; i < columns; i += 1) {\n      columnWidths.push(columnWidth);\n    }\n  }\n\n  const columnLefts = GridLayout.accumulate(columnWidths, marginX);\n  const rowHeights = [];\n  let rowHeight = options.rowHeight;\n\n  if (rowHeight === 'compact') {\n    for (let i = 0; i < rows; i += 1) {\n      const items = GridLayout.getNodesInRow(nodes, i, columns);\n      rowHeights.push(GridLayout.getMaxDim(items, 'height') + dy);\n    }\n  } else {\n    if (rowHeight == null || rowHeight === 'auto') {\n      rowHeight = GridLayout.getMaxDim(nodes, 'height') + dy;\n    }\n\n    for (let i = 0; i < rows; i += 1) {\n      rowHeights.push(rowHeight);\n    }\n  }\n\n  const rowTops = GridLayout.accumulate(rowHeights, marginY);\n  model.startBatch('layout');\n  nodes.forEach((node, index) => {\n    const rowIndex = index % columns;\n    const columnIndex = Math.floor(index / columns);\n    const columnWidth = columnWidths[rowIndex];\n    const rowHeight = rowHeights[columnIndex];\n    let cx = 0;\n    let cy = 0;\n    let size = node.getSize();\n\n    if (resizeToFit) {\n      let width = columnWidth - 2 * dx;\n      let height = rowHeight - 2 * dy;\n      const calcHeight = size.height * (size.width ? width / size.width : 1);\n      const calcWidth = size.width * (size.height ? height / size.height : 1);\n\n      if (rowHeight < calcHeight) {\n        width = calcWidth;\n      } else {\n        height = calcHeight;\n      }\n\n      size = {\n        width,\n        height\n      };\n      node.setSize(size, options);\n    }\n\n    if (centre) {\n      cx = (columnWidth - size.width) / 2;\n      cy = (rowHeight - size.height) / 2;\n    }\n\n    node.position(columnLefts[rowIndex] + dx + cx, rowTops[columnIndex] + dy + cy, options);\n  });\n  model.stopBatch('layout');\n}\nvar GridLayout;\n\n(function (GridLayout) {\n  function getMaxDim(nodes, name) {\n    return nodes.reduce((memo, node) => Math.max(node.getSize()[name], memo), 0);\n  }\n\n  GridLayout.getMaxDim = getMaxDim;\n\n  function getNodesInRow(nodes, rowIndex, columnCount) {\n    const res = [];\n\n    for (let i = columnCount * rowIndex, ii = i + columnCount; i < ii; i += 1) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInRow = getNodesInRow;\n\n  function getNodesInColumn(nodes, columnIndex, columnCount) {\n    const res = [];\n\n    for (let i = columnIndex, ii = nodes.length; i < ii; i += columnCount) {\n      res.push(nodes[i]);\n    }\n\n    return res;\n  }\n\n  GridLayout.getNodesInColumn = getNodesInColumn;\n\n  function accumulate(items, start) {\n    return items.reduce((memo, item, i) => {\n      memo.push(memo[i] + item);\n      return memo;\n    }, [start || 0]);\n  }\n\n  GridLayout.accumulate = accumulate;\n})(GridLayout || (GridLayout = {}));","map":{"version":3,"mappings":"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","names":["Model","grid","cells","options","model","isModel","resetCells","sort","dryrun","nodes","getNodes","columns","rows","Math","ceil","length","dx","dy","centre","center","resizeToFit","marginX","marginY","columnWidths","columnWidth","j","items","GridLayout","getNodesInColumn","push","getMaxDim","i","columnLefts","accumulate","rowHeights","rowHeight","getNodesInRow","rowTops","startBatch","forEach","node","index","rowIndex","columnIndex","floor","cx","cy","size","getSize","width","height","calcHeight","calcWidth","setSize","position","stopBatch","name","reduce","memo","max","columnCount","res","ii","start","item"],"sourceRoot":"","sources":["../../src/layout/grid.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}