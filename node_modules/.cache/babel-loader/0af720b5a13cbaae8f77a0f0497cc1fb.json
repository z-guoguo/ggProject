{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // represents a body(a point mass) and its position\n\nvar Body =\n/** @class */\nfunction () {\n  function Body(params) {\n    /**\n     * the id of this body, the same with the node id\n     * @type  {number}\n     */\n    this.id = params.id || 0;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.rx = params.rx;\n    /**\n     * the position of this body\n     * @type  {number}\n     */\n\n    this.ry = params.ry;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fx = 0;\n    /**\n     * the force acting on this body\n     * @type  {number}\n     */\n\n    this.fy = 0;\n    /**\n     * the mass of this body, =1 for a node\n     * @type  {number}\n     */\n\n    this.mass = params.mass;\n    /**\n     * the degree of the node represented by this body\n     * @type  {number}\n     */\n\n    this.degree = params.degree;\n    /**\n     * the parameter for repulsive force, = kr\n     * @type  {number}\n     */\n\n    this.g = params.g || 0;\n  } // returns the euclidean distance\n\n\n  Body.prototype.distanceTo = function (bo) {\n    var dx = this.rx - bo.rx;\n    var dy = this.ry - bo.ry;\n    return Math.hypot(dx, dy);\n  };\n\n  Body.prototype.setPos = function (x, y) {\n    this.rx = x;\n    this.ry = y;\n  }; // resets the forces\n\n\n  Body.prototype.resetForce = function () {\n    this.fx = 0;\n    this.fy = 0;\n  };\n\n  Body.prototype.addForce = function (b) {\n    var dx = b.rx - this.rx;\n    var dy = b.ry - this.ry;\n    var dist = Math.hypot(dx, dy);\n    dist = dist < 0.0001 ? 0.0001 : dist; // the repulsive defined by force atlas 2\n\n    var F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n    this.fx += F * dx / dist;\n    this.fy += F * dy / dist;\n  }; // if quad contains this body\n\n\n  Body.prototype.in = function (quad) {\n    return quad.contains(this.rx, this.ry);\n  }; // returns a new body\n\n\n  Body.prototype.add = function (bo) {\n    var nenwMass = this.mass + bo.mass;\n    var x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n    var y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n    var dg = this.degree + bo.degree;\n    var params = {\n      rx: x,\n      ry: y,\n      mass: nenwMass,\n      degree: dg\n    };\n    return new Body(params);\n  };\n\n  return Body;\n}();\n\nexports.default = Body;","map":{"version":3,"mappings":";;;;IAkBA;;AACA;AAAA;AAAA;EAUE,cAAYA,MAAZ,EAA6B;IAC3B;;;;IAIA,KAAKC,EAAL,GAAUD,MAAM,CAACC,EAAP,IAAa,CAAvB;IACA;;;;;IAIA,KAAKC,EAAL,GAAUF,MAAM,CAACE,EAAjB;IACA;;;;;IAIA,KAAKC,EAAL,GAAUH,MAAM,CAACG,EAAjB;IACA;;;;;IAIA,KAAKC,EAAL,GAAU,CAAV;IACA;;;;;IAIA,KAAKC,EAAL,GAAU,CAAV;IACA;;;;;IAIA,KAAKC,IAAL,GAAYN,MAAM,CAACM,IAAnB;IACA;;;;;IAIA,KAAKC,MAAL,GAAcP,MAAM,CAACO,MAArB;IACA;;;;;IAIA,KAAKC,CAAL,GAASR,MAAM,CAACQ,CAAP,IAAY,CAArB;EACD,CAnDH,CAoDE;;;EACAC,sCAAWC,EAAX,EAAmB;IACjB,IAAMC,EAAE,GAAG,KAAKT,EAAL,GAAUQ,EAAE,CAACR,EAAxB;IACA,IAAMU,EAAE,GAAG,KAAKT,EAAL,GAAUO,EAAE,CAACP,EAAxB;IACA,OAAOU,IAAI,CAACC,KAAL,CAAWH,EAAX,EAAeC,EAAf,CAAP;EACD,CAJD;;EAKAH,kCAAOM,CAAP,EAAkBC,CAAlB,EAA2B;IACzB,KAAKd,EAAL,GAAUa,CAAV;IACA,KAAKZ,EAAL,GAAUa,CAAV;EACD,CAHD,CA1DF,CA8DE;;;EACAP;IACE,KAAKL,EAAL,GAAU,CAAV;IACA,KAAKC,EAAL,GAAU,CAAV;EACD,CAHD;;EAIAI,oCAASQ,CAAT,EAAgB;IACd,IAAMN,EAAE,GAAGM,CAAC,CAACf,EAAF,GAAO,KAAKA,EAAvB;IACA,IAAMU,EAAE,GAAGK,CAAC,CAACd,EAAF,GAAO,KAAKA,EAAvB;IACA,IAAIe,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWH,EAAX,EAAeC,EAAf,CAAX;IACAM,IAAI,GAAGA,IAAI,GAAG,MAAP,GAAgB,MAAhB,GAAyBA,IAAhC,CAJc,CAKd;;IACA,IAAMC,CAAC,GAAI,KAAKX,CAAL,IAAU,KAAKD,MAAL,GAAc,CAAxB,KAA8BU,CAAC,CAACV,MAAF,GAAW,CAAzC,CAAD,GAAgDW,IAA1D;IACA,KAAKd,EAAL,IAAWe,CAAC,GAAGR,EAAJ,GAASO,IAApB;IACA,KAAKb,EAAL,IAAWc,CAAC,GAAGP,EAAJ,GAASM,IAApB;EACD,CATD,CAnEF,CA6EE;;;EACAT,8BAAGW,IAAH,EAAa;IACX,OAAOA,IAAI,CAACC,QAAL,CAAc,KAAKnB,EAAnB,EAAuB,KAAKC,EAA5B,CAAP;EACD,CAFD,CA9EF,CAiFE;;;EACAM,+BAAIC,EAAJ,EAAY;IACV,IAAMY,QAAQ,GAAG,KAAKhB,IAAL,GAAYI,EAAE,CAACJ,IAAhC;IACA,IAAMS,CAAC,GAAG,CAAC,KAAKb,EAAL,GAAU,KAAKI,IAAf,GAAsBI,EAAE,CAACR,EAAH,GAAQQ,EAAE,CAACJ,IAAlC,IAA0CgB,QAApD;IACA,IAAMN,CAAC,GAAG,CAAC,KAAKb,EAAL,GAAU,KAAKG,IAAf,GAAsBI,EAAE,CAACP,EAAH,GAAQO,EAAE,CAACJ,IAAlC,IAA0CgB,QAApD;IACA,IAAMC,EAAE,GAAG,KAAKhB,MAAL,GAAcG,EAAE,CAACH,MAA5B;IACA,IAAMP,MAAM,GAAc;MACxBE,EAAE,EAAEa,CADoB;MAExBZ,EAAE,EAAEa,CAFoB;MAGxBV,IAAI,EAAEgB,QAHkB;MAIxBf,MAAM,EAAEgB;IAJgB,CAA1B;IAMA,OAAO,IAAId,IAAJ,CAAST,MAAT,CAAP;EACD,CAZD;;EAaF;AAAC,CA/FD","names":["params","id","rx","ry","fx","fy","mass","degree","g","Body","bo","dx","dy","Math","hypot","x","y","b","dist","F","quad","contains","nenwMass","dg"],"sourceRoot":"","sources":["../../../src/layout/forceAtlas2/body.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}