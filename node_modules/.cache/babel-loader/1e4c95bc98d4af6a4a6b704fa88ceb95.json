{"ast":null,"code":"import { Point } from './point';\nimport { Geometry } from './geometry';\nimport { Rectangle } from './rectangle';\nexport class Line extends Geometry {\n  constructor(x1, y1, x2, y2) {\n    super();\n\n    if (typeof x1 === 'number' && typeof y1 === 'number') {\n      this.start = new Point(x1, y1);\n      this.end = new Point(x2, y2);\n    } else {\n      this.start = Point.create(x1);\n      this.end = Point.create(y1);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return Line.toStringTag;\n  }\n\n  get center() {\n    return new Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\n  }\n\n  getCenter() {\n    return this.center;\n  }\n  /**\n   * Rounds the line to the given `precision`.\n   */\n\n\n  round(precision = 0) {\n    this.start.round(precision);\n    this.end.round(precision);\n    return this;\n  }\n\n  translate(tx, ty) {\n    if (typeof tx === 'number') {\n      this.start.translate(tx, ty);\n      this.end.translate(tx, ty);\n    } else {\n      this.start.translate(tx);\n      this.end.translate(tx);\n    }\n\n    return this;\n  }\n  /**\n   * Rotate the line by `angle` around `origin`.\n   */\n\n\n  rotate(angle, origin) {\n    this.start.rotate(angle, origin);\n    this.end.rotate(angle, origin);\n    return this;\n  }\n  /**\n   * Scale the line by `sx` and `sy` about the given `origin`. If origin is not\n   * specified, the line is scaled around `0,0`.\n   */\n\n\n  scale(sx, sy, origin) {\n    this.start.scale(sx, sy, origin);\n    this.end.scale(sx, sy, origin);\n    return this;\n  }\n  /**\n   * Returns the length of the line.\n   */\n\n\n  length() {\n    return Math.sqrt(this.squaredLength());\n  }\n  /**\n   * Useful for distance comparisons in which real length is not necessary\n   * (saves one `Math.sqrt()` operation).\n   */\n\n\n  squaredLength() {\n    const dx = this.start.x - this.end.x;\n    const dy = this.start.y - this.end.y;\n    return dx * dx + dy * dy;\n  }\n  /**\n   * Scale the line so that it has the requested length. The start point of\n   * the line is preserved.\n   */\n\n\n  setLength(length) {\n    const total = this.length();\n\n    if (!total) {\n      return this;\n    }\n\n    const scale = length / total;\n    return this.scale(scale, scale, this.start);\n  }\n\n  parallel(distance) {\n    const line = this.clone();\n\n    if (!line.isDifferentiable()) {\n      return line;\n    }\n\n    const {\n      start,\n      end\n    } = line;\n    const eRef = start.clone().rotate(270, end);\n    const sRef = end.clone().rotate(90, start);\n    start.move(sRef, distance);\n    end.move(eRef, distance);\n    return line;\n  }\n  /**\n   * Returns the vector of the line with length equal to length of the line.\n   */\n\n\n  vector() {\n    return new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n  }\n  /**\n   * Returns the angle of incline of the line.\n   *\n   * The function returns `NaN` if the start and end endpoints of the line\n   * both lie at the same coordinates(it is impossible to determine the angle\n   * of incline of a line that appears to be a point). The\n   * `line.isDifferentiable()` function may be used in advance to determine\n   * whether the angle of incline can be computed for a given line.\n   */\n\n\n  angle() {\n    const horizontal = new Point(this.start.x + 1, this.start.y);\n    return this.start.angleBetween(this.end, horizontal);\n  }\n  /**\n   * Returns a rectangle that is the bounding box of the line.\n   */\n\n\n  bbox() {\n    const left = Math.min(this.start.x, this.end.x);\n    const top = Math.min(this.start.y, this.end.y);\n    const right = Math.max(this.start.x, this.end.x);\n    const bottom = Math.max(this.start.y, this.end.y);\n    return new Rectangle(left, top, right - left, bottom - top);\n  }\n  /**\n   * Returns the bearing (cardinal direction) of the line.\n   *\n   * The return value is one of the following strings:\n   * 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW' and 'N'.\n   *\n   * The function returns 'N' if the two endpoints of the line are coincident.\n   */\n\n\n  bearing() {\n    return this.start.bearing(this.end);\n  }\n  /**\n   * Returns the point on the line that lies closest to point `p`.\n   */\n\n\n  closestPoint(p) {\n    return this.pointAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the length of the line up to the point that lies closest to point `p`.\n   */\n\n\n  closestPointLength(p) {\n    return this.closestPointNormalizedLength(p) * this.length();\n  }\n  /**\n   * Returns a line that is tangent to the line at the point that lies closest\n   * to point `p`.\n   */\n\n\n  closestPointTangent(p) {\n    return this.tangentAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the normalized length (distance from the start of the line / total\n   * line length) of the line up to the point that lies closest to point.\n   */\n\n\n  closestPointNormalizedLength(p) {\n    const product = this.vector().dot(new Line(this.start, p).vector());\n    const normalized = Math.min(1, Math.max(0, product / this.squaredLength())); // normalized returns `NaN` if this line has zero length\n\n    if (Number.isNaN(normalized)) {\n      return 0;\n    }\n\n    return normalized;\n  }\n  /**\n   * Returns a point on the line that lies `rate` (normalized length) away from\n   * the beginning of the line.\n   */\n\n\n  pointAt(ratio) {\n    const start = this.start;\n    const end = this.end;\n\n    if (ratio <= 0) {\n      return start.clone();\n    }\n\n    if (ratio >= 1) {\n      return end.clone();\n    }\n\n    return start.lerp(end, ratio);\n  }\n  /**\n   * Returns a point on the line that lies length away from the beginning of\n   * the line.\n   */\n\n\n  pointAtLength(length) {\n    const start = this.start;\n    const end = this.end;\n    let fromStart = true;\n\n    if (length < 0) {\n      fromStart = false; // start calculation from end point\n\n      length = -length; // eslint-disable-line\n    }\n\n    const total = this.length();\n\n    if (length >= total) {\n      return fromStart ? end.clone() : start.clone();\n    }\n\n    const rate = (fromStart ? length : total - length) / total;\n    return this.pointAt(rate);\n  }\n  /**\n   * Divides the line into two lines at the point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n\n\n  divideAt(ratio) {\n    const dividerPoint = this.pointAt(ratio);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Divides the line into two lines at the point that lies length away from\n   * the beginning of the line.\n   */\n\n\n  divideAtLength(length) {\n    const dividerPoint = this.pointAtLength(length);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Returns `true` if the point `p` lies on the line. Return `false` otherwise.\n   */\n\n\n  containsPoint(p) {\n    const start = this.start;\n    const end = this.end; // cross product of 0 indicates that this line and\n    // the vector to `p` are collinear.\n\n    if (start.cross(p, end) !== 0) {\n      return false;\n    }\n\n    const length = this.length();\n\n    if (new Line(start, p).length() > length) {\n      return false;\n    }\n\n    if (new Line(p, end).length() > length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  intersect(shape, options) {\n    const ret = shape.intersectsWithLine(this, options);\n\n    if (ret) {\n      return Array.isArray(ret) ? ret : [ret];\n    }\n\n    return null;\n  }\n  /**\n   * Returns the intersection point of the line with another line. Returns\n   * `null` if no intersection exists.\n   */\n\n\n  intersectsWithLine(line) {\n    const pt1Dir = new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n    const pt2Dir = new Point(line.end.x - line.start.x, line.end.y - line.start.y);\n    const det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x;\n    const deltaPt = new Point(line.start.x - this.start.x, line.start.y - this.start.y);\n    const alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x;\n    const beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x;\n\n    if (det === 0 || alpha * det < 0 || beta * det < 0) {\n      return null;\n    }\n\n    if (det > 0) {\n      if (alpha > det || beta > det) {\n        return null;\n      }\n    } else if (alpha < det || beta < det) {\n      return null;\n    }\n\n    return new Point(this.start.x + alpha * pt1Dir.x / det, this.start.y + alpha * pt1Dir.y / det);\n  }\n  /**\n   * Returns `true` if a tangent line can be found for the line.\n   *\n   * Tangents cannot be found if both of the line endpoints are coincident\n   * (the line appears to be a point).\n   */\n\n\n  isDifferentiable() {\n    return !this.start.equals(this.end);\n  }\n  /**\n   * Returns the perpendicular distance between the line and point. The\n   * distance is positive if the point lies to the right of the line, negative\n   * if the point lies to the left of the line, and `0` if the point lies on\n   * the line.\n   */\n\n\n  pointOffset(p) {\n    const ref = Point.clone(p);\n    const start = this.start;\n    const end = this.end;\n    const determinant = (end.x - start.x) * (ref.y - start.y) - (end.y - start.y) * (ref.x - start.x);\n    return determinant / this.length();\n  }\n\n  pointSquaredDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).squaredDistance(p);\n  }\n\n  pointDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).distance(p);\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n\n\n  tangentAt(ratio) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAt(ratio);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `length` away from\n   * the beginning of the line.\n   */\n\n\n  tangentAtLength(length) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAtLength(length);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n\n  relativeCcw(x, y) {\n    const ref = Point.create(x, y);\n    let dx1 = ref.x - this.start.x;\n    let dy1 = ref.y - this.start.y;\n    const dx2 = this.end.x - this.start.x;\n    const dy2 = this.end.y - this.start.y;\n    let ccw = dx1 * dy2 - dy1 * dx2;\n\n    if (ccw === 0) {\n      ccw = dx1 * dx2 + dy1 * dy2;\n\n      if (ccw > 0.0) {\n        dx1 -= dx2;\n        dy1 -= dy2;\n        ccw = dx1 * dx2 + dy1 * dy2;\n\n        if (ccw < 0.0) {\n          ccw = 0.0;\n        }\n      }\n    }\n\n    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0;\n  }\n  /**\n   * Return `true` if the line equals the other line.\n   */\n\n\n  equals(l) {\n    return l != null && this.start.x === l.start.x && this.start.y === l.start.y && this.end.x === l.end.x && this.end.y === l.end.y;\n  }\n  /**\n   * Returns another line which is a clone of the line.\n   */\n\n\n  clone() {\n    return new Line(this.start, this.end);\n  }\n\n  toJSON() {\n    return {\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n\n  serialize() {\n    return [this.start.serialize(), this.end.serialize()].join(' ');\n  }\n\n}\n\n(function (Line) {\n  Line.toStringTag = `X6.Geometry.${Line.name}`;\n\n  function isLine(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Line) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const line = instance;\n\n    try {\n      if ((tag == null || tag === Line.toStringTag) && Point.isPoint(line.start) && Point.isPoint(line.end) && typeof line.vector === 'function' && typeof line.bearing === 'function' && typeof line.parallel === 'function' && typeof line.intersect === 'function') {\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n\n  Line.isLine = isLine;\n})(Line || (Line = {}));","map":{"version":3,"mappings":"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","names":["Point","Geometry","Rectangle","Line","constructor","x1","y1","x2","y2","start","end","create","Symbol","toStringTag","center","x","y","getCenter","round","precision","translate","tx","ty","rotate","angle","origin","scale","sx","sy","length","Math","sqrt","squaredLength","dx","dy","setLength","total","parallel","distance","line","clone","isDifferentiable","eRef","sRef","move","vector","horizontal","angleBetween","bbox","left","min","top","right","max","bottom","bearing","closestPoint","p","pointAt","closestPointNormalizedLength","closestPointLength","closestPointTangent","tangentAt","product","dot","normalized","Number","isNaN","ratio","lerp","pointAtLength","fromStart","rate","divideAt","dividerPoint","divideAtLength","containsPoint","cross","intersect","shape","options","ret","intersectsWithLine","Array","isArray","pt1Dir","pt2Dir","det","deltaPt","alpha","beta","equals","pointOffset","ref","determinant","pointSquaredDistance","squaredDistance","pointDistance","tangentStart","tangentLine","tangentAtLength","relativeCcw","dx1","dy1","dx2","dy2","ccw","l","toJSON","serialize","join","name","isLine","instance","tag","isPoint","e"],"sourceRoot":"","sources":["../../src/geometry/line.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}