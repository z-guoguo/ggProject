{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPropertyWeight = exports.getAllSortProperties = exports.getAllProperties = exports.default = void 0;\n\nvar _time = require(\"../constants/time\"); // 获取所有属性并排序\n\n\nvar getAllSortProperties = function getAllSortProperties(nodes, n) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n\n  if (n === void 0) {\n    n = 100;\n  }\n\n  var propertyKeyInfo = {};\n  nodes.forEach(function (node) {\n    if (!node.properties) {\n      return;\n    }\n\n    Object.keys(node.properties).forEach(function (propertyKey) {\n      // 目前过滤只保留可以转成数值型的或日期型的, todo: 统一转成one-hot特征向量或者embedding\n      if (propertyKey === 'id' || !\"\".concat(node.properties[propertyKey]).match(_time.secondReg) && !\"\".concat(node.properties[propertyKey]).match(_time.dateReg) && isNaN(Number(node.properties[propertyKey]))) {\n        if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n          delete propertyKeyInfo[propertyKey];\n        }\n\n        return;\n      }\n\n      if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n        propertyKeyInfo[propertyKey] += 1;\n      } else {\n        propertyKeyInfo[propertyKey] = 1;\n      }\n    });\n  }); // 取top50的属性\n\n  var sortKeys = Object.keys(propertyKeyInfo).sort(function (a, b) {\n    return propertyKeyInfo[b] - propertyKeyInfo[a];\n  });\n  return sortKeys.length < n ? sortKeys : sortKeys.slice(0, n);\n};\n\nexports.getAllSortProperties = getAllSortProperties;\n\nvar processProperty = function processProperty(properties, propertyKeys) {\n  return propertyKeys.map(function (key) {\n    if (properties.hasOwnProperty(key)) {\n      // 可以转成数值的直接转成数值\n      if (!isNaN(Number(properties[key]))) {\n        return Number(properties[key]);\n      } // 时间型的转成时间戳\n\n\n      if (properties[key].match(_time.secondReg) || properties[key].match(_time.dateReg)) {\n        // @ts-ignore\n        return Number(Date.parse(new Date(properties[key]))) / 1000;\n      }\n    }\n\n    return 0;\n  });\n}; // 获取属性特征权重\n\n\nvar getPropertyWeight = function getPropertyWeight(nodes) {\n  var propertyKeys = getAllSortProperties(nodes);\n  var allPropertiesWeight = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    allPropertiesWeight[i] = processProperty(nodes[i].properties, propertyKeys);\n  }\n\n  return allPropertiesWeight;\n}; // 获取所有节点的属性集合\n\n\nexports.getPropertyWeight = getPropertyWeight;\n\nvar getAllProperties = function getAllProperties(nodes, key) {\n  if (key === void 0) {\n    key = undefined;\n  }\n\n  var allProperties = [];\n  nodes.forEach(function (node) {\n    if (key === undefined) {\n      allProperties.push(node);\n    }\n\n    if (node[key] !== undefined) {\n      allProperties.push(node[key]);\n    }\n  });\n  return allProperties;\n};\n\nexports.getAllProperties = getAllProperties;\nvar _default = {\n  getAllSortProperties: getAllSortProperties,\n  getPropertyWeight: getPropertyWeight,\n  getAllProperties: getAllProperties\n};\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","getPropertyWeight","getAllSortProperties","getAllProperties","default","_time","require","nodes","n","propertyKeyInfo","forEach","node","properties","keys","propertyKey","concat","match","secondReg","dateReg","isNaN","Number","hasOwnProperty","sortKeys","sort","a","b","length","slice","processProperty","propertyKeys","map","key","Date","parse","allPropertiesWeight","i","undefined","allProperties","push","_default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/lib/utils/node-properties.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPropertyWeight = exports.getAllSortProperties = exports.getAllProperties = exports.default = void 0;\n\nvar _time = require(\"../constants/time\");\n\n// 获取所有属性并排序\nvar getAllSortProperties = function getAllSortProperties(nodes, n) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n\n  if (n === void 0) {\n    n = 100;\n  }\n\n  var propertyKeyInfo = {};\n  nodes.forEach(function (node) {\n    if (!node.properties) {\n      return;\n    }\n\n    Object.keys(node.properties).forEach(function (propertyKey) {\n      // 目前过滤只保留可以转成数值型的或日期型的, todo: 统一转成one-hot特征向量或者embedding\n      if (propertyKey === 'id' || !\"\".concat(node.properties[propertyKey]).match(_time.secondReg) && !\"\".concat(node.properties[propertyKey]).match(_time.dateReg) && isNaN(Number(node.properties[propertyKey]))) {\n        if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n          delete propertyKeyInfo[propertyKey];\n        }\n\n        return;\n      }\n\n      if (propertyKeyInfo.hasOwnProperty(propertyKey)) {\n        propertyKeyInfo[propertyKey] += 1;\n      } else {\n        propertyKeyInfo[propertyKey] = 1;\n      }\n    });\n  }); // 取top50的属性\n\n  var sortKeys = Object.keys(propertyKeyInfo).sort(function (a, b) {\n    return propertyKeyInfo[b] - propertyKeyInfo[a];\n  });\n  return sortKeys.length < n ? sortKeys : sortKeys.slice(0, n);\n};\n\nexports.getAllSortProperties = getAllSortProperties;\n\nvar processProperty = function processProperty(properties, propertyKeys) {\n  return propertyKeys.map(function (key) {\n    if (properties.hasOwnProperty(key)) {\n      // 可以转成数值的直接转成数值\n      if (!isNaN(Number(properties[key]))) {\n        return Number(properties[key]);\n      } // 时间型的转成时间戳\n\n\n      if (properties[key].match(_time.secondReg) || properties[key].match(_time.dateReg)) {\n        // @ts-ignore\n        return Number(Date.parse(new Date(properties[key]))) / 1000;\n      }\n    }\n\n    return 0;\n  });\n}; // 获取属性特征权重\n\n\nvar getPropertyWeight = function getPropertyWeight(nodes) {\n  var propertyKeys = getAllSortProperties(nodes);\n  var allPropertiesWeight = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    allPropertiesWeight[i] = processProperty(nodes[i].properties, propertyKeys);\n  }\n\n  return allPropertiesWeight;\n}; // 获取所有节点的属性集合\n\n\nexports.getPropertyWeight = getPropertyWeight;\n\nvar getAllProperties = function getAllProperties(nodes, key) {\n  if (key === void 0) {\n    key = undefined;\n  }\n\n  var allProperties = [];\n  nodes.forEach(function (node) {\n    if (key === undefined) {\n      allProperties.push(node);\n    }\n\n    if (node[key] !== undefined) {\n      allProperties.push(node[key]);\n    }\n  });\n  return allProperties;\n};\n\nexports.getAllProperties = getAllProperties;\nvar _default = {\n  getAllSortProperties: getAllSortProperties,\n  getPropertyWeight: getPropertyWeight,\n  getAllProperties: getAllProperties\n};\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}