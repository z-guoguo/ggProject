{"ast":null,"code":"\"use strict\";\n/**\n * @fileOverview MDS layout\n * @author shiwu.wyy@antfin.com\n */\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MDSLayout = void 0;\n\nvar ml_matrix_1 = require(\"ml-matrix\");\n\nvar util_1 = require(\"../util\");\n\nvar base_1 = require(\"./base\");\n/**\n * mds 布局\n */\n\n\nvar MDSLayout =\n/** @class */\nfunction (_super) {\n  __extends(MDSLayout, _super);\n\n  function MDSLayout(options) {\n    var _this = _super.call(this) || this;\n    /** 布局中心 */\n\n\n    _this.center = [0, 0];\n    /** 边长度 */\n\n    _this.linkDistance = 50;\n    _this.nodes = [];\n    _this.edges = [];\n    /** 迭代结束的回调函数 */\n\n    _this.onLayoutEnd = function () {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  MDSLayout.prototype.getDefaultCfg = function () {\n    return {\n      center: [0, 0],\n      linkDistance: 50\n    };\n  };\n  /**\n   * 执行布局\n   */\n\n\n  MDSLayout.prototype.execute = function () {\n    var self = this;\n    var nodes = self.nodes,\n        _a = self.edges,\n        edges = _a === void 0 ? [] : _a;\n    var center = self.center;\n\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    var linkDistance = self.linkDistance; // the graph-theoretic distance (shortest path distance) matrix\n\n    var adjMatrix = (0, util_1.getAdjMatrix)({\n      nodes: nodes,\n      edges: edges\n    }, false);\n    var distances = (0, util_1.floydWarshall)(adjMatrix);\n    self.handleInfinity(distances); // scale the ideal edge length acoording to linkDistance\n\n    var scaledD = (0, util_1.scaleMatrix)(distances, linkDistance);\n    self.scaledDistances = scaledD; // get positions by MDS\n\n    var positions = self.runMDS();\n    self.positions = positions;\n    positions.forEach(function (p, i) {\n      nodes[i].x = p[0] + center[0];\n      nodes[i].y = p[1] + center[1];\n    });\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n  /**\n   * mds 算法\n   * @return {array} positions 计算后的节点位置数组\n   */\n\n\n  MDSLayout.prototype.runMDS = function () {\n    var self = this;\n    var dimension = 2;\n    var distances = self.scaledDistances; // square distances\n\n    var M = ml_matrix_1.Matrix.mul(ml_matrix_1.Matrix.pow(distances, 2), -0.5); // double centre the rows/columns\n\n    var rowMeans = M.mean(\"row\");\n    var colMeans = M.mean(\"column\");\n    var totalMean = M.mean();\n    M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans); // take the SVD of the double centred matrix, and return the\n    // points from it\n\n    var ret = new ml_matrix_1.SingularValueDecomposition(M);\n    var eigenValues = ml_matrix_1.Matrix.sqrt(ret.diagonalMatrix).diagonal();\n    return ret.leftSingularVectors.toJSON().map(function (row) {\n      return ml_matrix_1.Matrix.mul([row], [eigenValues]).toJSON()[0].splice(0, dimension);\n    });\n  };\n\n  MDSLayout.prototype.handleInfinity = function (distances) {\n    var maxDistance = -999999;\n    distances.forEach(function (row) {\n      row.forEach(function (value) {\n        if (value === Infinity) {\n          return;\n        }\n\n        if (maxDistance < value) {\n          maxDistance = value;\n        }\n      });\n    });\n    distances.forEach(function (row, i) {\n      row.forEach(function (value, j) {\n        if (value === Infinity) {\n          distances[i][j] = maxDistance;\n        }\n      });\n    });\n  };\n\n  MDSLayout.prototype.getType = function () {\n    return \"mds\";\n  };\n\n  return MDSLayout;\n}(base_1.Base);\n\nexports.MDSLayout = MDSLayout;","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","updateCfg","MDSLayout","center","linkDistance","self","_a","edges","nodes","length","onLayoutEnd","x","y","adjMatrix","distances","handleInfinity","scaledD","scaledDistances","positions","runMDS","forEach","p","i","dimension","M","ml_matrix_1","mul","pow","rowMeans","mean","colMeans","totalMean","add","subRowVector","subColumnVector","ret","eigenValues","sqrt","diagonalMatrix","diagonal","leftSingularVectors","toJSON","map","row","splice","maxDistance","value","Infinity","j","base_1","exports"],"sourceRoot":"","sources":["../../src/layout/mds.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}