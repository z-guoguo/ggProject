{"ast":null,"code":"import { NumberExt } from '../../../util';\nimport { Point, Angle } from '../../../geometry';\nimport { orth } from '../orth';\nexport const defaults = {\n  step: 10,\n  maxLoopCount: 2000,\n  precision: 1,\n  maxDirectionChange: 90,\n  perpendicular: true,\n  excludeTerminals: [],\n  excludeShapes: [],\n  excludeNodes: [],\n  excludeHiddenNodes: false,\n  startDirections: ['top', 'right', 'bottom', 'left'],\n  endDirections: ['top', 'right', 'bottom', 'left'],\n  directionMap: {\n    top: {\n      x: 0,\n      y: -1\n    },\n    right: {\n      x: 1,\n      y: 0\n    },\n    bottom: {\n      x: 0,\n      y: 1\n    },\n    left: {\n      x: -1,\n      y: 0\n    }\n  },\n\n  cost() {\n    const step = resolve(this.step, this);\n    return step;\n  },\n\n  directions() {\n    const step = resolve(this.step, this);\n    const cost = resolve(this.cost, this);\n    return [{\n      cost,\n      offsetX: step,\n      offsetY: 0\n    }, {\n      cost,\n      offsetX: -step,\n      offsetY: 0\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: step\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: -step\n    }];\n  },\n\n  penalties() {\n    const step = resolve(this.step, this);\n    return {\n      0: 0,\n      45: step / 2,\n      90: step / 2\n    };\n  },\n\n  paddingBox() {\n    const step = resolve(this.step, this);\n    return {\n      x: -step,\n      y: -step,\n      width: 2 * step,\n      height: 2 * step\n    };\n  },\n\n  fallbackRouter: orth,\n  draggingRouter: null\n};\nexport function resolve(input, options) {\n  if (typeof input === 'function') {\n    return input.call(options);\n  }\n\n  return input;\n}\nexport function resolveOptions(options) {\n  const result = Object.keys(options).reduce((memo, key) => {\n    const ret = memo;\n\n    if (key === 'fallbackRouter' || key === 'draggingRouter' || key === 'fallbackRoute') {\n      ret[key] = options[key];\n    } else {\n      ret[key] = resolve(options[key], options);\n    }\n\n    return memo;\n  }, {});\n\n  if (result.padding) {\n    const sides = NumberExt.normalizeSides(result.padding);\n    result.paddingBox = {\n      x: -sides.left,\n      y: -sides.top,\n      width: sides.left + sides.right,\n      height: sides.top + sides.bottom\n    };\n  }\n\n  result.directions.forEach(direction => {\n    const point1 = new Point(0, 0);\n    const point2 = new Point(direction.offsetX, direction.offsetY);\n    direction.angle = Angle.normalize(point1.theta(point2));\n  });\n  return result;\n}","map":{"version":3,"mappings":"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","names":["NumberExt","Point","Angle","orth","defaults","step","maxLoopCount","precision","maxDirectionChange","perpendicular","excludeTerminals","excludeShapes","excludeNodes","excludeHiddenNodes","startDirections","endDirections","directionMap","top","x","y","right","bottom","left","cost","resolve","directions","offsetX","offsetY","penalties","paddingBox","width","height","fallbackRouter","draggingRouter","input","options","call","resolveOptions","result","Object","keys","reduce","memo","key","ret","padding","sides","normalizeSides","forEach","direction","point1","point2","angle","normalize","theta"],"sourceRoot":"","sources":["../../../../src/registry/router/manhattan/options.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}