{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = \"\".concat(this.type, \"-keyShape\");\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');","map":{"version":3,"names":["__assign","deepMix","Global","Shape","registerNode","options","size","defaultNode","style","x","y","stroke","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","stateStyles","nodeStateStyles","shapeType","labelPosition","shapeMap","drawShape","cfg","group","getShapeStyle","name","concat","type","keyShape","addShape","attrs","className","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","r","styles","update","item","updateType","get","attr","updateShape"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-core/es/element/nodes/simple-circle.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 带有图标的圆，可用于拓扑图中\n\nShape.registerNode('simple-circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-circle',\n  // 文本位置\n  labelPosition: 'center',\n  shapeMap: {},\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var name = \"\".concat(this.type, \"-keyShape\");\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      r: size[0] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    this.updateShape(cfg, item, style, true, updateType);\n  }\n}, 'single-node');"],"mappings":"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"},"metadata":{},"sourceType":"module"}