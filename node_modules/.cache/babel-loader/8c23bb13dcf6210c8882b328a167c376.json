{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graph_1 = require(\"../../graph\");\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\n\n\nvar buildLayerGraph = function (g, rank, relationship) {\n  var root = createRootNode(g);\n  var result = new graph_1.Graph({\n    compound: true\n  }).setGraph({\n    root: root\n  }).setDefaultNodeLabel(function (v) {\n    return g.node(v);\n  });\n  g.nodes().forEach(function (v) {\n    var _a;\n\n    var node = g.node(v);\n    var parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root); // This assumes we have only short edges!\n\n      (_a = g[relationship](v)) === null || _a === void 0 ? void 0 : _a.forEach(function (e) {\n        var u = e.v === v ? e.w : e.v;\n        var edge = result.edgeFromArgs(u, v);\n        var weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        });\n      });\n\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n  return result;\n};\n\nvar createRootNode = function (g) {\n  var v;\n\n  while (g.hasNode(v = \"_root\".concat(Math.random())));\n\n  return v;\n};\n\nexports.default = buildLayerGraph;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMA,eAAe,GAAG,UACtBC,CADsB,EAEtBC,IAFsB,EAGtBC,YAHsB,EAGc;EAEpC,IAAMC,IAAI,GAAGC,cAAc,CAACJ,CAAD,CAA3B;EACA,IAAMK,MAAM,GAAG,IAAIC,aAAJ,CAAU;IAAEC,QAAQ,EAAE;EAAZ,CAAV,EACZC,QADY,CACH;IAAEL,IAAI;EAAN,CADG,EAEZM,mBAFY,CAEQ,UAACC,CAAD,EAAU;IAC7B,OAAOV,CAAC,CAACW,IAAF,CAAOD,CAAP,CAAP;EACD,CAJY,CAAf;EAMAV,CAAC,CAACY,KAAF,GAAUC,OAAV,CAAkB,UAACH,CAAD,EAAE;;;IAClB,IAAMC,IAAI,GAAGX,CAAC,CAACW,IAAF,CAAOD,CAAP,CAAb;IACA,IAAMI,MAAM,GAAGd,CAAC,CAACc,MAAF,CAASJ,CAAT,CAAf;;IAEA,IACEC,IAAI,CAACV,IAAL,KAAcA,IAAd,IACEU,IAAI,CAACI,OAAL,IAA2Bd,IAA3B,IAAmCA,IAAI,IAAKU,IAAI,CAACK,OAFrD,EAGE;MACAX,MAAM,CAACY,OAAP,CAAeP,CAAf;MACAL,MAAM,CAACa,SAAP,CAAiBR,CAAjB,EAAoBI,MAAM,IAAIX,IAA9B,EAFA,CAIA;;MACA,OAAC,CAACD,YAAD,CAAD,CAAgBQ,CAAhB,OAAkB,IAAlB,IAAkBS,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEN,OAAF,CAAU,UAACO,CAAD,EAAE;QAC5B,IAAMC,CAAC,GAAGD,CAAC,CAACV,CAAF,KAAQA,CAAR,GAAYU,CAAC,CAACE,CAAd,GAAkBF,CAAC,CAACV,CAA9B;QACA,IAAMa,IAAI,GAAGlB,MAAM,CAACmB,YAAP,CAAoBH,CAApB,EAAuBX,CAAvB,CAAb;QACA,IAAMe,MAAM,GAAGF,IAAI,KAAKG,SAAT,GAAqBH,IAAI,CAACE,MAA1B,GAAmC,CAAlD;QACApB,MAAM,CAACsB,OAAP,CAAeN,CAAf,EAAkBX,CAAlB,EAAqB;UAAEe,MAAM,EAAEzB,CAAC,CAACuB,IAAF,CAAOH,CAAP,EAAWK,MAAX,GAAqBA;QAA/B,CAArB;MACD,CALiB,CAAlB;;MAOA,IAAId,IAAI,CAACiB,cAAL,CAAoB,SAApB,CAAJ,EAAoC;QAClCvB,MAAM,CAACY,OAAP,CAAeP,CAAf,EAAkB;UAChBmB,UAAU,EAAElB,IAAI,CAACkB,UAAL,CAAgB5B,IAAhB,CADI;UAEhB6B,WAAW,EAAEnB,IAAI,CAACmB,WAAL,CAAiB7B,IAAjB;QAFG,CAAlB;MAID;IACF;EACF,CA1BD;EA4BA,OAAOI,MAAP;AACD,CAzCD;;AA2CA,IAAMD,cAAc,GAAG,UAACJ,CAAD,EAAS;EAC9B,IAAIU,CAAJ;;EACA,OAAOV,CAAC,CAAC+B,OAAF,CAAWrB,CAAC,GAAG,eAAQsB,IAAI,CAACC,MAAL,EAAR,CAAf,CAAP,CAAgD;;EAChD,OAAOvB,CAAP;AACD,CAJD;;AAMAwB,kBAAenC,eAAf","names":["buildLayerGraph","g","rank","relationship","root","createRootNode","result","graph_1","compound","setGraph","setDefaultNodeLabel","v","node","nodes","forEach","parent","minRank","maxRank","setNode","setParent","_a","e","u","w","edge","edgeFromArgs","weight","undefined","setEdge","hasOwnProperty","borderLeft","borderRight","hasNode","Math","random","exports"],"sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/build-layer-graph.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}