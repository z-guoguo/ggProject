{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"./util\");\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\n\n\nvar run = function (g) {\n  var _a;\n\n  var root = (0, util_1.addDummyNode)(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g);\n  var maxDepth = Math.max.apply(Math, Object.values(depths));\n\n  if (Math.abs(maxDepth) === Infinity) {\n    maxDepth = 1;\n  }\n\n  var height = maxDepth - 1; // Note: depths is an Object not an array\n\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root; // Multiply minlen by nodeSep to align nodes on non-border ranks.\n\n  g.edges().forEach(function (e) {\n    g.edge(e).minlen *= nodeSep;\n  }); // Calculate a weight that is sufficient to keep subgraphs vertically compact\n\n  var weight = sumWeights(g) + 1; // Create border nodes and link them up\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  }); // Save the multiplier for node layers for later removal of empty border\n  // layers.\n\n  g.graph().nodeRankFactor = nodeSep;\n};\n\nvar dfs = function (g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n\n  if (!(children === null || children === void 0 ? void 0 : children.length)) {\n    if (v !== root) {\n      g.setEdge(root, v, {\n        weight: 0,\n        minlen: nodeSep\n      });\n    }\n\n    return;\n  }\n\n  var top = (0, util_1.addBorderNode)(g, \"_bt\");\n  var bottom = (0, util_1.addBorderNode)(g, \"_bb\");\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n  children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      minlen: minlen,\n      weight: thisWeight,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, {\n      weight: 0,\n      minlen: height + depths[v]\n    });\n  }\n};\n\nvar treeDepths = function (g) {\n  var _a;\n\n  var depths = {};\n\n  var dfs = function (v, depth) {\n    var children = g.children(v);\n    children === null || children === void 0 ? void 0 : children.forEach(function (child) {\n      return dfs(child, depth + 1);\n    });\n    depths[v] = depth;\n  };\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(function (v) {\n    return dfs(v, 1);\n  });\n  return depths;\n};\n\nvar sumWeights = function (g) {\n  var result = 0;\n  g.edges().forEach(function (e) {\n    result += g.edge(e).weight;\n  });\n  return result;\n};\n\nvar cleanup = function (g) {\n  var graphLabel = g.graph();\n  graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  g.edges().forEach(function (e) {\n    var edge = g.edge(e);\n\n    if (edge.nestingEdge) {\n      g.removeEdgeObj(e);\n    }\n  });\n};\n\nexports.default = {\n  run: run,\n  cleanup: cleanup\n};","map":{"version":3,"mappings":";;;;;;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAMA,GAAG,GAAG,UAACC,CAAD,EAAS;;;EACnB,IAAMC,IAAI,GAAG,yBAAaD,CAAb,EAAgB,MAAhB,EAAwB,EAAxB,EAA4B,OAA5B,CAAb;EACA,IAAME,MAAM,GAAGC,UAAU,CAACH,CAAD,CAAzB;EACA,IAAII,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAQC,KAAR,OAAYC,MAAM,CAACC,MAAP,CAAcP,MAAd,CAAZ,CAAf;;EAEA,IAAIG,IAAI,CAACK,GAAL,CAASN,QAAT,MAAuBO,QAA3B,EAAqC;IACnCP,QAAQ,GAAG,CAAX;EACD;;EAED,IAAMQ,MAAM,GAAGR,QAAQ,GAAG,CAA1B,CATmB,CASU;;EAC7B,IAAMS,OAAO,GAAG,IAAID,MAAJ,GAAa,CAA7B;EAEAZ,CAAC,CAACc,KAAF,GAAUC,WAAV,GAAwBd,IAAxB,CAZmB,CAcnB;;EACAD,CAAC,CAACgB,KAAF,GAAUC,OAAV,CAAkB,UAACC,CAAD,EAAE;IAClBlB,CAAC,CAACmB,IAAF,CAAOD,CAAP,EAAWE,MAAX,IAAsBP,OAAtB;EACD,CAFD,EAfmB,CAmBnB;;EACA,IAAMQ,MAAM,GAAGC,UAAU,CAACtB,CAAD,CAAV,GAAgB,CAA/B,CApBmB,CAsBnB;;EACA,OAAC,CAACuB,QAAF,QAAY,IAAZ,IAAYC,aAAZ,GAAY,MAAZ,GAAYA,GAAEP,OAAF,CAAU,UAACQ,KAAD,EAAM;IAC1BC,GAAG,CAAC1B,CAAD,EAAIC,IAAJ,EAAUY,OAAV,EAAmBQ,MAAnB,EAA2BT,MAA3B,EAAmCV,MAAnC,EAA2CuB,KAA3C,CAAH;EACD,CAFW,CAAZ,CAvBmB,CA2BnB;EACA;;EACAzB,CAAC,CAACc,KAAF,GAAUa,cAAV,GAA2Bd,OAA3B;AACD,CA9BD;;AAgCA,IAAMa,GAAG,GAAG,UACV1B,CADU,EAEVC,IAFU,EAGVY,OAHU,EAIVQ,MAJU,EAKVT,MALU,EAMVV,MANU,EAOV0B,CAPU,EAOD;EAET,IAAML,QAAQ,GAAGvB,CAAC,CAACuB,QAAF,CAAWK,CAAX,CAAjB;;EACA,IAAI,EAACL,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEM,MAAX,CAAJ,EAAuB;IACrB,IAAID,CAAC,KAAK3B,IAAV,EAAgB;MACdD,CAAC,CAAC8B,OAAF,CAAU7B,IAAV,EAAgB2B,CAAhB,EAAmB;QAAEP,MAAM,EAAE,CAAV;QAAaD,MAAM,EAAEP;MAArB,CAAnB;IACD;;IACD;EACD;;EAED,IAAMkB,GAAG,GAAG,0BAAc/B,CAAd,EAAiB,KAAjB,CAAZ;EACA,IAAMgC,MAAM,GAAG,0BAAchC,CAAd,EAAiB,KAAjB,CAAf;EACA,IAAMiC,KAAK,GAAGjC,CAAC,CAACkC,IAAF,CAAON,CAAP,CAAd;EAEA5B,CAAC,CAACmC,SAAF,CAAYJ,GAAZ,EAAiBH,CAAjB;EACAK,KAAK,CAACG,SAAN,GAAkBL,GAAlB;EACA/B,CAAC,CAACmC,SAAF,CAAYH,MAAZ,EAAoBJ,CAApB;EACAK,KAAK,CAACI,YAAN,GAAqBL,MAArB;EAEAT,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEN,OAAV,CAAkB,UAACQ,KAAD,EAAM;IACtBC,GAAG,CAAC1B,CAAD,EAAIC,IAAJ,EAAUY,OAAV,EAAmBQ,MAAnB,EAA2BT,MAA3B,EAAmCV,MAAnC,EAA2CuB,KAA3C,CAAH;IAEA,IAAMa,SAAS,GAAGtC,CAAC,CAACkC,IAAF,CAAOT,KAAP,CAAlB;IACA,IAAMc,QAAQ,GAAGD,SAAS,CAACF,SAAV,GAAsBE,SAAS,CAACF,SAAhC,GAA4CX,KAA7D;IACA,IAAMe,WAAW,GAAGF,SAAS,CAACD,YAAV,GAAyBC,SAAS,CAACD,YAAnC,GAAkDZ,KAAtE;IACA,IAAMgB,UAAU,GAAGH,SAAS,CAACF,SAAV,GAAsBf,MAAtB,GAA+B,IAAIA,MAAtD;IACA,IAAMD,MAAM,GAAGmB,QAAQ,KAAKC,WAAb,GAA2B,CAA3B,GAA+B5B,MAAM,GAAGV,MAAM,CAAC0B,CAAD,CAAf,GAAqB,CAAnE;IAEA5B,CAAC,CAAC8B,OAAF,CAAUC,GAAV,EAAeQ,QAAf,EAAyB;MACvBnB,MAAM,QADiB;MAEvBC,MAAM,EAAEoB,UAFe;MAGvBC,WAAW,EAAE;IAHU,CAAzB;IAMA1C,CAAC,CAAC8B,OAAF,CAAUU,WAAV,EAAuBR,MAAvB,EAA+B;MAC7BZ,MAAM,QADuB;MAE7BC,MAAM,EAAEoB,UAFqB;MAG7BC,WAAW,EAAE;IAHgB,CAA/B;EAKD,CApBD;;EAsBA,IAAI,CAAC1C,CAAC,CAAC2C,MAAF,CAASf,CAAT,CAAL,EAAkB;IAChB5B,CAAC,CAAC8B,OAAF,CAAU7B,IAAV,EAAgB8B,GAAhB,EAAqB;MAAEV,MAAM,EAAE,CAAV;MAAaD,MAAM,EAAER,MAAM,GAAGV,MAAM,CAAC0B,CAAD;IAApC,CAArB;EACD;AACF,CAnDD;;AAqDA,IAAMzB,UAAU,GAAG,UAACH,CAAD,EAAS;;;EAC1B,IAAME,MAAM,GAA2B,EAAvC;;EACA,IAAMwB,GAAG,GAAG,UAACE,CAAD,EAAYgB,KAAZ,EAAyB;IACnC,IAAMrB,QAAQ,GAAGvB,CAAC,CAACuB,QAAF,CAAWK,CAAX,CAAjB;IACAL,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEN,OAAV,CAAkB,UAACQ,KAAD,EAAM;MAAK,UAAG,CAACA,KAAD,EAAQmB,KAAK,GAAG,CAAhB,CAAH;IAAqB,CAAlD;IACA1C,MAAM,CAAC0B,CAAD,CAAN,GAAYgB,KAAZ;EACD,CAJD;;EAKA,OAAC,CAACrB,QAAF,QAAY,IAAZ,IAAYC,aAAZ,GAAY,MAAZ,GAAYA,GAAEP,OAAF,CAAU,UAACW,CAAD,EAAE;IAAK,UAAG,CAACA,CAAD,EAAI,CAAJ,CAAH;EAAS,CAA1B,CAAZ;EACA,OAAO1B,MAAP;AACD,CATD;;AAWA,IAAMoB,UAAU,GAAG,UAACtB,CAAD,EAAS;EAC1B,IAAI6C,MAAM,GAAG,CAAb;EACA7C,CAAC,CAACgB,KAAF,GAAUC,OAAV,CAAkB,UAACC,CAAD,EAAE;IAClB2B,MAAM,IAAI7C,CAAC,CAACmB,IAAF,CAAOD,CAAP,EAAWG,MAArB;EACD,CAFD;EAGA,OAAOwB,MAAP;AACD,CAND;;AAQA,IAAMC,OAAO,GAAG,UAAC9C,CAAD,EAAS;EACvB,IAAM+C,UAAU,GAAG/C,CAAC,CAACc,KAAF,EAAnB;EACAiC,UAAU,CAAChC,WAAX,IAA0Bf,CAAC,CAACgD,UAAF,CAAaD,UAAU,CAAChC,WAAxB,CAA1B;EACA,OAAOgC,UAAU,CAAChC,WAAlB;EACAf,CAAC,CAACgB,KAAF,GAAUC,OAAV,CAAkB,UAACC,CAAD,EAAO;IACvB,IAAMC,IAAI,GAAGnB,CAAC,CAACmB,IAAF,CAAOD,CAAP,CAAb;;IACA,IAAIC,IAAI,CAACuB,WAAT,EAAsB;MACpB1C,CAAC,CAACiD,aAAF,CAAgB/B,CAAhB;IACD;EACF,CALD;AAMD,CAVD;;AAYAgC,kBAAe;EAAEnD,GAAG,KAAL;EAAO+C,OAAO;AAAd,CAAf","names":["run","g","root","depths","treeDepths","maxDepth","Math","max","apply","Object","values","abs","Infinity","height","nodeSep","graph","nestingRoot","edges","forEach","e","edge","minlen","weight","sumWeights","children","_a","child","dfs","nodeRankFactor","v","length","setEdge","top","bottom","label","node","setParent","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","parent","depth","result","cleanup","graphLabel","removeNode","removeEdgeObj","exports"],"sourceRoot":"","sources":["../../../../src/layout/dagre/src/nesting-graph.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}