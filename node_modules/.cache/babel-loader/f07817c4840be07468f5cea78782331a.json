{"ast":null,"code":"import { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.formatModes();\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n\n    var behaviorSet = [];\n\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_1 = behaviorSet.length;\n\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_2 = behaviorSet.length;\n\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;","map":{"version":3,"names":["each","isArray","isString","Behavior","ModeController","graph","destroyed","modes","get","default","formatModes","mode","currentBehaves","setMode","prototype","behavior","i","type","setBehaviors","behaviors","behaves","behave","BehaviorInstance","getBehavior","bind","push","mergeBehaviors","modeBehaviors","indexOf","filterBehaviors","result","forEach","_a","current","emit","delegate","remove","unbind","getMode","manipulateBehaviors","isAdd","_this","currentMode","updateBehavior","newCfg","behaviorSet","length","console","warn","length_1","updateCfg","length_2","Object","assign","destroy"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-core/es/graph/controller/mode.js"],"sourcesContent":["import { each, isArray, isString } from '@antv/util';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type || behavior);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      if (behave.delegate) behave.delegate.remove();\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.formatModes();\n    this.setMode(this.mode);\n    return this;\n  };\n  /**\n   * 更新行为参数\n   * @param {string | ModeOption | ModeType} behavior 需要更新的行为\n   * @param {string | string[]} modes 指定的模式中的行为，不指定则为 default\n   * @return {Graph} Graph\n   */\n\n\n  ModeController.prototype.updateBehavior = function (behavior, newCfg, mode) {\n    if (isString(behavior)) {\n      behavior = {\n        type: behavior\n      };\n    }\n\n    var behaviorSet = [];\n\n    if (!mode || mode === this.mode || mode === 'default') {\n      behaviorSet = this.currentBehaves;\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_1 = behaviorSet.length;\n\n      for (var i = 0; i < length_1; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type) {\n          behave.updateCfg(newCfg);\n          return this;\n        }\n\n        if (i === length_1 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    } else {\n      behaviorSet = this.modes[mode];\n\n      if (!behaviorSet || !behaviorSet.length) {\n        console.warn('Update behavior failed! There is no behaviors in this mode on the graph.');\n        return this;\n      }\n\n      var length_2 = behaviorSet.length;\n\n      for (var i = 0; i < length_2; i++) {\n        var behave = behaviorSet[i];\n\n        if (behave.type === behavior.type || behave === behavior.type) {\n          if (behave === behavior.type) behave = {\n            type: behave\n          };\n          Object.assign(behave, newCfg);\n          behaviorSet[i] = behave;\n          return this;\n        }\n\n        if (i === length_2 - 1) console.warn('Update behavior failed! There is no such behavior in the mode');\n      }\n    }\n\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;"],"mappings":"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"},"metadata":{},"sourceType":"module"}