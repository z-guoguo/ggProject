{"ast":null,"code":"export function getUniformLengthByType(type) {\n  var arrayLength = 0;\n\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n\n    case 'mat3':\n      arrayLength = 9;\n      break;\n\n    case 'mat4':\n      arrayLength = 16;\n      break;\n\n    default:\n  }\n\n  return arrayLength;\n}\nvar uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(content) {\n  var uniforms = {};\n  content = content.replace(uniformRegExp, function (_, type, c) {\n    var defaultValues = c.split(':');\n    var uniformName = defaultValues[0].trim();\n    var defaultValue = '';\n\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    } // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n\n\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue.replace('[', '').replace(']', '').split(',').reduce(function (prev, cur) {\n            prev.push(Number(cur.trim()));\n            return prev;\n          }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n\n        break;\n\n      default:\n    } // @ts-ignore\n\n\n    uniforms[uniformName] = defaultValue;\n    return \"uniform \".concat(type, \" \").concat(uniformName, \";\\n\");\n  });\n  return {\n    content: content,\n    uniforms: uniforms\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,IAAhC,EAAsD;EAC3D,IAAIC,WAAW,GAAG,CAAlB;;EACA,QAAQD,IAAR;IACE,KAAK,MAAL;IACA,KAAK,OAAL;MACEC,WAAW,GAAG,CAAdA;MACA;;IACF,KAAK,MAAL;IACA,KAAK,OAAL;MACEA,WAAW,GAAG,CAAdA;MACA;;IACF,KAAK,MAAL;IACA,KAAK,OAAL;IACA,KAAK,MAAL;MACEA,WAAW,GAAG,CAAdA;MACA;;IACF,KAAK,MAAL;MACEA,WAAW,GAAG,CAAdA;MACA;;IACF,KAAK,MAAL;MACEA,WAAW,GAAG,EAAdA;MACA;;IACF;EApBF;;EAsBA,OAAOA,WAAP;AACD;AAED,IAAMC,aAAa,GAAG,iHAAtB;AACA,OAAO,SAASC,eAAT,CACLC,OADK,EAOL;EACA,IAAMC,QAAQ,GAAG,EAAjB;EACAD,OAAO,GAAGA,OAAO,CAACE,OAARF,CAAgBF,aAAhBE,EAA+B,UAACG,CAAD,EAAIP,IAAJ,EAAUQ,CAAV,EAAgB;IACvD,IAAMC,aAAa,GAAGD,CAAC,CAACE,KAAFF,CAAQ,GAARA,CAAtB;IACA,IAAMG,WAAW,GAAGF,aAAa,CAAC,CAAD,CAAbA,CAAiBG,IAAjBH,EAApB;IACA,IAAII,YAAiB,GAAG,EAAxB;;IACA,IAAIJ,aAAa,CAACK,MAAdL,GAAuB,CAA3B,EAA8B;MAC5BI,YAAY,GAAGJ,aAAa,CAAC,CAAD,CAAbA,CAAiBG,IAAjBH,EAAfI;IALqD,EAQvD;IACA;;;IACA,QAAQb,IAAR;MACE,KAAK,MAAL;QACEa,YAAY,GAAGA,YAAY,KAAK,MAAhCA;QACA;;MACF,KAAK,OAAL;MACA,KAAK,KAAL;QACEA,YAAY,GAAGE,MAAM,CAACF,YAAD,CAArBA;QACA;;MACF,KAAK,MAAL;MACA,KAAK,MAAL;MACA,KAAK,MAAL;MACA,KAAK,OAAL;MACA,KAAK,OAAL;MACA,KAAK,OAAL;MACA,KAAK,MAAL;MACA,KAAK,MAAL;MACA,KAAK,MAAL;QACE,IAAIA,YAAJ,EAAkB;UAChBA,YAAY,GAAGA,YAAY,CACxBP,OADYO,CACJ,GADIA,EACC,EADDA,EAEZP,OAFYO,CAEJ,GAFIA,EAEC,EAFDA,EAGZH,KAHYG,CAGN,GAHMA,EAIZG,MAJYH,CAIL,UAACI,IAAD,EAAiBC,GAAjB,EAAiC;YACvCD,IAAI,CAACE,IAALF,CAAUF,MAAM,CAACG,GAAG,CAACN,IAAJM,EAAD,CAAhBD;YACA,OAAOA,IAAP;UANW,GAOV,EAPUJ,CAAfA;QADF,OASO;UACLA,YAAY,GAAG,IAAIO,KAAJ,CAAUrB,sBAAsB,CAACC,IAAD,CAAhC,EAAwCqB,IAAxC,CAA6C,CAA7C,CAAfR;QACD;;QACD;;MACF;IA9BF,CAVuD,CA2CvD;;;IACAR,QAAQ,CAACM,WAAD,CAARN,GAAwBQ,YAAxBR;IACA,yBAAkBL,IAAlB,cAA0BW,WAA1B;EA7CQ,EAAVP;EA+CA,OAAO;IACLA,OAAO,EAAPA,OADK;IAELC,QAAQ,EAARA;EAFK,CAAP;AAID","names":["getUniformLengthByType","type","arrayLength","uniformRegExp","extractUniforms","content","uniforms","replace","_","c","defaultValues","split","uniformName","trim","defaultValue","length","Number","reduce","prev","cur","push","Array","fill"],"sources":["../../src/utils/shader-module.ts"],"sourcesContent":["export function getUniformLengthByType(type: string): number {\n  let arrayLength = 0;\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n    case 'mat3':\n      arrayLength = 9;\n      break;\n    case 'mat4':\n      arrayLength = 16;\n      break;\n    default:\n  }\n  return arrayLength;\n}\n\nconst uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(\n  content: string,\n): {\n  content: string;\n  uniforms: {\n    [key: string]: any;\n  };\n} {\n  const uniforms = {};\n  content = content.replace(uniformRegExp, (_, type, c) => {\n    const defaultValues = c.split(':');\n    const uniformName = defaultValues[0].trim();\n    let defaultValue: any = '';\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    }\n\n    // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue\n            .replace('[', '')\n            .replace(']', '')\n            .split(',')\n            .reduce((prev: number[], cur: string) => {\n              prev.push(Number(cur.trim()));\n              return prev;\n            }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n        break;\n      default:\n    }\n\n    // @ts-ignore\n    uniforms[uniformName] = defaultValue;\n    return `uniform ${type} ${uniformName};\\n`;\n  });\n  return {\n    content,\n    uniforms,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}