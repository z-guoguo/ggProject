{"ast":null,"code":"import \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport { ArrayExt } from '../util';\nimport { Basecoat } from '../common';\nexport class Collection extends Basecoat {\n  constructor(cells, options = {}) {\n    super();\n    this.length = 0;\n    this.comparator = options.comparator || 'zIndex';\n    this.clean();\n\n    if (cells) {\n      this.reset(cells, {\n        silent: true\n      });\n    }\n  }\n\n  toJSON() {\n    return this.cells.map(cell => cell.toJSON());\n  }\n\n  add(cells, index, options) {\n    let localIndex;\n    let localOptions;\n\n    if (typeof index === 'number') {\n      localIndex = index;\n      localOptions = Object.assign({\n        merge: false\n      }, options);\n    } else {\n      localIndex = this.length;\n      localOptions = Object.assign({\n        merge: false\n      }, index);\n    }\n\n    if (localIndex > this.length) {\n      localIndex = this.length;\n    }\n\n    if (localIndex < 0) {\n      localIndex += this.length + 1;\n    }\n\n    const entities = Array.isArray(cells) ? cells : [cells];\n    const sortable = this.comparator && typeof index !== 'number' && localOptions.sort !== false;\n    const sortAttr = this.comparator || null;\n    let sort = false;\n    const added = [];\n    const merged = [];\n    entities.forEach(cell => {\n      const existing = this.get(cell);\n\n      if (existing) {\n        if (localOptions.merge && !cell.isSameStore(existing)) {\n          existing.setProp(cell.getProp(), options); // merge\n\n          merged.push(existing);\n\n          if (sortable && !sort) {\n            if (sortAttr == null || typeof sortAttr === 'function') {\n              sort = existing.hasChanged();\n            } else if (typeof sortAttr === 'string') {\n              sort = existing.hasChanged(sortAttr);\n            } else {\n              sort = sortAttr.some(key => existing.hasChanged(key));\n            }\n          }\n        }\n      } else {\n        added.push(cell);\n        this.reference(cell);\n      }\n    });\n\n    if (added.length) {\n      if (sortable) {\n        sort = true;\n      }\n\n      this.cells.splice(localIndex, 0, ...added);\n      this.length = this.cells.length;\n    }\n\n    if (sort) {\n      this.sort({\n        silent: true\n      });\n    }\n\n    if (!localOptions.silent) {\n      added.forEach((cell, i) => {\n        const args = {\n          cell,\n          index: localIndex + i,\n          options: localOptions\n        };\n        this.trigger('added', args);\n\n        if (!localOptions.dryrun) {\n          cell.notify('added', Object.assign({}, args));\n        }\n      });\n\n      if (sort) {\n        this.trigger('sorted');\n      }\n\n      if (added.length || merged.length) {\n        this.trigger('updated', {\n          added,\n          merged,\n          removed: [],\n          options: localOptions\n        });\n      }\n    }\n\n    return this;\n  }\n\n  remove(cells, options = {}) {\n    const arr = Array.isArray(cells) ? cells : [cells];\n    const removed = this.removeCells(arr, options);\n\n    if (!options.silent && removed.length > 0) {\n      this.trigger('updated', {\n        options,\n        removed,\n        added: [],\n        merged: []\n      });\n    }\n\n    return Array.isArray(cells) ? removed : removed[0];\n  }\n\n  removeCells(cells, options) {\n    const removed = [];\n\n    for (let i = 0; i < cells.length; i += 1) {\n      const cell = this.get(cells[i]);\n\n      if (cell == null) {\n        continue;\n      }\n\n      const index = this.cells.indexOf(cell);\n      this.cells.splice(index, 1);\n      this.length -= 1;\n      delete this.map[cell.id];\n      removed.push(cell);\n      this.unreference(cell);\n\n      if (!options.dryrun) {\n        cell.remove();\n      }\n\n      if (!options.silent) {\n        this.trigger('removed', {\n          cell,\n          index,\n          options\n        });\n\n        if (!options.dryrun) {\n          cell.notify('removed', {\n            cell,\n            index,\n            options\n          });\n        }\n      }\n    }\n\n    return removed;\n  }\n\n  reset(cells, options = {}) {\n    const previous = this.cells.slice();\n    previous.forEach(cell => this.unreference(cell));\n    this.clean();\n    this.add(cells, Object.assign({\n      silent: true\n    }, options));\n\n    if (!options.silent) {\n      const current = this.cells.slice();\n      this.trigger('reseted', {\n        options,\n        previous,\n        current\n      });\n      const added = [];\n      const removed = [];\n      current.forEach(a => {\n        const exist = previous.some(b => b.id === a.id);\n\n        if (!exist) {\n          added.push(a);\n        }\n      });\n      previous.forEach(a => {\n        const exist = current.some(b => b.id === a.id);\n\n        if (!exist) {\n          removed.push(a);\n        }\n      });\n      this.trigger('updated', {\n        options,\n        added,\n        removed,\n        merged: []\n      });\n    }\n\n    return this;\n  }\n\n  push(cell, options) {\n    return this.add(cell, this.length, options);\n  }\n\n  pop(options) {\n    const cell = this.at(this.length - 1);\n    return this.remove(cell, options);\n  }\n\n  unshift(cell, options) {\n    return this.add(cell, 0, options);\n  }\n\n  shift(options) {\n    const cell = this.at(0);\n    return this.remove(cell, options);\n  }\n\n  get(cell) {\n    if (cell == null) {\n      return null;\n    }\n\n    const id = typeof cell === 'string' || typeof cell === 'number' ? cell : cell.id;\n    return this.map[id] || null;\n  }\n\n  has(cell) {\n    return this.get(cell) != null;\n  }\n\n  at(index) {\n    if (index < 0) {\n      index += this.length; // eslint-disable-line\n    }\n\n    return this.cells[index] || null;\n  }\n\n  first() {\n    return this.at(0);\n  }\n\n  last() {\n    return this.at(-1);\n  }\n\n  indexOf(cell) {\n    return this.cells.indexOf(cell);\n  }\n\n  toArray() {\n    return this.cells.slice();\n  }\n\n  sort(options = {}) {\n    if (this.comparator != null) {\n      this.cells = ArrayExt.sortBy(this.cells, this.comparator);\n\n      if (!options.silent) {\n        this.trigger('sorted');\n      }\n    }\n\n    return this;\n  }\n\n  clone() {\n    const constructor = this.constructor;\n    return new constructor(this.cells.slice(), {\n      comparator: this.comparator\n    });\n  }\n\n  reference(cell) {\n    this.map[cell.id] = cell;\n    cell.on('*', this.notifyCellEvent, this);\n  }\n\n  unreference(cell) {\n    cell.off('*', this.notifyCellEvent, this);\n    delete this.map[cell.id];\n  }\n\n  notifyCellEvent(name, args) {\n    const cell = args.cell;\n    this.trigger(`cell:${name}`, args);\n\n    if (cell) {\n      if (cell.isNode()) {\n        this.trigger(`node:${name}`, Object.assign(Object.assign({}, args), {\n          node: cell\n        }));\n      } else if (cell.isEdge()) {\n        this.trigger(`edge:${name}`, Object.assign(Object.assign({}, args), {\n          edge: cell\n        }));\n      }\n    }\n  }\n\n  clean() {\n    this.length = 0;\n    this.cells = [];\n    this.map = {};\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ArrayExt","Basecoat","Collection","constructor","cells","options","comparator","clean","reset","silent","toJSON","map","cell","add","index","localIndex","localOptions","merge","length","entities","Array","isArray","sortable","sort","sortAttr","added","merged","forEach","existing","get","isSameStore","setProp","getProp","push","hasChanged","some","key","reference","splice","i","args","trigger","dryrun","notify","Object","removed","remove","arr","removeCells","indexOf","id","unreference","previous","slice","current","a","exist","b","pop","at","unshift","shift","has","first","last","toArray","sortBy","clone","on","notifyCellEvent","off","name","isNode","node","isEdge","edge"],"sourceRoot":"","sources":["../../src/model/collection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}