{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { Renderable } from '../Renderable';\n/* babel-plugin-inline-import './shaders/webgl.grid.frag.glsl' */\n\nvar gridFrag = \"// generate grid, borrow from clay.gl viewer\\n// @see https://github.com/pissang/clay-viewer/blob/master/src/graphic/ground.glsl\\n#extension GL_OES_standard_derivatives : enable\\n\\nvarying vec3 v_Position;\\n// varying vec3 v_Normal;\\n\\nuniform float u_GridSize : 5;\\nuniform float u_GridSize2 : .5;\\nuniform vec4 u_GridColor : [0, 0, 0, 1];\\nuniform vec4 u_GridColor2 : [0.3, 0.3, 0.3, 1];\\nuniform bool u_GridEnabled : true;\\n\\n// uniform vec3 u_LightDirection;\\n// uniform vec3 u_LightColor;\\n// uniform vec3 u_Camera;\\n\\nvoid main() {\\n  // vec3 n = v_Normal;\\n  // vec3 l = normalize(u_LightDirection);\\n  // float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n\\n  gl_FragColor = vec4(1.);\\n\\n  if (u_GridEnabled) {\\n    float wx = v_Position.x;\\n    float wz = v_Position.z;\\n    // float x0 = abs(fract(wx / u_GridSize - 0.5) - 0.5) / fwidth(wx) * u_GridSize / 2.0;\\n    // float z0 = abs(fract(wz / u_GridSize - 0.5) - 0.5) / fwidth(wz) * u_GridSize / 2.0;\\n\\n    float x1 = abs(fract(wx / u_GridSize2 - 0.5) - 0.5) / fwidth(wx) * u_GridSize2;\\n    float z1 = abs(fract(wz / u_GridSize2 - 0.5) - 0.5) / fwidth(wz) * u_GridSize2;\\n\\n    // float v0 = 1.0 - clamp(min(x0, z0), 0.0, 1.0);\\n    float v1 = 1.0 - clamp(min(x1, z1), 0.0, 1.0);\\n    // if (v0 > 0.1) {\\n        // gl_FragColor = mix(gl_FragColor, u_GridColor, v0);\\n    // }\\n    // else {\\n        gl_FragColor = mix(gl_FragColor, u_GridColor2, v1);\\n    // }\\n  }\\n\\n  // float shadowFactor = calcShadow(u_ShadowMap, v_PositionFromLight, l, n);\\n  // vec3 diffuseColor = u_LightColor * NdotL * shadowFactor;\\n\\n  // gl_FragColor.rgb *= diffuseColor;\\n}\";\n/* babel-plugin-inline-import './shaders/webgl.grid.vert.glsl' */\n\nvar gridVert = \"attribute vec3 a_Position;\\n\\nvarying vec3 v_Position;\\n\\nuniform mat4 projectionMatrix;\\nuniform mat4 modelViewMatrix;\\n\\nvoid main() {\\n  v_Position = a_Position;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(a_Position, 1.);\\n}\";\nexport var Grid = (_dec = injectable(), _dec2 = inject(IDENTIFIER.Systems), _dec3 = named(IDENTIFIER.MaterialSystem), _dec4 = inject(IDENTIFIER.Systems), _dec5 = named(IDENTIFIER.GeometrySystem), _dec6 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Renderable) {\n  _inherits(Grid, _Renderable);\n\n  var _super = _createSuper(Grid);\n\n  function Grid() {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _initializerDefineProperty(_this, \"materialSystem\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"geometrySystem\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor3, _assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(Grid, [{\n    key: \"onAttributeChanged\",\n    value: function onAttributeChanged(_ref) {\n      var name = _ref.name,\n          data = _ref.data;\n      var mesh = this.getMeshComponent();\n\n      if (mesh && mesh.material) {\n        if (name === 'gridColor') {\n          mesh.material.setUniform('u_GridColor', data);\n          mesh.material.setUniform('u_GridColor2', data);\n        } else if (name === 'gridSize') {\n          mesh.material.setUniform('u_GridSize', data);\n          mesh.material.setUniform('u_GridSize2', data);\n        }\n      }\n    }\n  }, {\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      this.shaderModuleService.registerModule('grid', {\n        vs: gridVert,\n        fs: gridFrag\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('grid'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          extractedUniforms = _this$shaderModuleSer.uniforms;\n\n      var material = this.materialSystem.createShaderMaterial({\n        vertexShader: vs,\n        fragmentShader: fs\n      });\n      this.setMaterial(material);\n      var geometry = this.geometrySystem.createBufferGeometry({\n        vertexCount: 4\n      });\n      this.setGeometry(geometry);\n      material.setCull({\n        enable: false,\n        face: gl.BACK\n      }).setDepth({\n        enable: true,\n        func: gl.LESS\n      }); // @ts-ignore\n\n      material.setUniform(extractedUniforms);\n      this.setAttributes({\n        gridColor: this.config.gridColor,\n        gridSize: this.config.gridSize\n      });\n      geometry.setIndex([0, 3, 2, 2, 1, 0]);\n      geometry.setAttribute('a_Position', Float32Array.from([-4, -1, -4, 4, -1, -4, 4, -1, 4, -4, -1, 4]), {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float2'\n        }]\n      });\n    }\n  }]);\n\n  return Grid;\n}(Renderable), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"materialSystem\", [_dec2, _dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometrySystem\", [_dec4, _dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"mappings":"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","names":["gl","IDENTIFIER","inject","injectable","named","Renderable","Grid","Systems","MaterialSystem","GeometrySystem","ShaderModuleService","_inherits","_classCallCheck","args","_this","_initializerDefineProperty","_createClass","key","value","name","data","mesh","getMeshComponent","material","setUniform","shaderModuleService","registerModule","vs","gridVert","fs","gridFrag","getModule","extractedUniforms","uniforms","materialSystem","createShaderMaterial","vertexShader","fragmentShader","setMaterial","geometry","geometrySystem","createBufferGeometry","vertexCount","setGeometry","setCull","enable","face","BACK","setDepth","func","LESS","setAttributes","gridColor","config","gridSize","setIndex","setAttribute","Float32Array","from","arrayStride","stepMode","attributes","shaderLocation","offset","format","configurable","enumerable","writable","initializer"],"sources":["../../../src/renderable/grid/index.ts"],"sourcesContent":["import {\n  BufferData,\n  GeometrySystem,\n  gl,\n  IDENTIFIER,\n  IShaderModuleService,\n  MaterialSystem,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable, named } from 'inversify';\nimport { Renderable } from '../Renderable';\nimport gridFrag from './shaders/webgl.grid.frag.glsl';\nimport gridVert from './shaders/webgl.grid.vert.glsl';\n\ninterface IGridConfig {\n  gridColor: number[];\n  gridSize: number;\n}\n\n@injectable()\nexport class Grid extends Renderable<Partial<IGridConfig>> {\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.MaterialSystem)\n  private readonly materialSystem: MaterialSystem;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.GeometrySystem)\n  private readonly geometrySystem: GeometrySystem;\n\n  @inject(IDENTIFIER.ShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  protected onAttributeChanged({\n    name,\n    data,\n  }: {\n    name: string;\n    data: BufferData;\n  }) {\n    const mesh = this.getMeshComponent();\n    if (mesh && mesh.material) {\n      if (name === 'gridColor') {\n        mesh.material.setUniform('u_GridColor', data);\n        mesh.material.setUniform('u_GridColor2', data);\n      } else if (name === 'gridSize') {\n        mesh.material.setUniform('u_GridSize', data);\n        mesh.material.setUniform('u_GridSize2', data);\n      }\n    }\n  }\n\n  protected onEntityCreated() {\n    this.shaderModuleService.registerModule('grid', {\n      vs: gridVert,\n      fs: gridFrag,\n    });\n    const {\n      vs,\n      fs,\n      uniforms: extractedUniforms,\n    } = this.shaderModuleService.getModule('grid');\n\n    const material = this.materialSystem.createShaderMaterial({\n      vertexShader: vs!,\n      fragmentShader: fs!,\n    });\n    this.setMaterial(material);\n\n    const geometry = this.geometrySystem.createBufferGeometry({\n      vertexCount: 4,\n    });\n    this.setGeometry(geometry);\n\n    material\n      .setCull({\n        enable: false,\n        face: gl.BACK,\n      })\n      .setDepth({\n        enable: true,\n        func: gl.LESS,\n      });\n\n    // @ts-ignore\n    material.setUniform(extractedUniforms);\n\n    this.setAttributes({\n      gridColor: this.config.gridColor,\n      gridSize: this.config.gridSize,\n    });\n\n    geometry.setIndex([0, 3, 2, 2, 1, 0]);\n\n    geometry.setAttribute(\n      'a_Position',\n      Float32Array.from([-4, -1, -4, 4, -1, -4, 4, -1, 4, -4, -1, 4]),\n      {\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}