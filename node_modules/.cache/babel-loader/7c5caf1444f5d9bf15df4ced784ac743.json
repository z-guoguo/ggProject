{"ast":null,"code":"import { PortLayout, PortLabelLayout } from '../registry';\nimport { ObjectExt } from '../util';\nimport { Point } from '../geometry';\nexport class PortManager {\n  constructor(data) {\n    this.ports = [];\n    this.groups = {};\n    this.init(ObjectExt.cloneDeep(data));\n  }\n\n  getPorts() {\n    return this.ports;\n  }\n\n  getGroup(groupName) {\n    return groupName != null ? this.groups[groupName] : null;\n  }\n\n  getPortsByGroup(groupName) {\n    return this.ports.filter(p => p.group === groupName || p.group == null && groupName == null);\n  }\n\n  getPortsLayoutByGroup(groupName, elemBBox) {\n    const ports = this.getPortsByGroup(groupName);\n    const group = groupName ? this.getGroup(groupName) : null;\n    const groupPosition = group ? group.position : null;\n    const groupPositionName = groupPosition ? groupPosition.name : null;\n    let layoutFn;\n\n    if (groupPositionName != null) {\n      const fn = PortLayout.registry.get(groupPositionName);\n\n      if (fn == null) {\n        return PortLayout.registry.onNotFound(groupPositionName);\n      }\n\n      layoutFn = fn;\n    } else {\n      layoutFn = PortLayout.presets.left;\n    }\n\n    const portsArgs = ports.map(port => port && port.position && port.position.args || {});\n    const groupArgs = groupPosition && groupPosition.args || {};\n    const layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n    return layouts.map((portLayout, index) => {\n      const port = ports[index];\n      return {\n        portLayout,\n        portId: port.id,\n        portSize: port.size,\n        portAttrs: port.attrs,\n        labelSize: port.label.size,\n        labelLayout: this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox)\n      };\n    });\n  }\n\n  init(data) {\n    const {\n      groups,\n      items\n    } = data;\n\n    if (groups != null) {\n      Object.keys(groups).forEach(key => {\n        this.groups[key] = this.parseGroup(groups[key]);\n      });\n    }\n\n    if (Array.isArray(items)) {\n      items.forEach(item => {\n        this.ports.push(this.parsePort(item));\n      });\n    }\n  }\n\n  parseGroup(group) {\n    return Object.assign(Object.assign({}, group), {\n      label: this.getLabel(group, true),\n      position: this.getPortPosition(group.position, true)\n    });\n  }\n\n  parsePort(port) {\n    const result = Object.assign({}, port);\n    const group = this.getGroup(port.group) || {};\n    result.markup = result.markup || group.markup;\n    result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n    result.position = this.createPosition(group, result);\n    result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n    result.zIndex = this.getZIndex(group, result);\n    result.size = Object.assign(Object.assign({}, group.size), result.size);\n    return result;\n  }\n\n  getZIndex(group, port) {\n    if (typeof port.zIndex === 'number') {\n      return port.zIndex;\n    }\n\n    if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n      return group.zIndex;\n    }\n\n    return 'auto';\n  }\n\n  createPosition(group, port) {\n    return ObjectExt.merge({\n      name: 'left',\n      args: {}\n    }, group.position, {\n      args: port.args\n    });\n  }\n\n  getPortPosition(position, setDefault = false) {\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n\n      if (Array.isArray(position)) {\n        return {\n          name: 'absolute',\n          args: {\n            x: position[0],\n            y: position[1]\n          }\n        };\n      }\n\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n\n    return {\n      args: {}\n    };\n  }\n\n  getPortLabelPosition(position, setDefault = false) {\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n\n    return {\n      args: {}\n    };\n  }\n\n  getLabel(item, setDefaults = false) {\n    const label = item.label || {};\n    label.position = this.getPortLabelPosition(label.position, setDefaults);\n    return label;\n  }\n\n  getPortLabelLayout(port, portPosition, elemBBox) {\n    const name = port.label.position.name || 'left';\n    const args = port.label.position.args || {};\n    const layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n\n    if (layoutFn) {\n      return layoutFn(portPosition, elemBBox, args);\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PortLayout","PortLabelLayout","ObjectExt","Point","PortManager","constructor","data","ports","groups","init","cloneDeep","getPorts","getGroup","groupName","getPortsByGroup","filter","p","group","getPortsLayoutByGroup","elemBBox","groupPosition","position","groupPositionName","name","layoutFn","fn","registry","get","onNotFound","presets","left","portsArgs","map","port","args","groupArgs","layouts","portLayout","index","portId","id","portSize","size","portAttrs","attrs","labelSize","label","labelLayout","getPortLabelLayout","create","items","Object","keys","forEach","key","parseGroup","Array","isArray","item","push","parsePort","getLabel","getPortPosition","result","markup","merge","createPosition","zIndex","getZIndex","setDefault","x","y","getPortLabelPosition","setDefaults","portPosition"],"sourceRoot":"","sources":["../../src/model/port.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}