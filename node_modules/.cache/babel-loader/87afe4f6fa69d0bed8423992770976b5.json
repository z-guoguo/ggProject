{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @LastEditors: moyee\n * @Description: 拖动 Combo\n */\n\nimport { each } from '@antv/util';\nimport Util from '../util';\nimport Global from '../global';\nvar calculationItemsBBox = Util.calculationItemsBBox;\n/**\n * 遍历拖动的 Combo 下的所有 Combo\n * @param data 拖动的 Combo\n * @param fn\n */\n\nvar traverseCombo = function traverseCombo(data, fn) {\n  if (fn(data) === false) {\n    return;\n  }\n\n  if (data) {\n    var combos = data.get('combos');\n\n    if (combos.length === 0) {\n      return false;\n    }\n\n    each(combos, function (child) {\n      traverseCombo(child, fn);\n    });\n  }\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      enableDelegate: false,\n      delegateStyle: {},\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      activeState: '',\n      selectedState: 'selected',\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'combo:dragstart': 'onDragStart',\n      'combo:drag': 'onDrag',\n      'combo:dragend': 'onDragEnd',\n      'combo:drop': 'onDrop',\n      'node:drop': 'onNodeDrop',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave'\n    };\n  },\n  validationCombo: function validationCombo(evt) {\n    var item = evt.item;\n\n    if (!item || item.destroyed) {\n      return false;\n    }\n\n    if (!this.shouldUpdate.call(this, evt)) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    var graph = this.graph;\n    var item = evt.item;\n    this.currentShouldEnd = true;\n    if (!this.validationCombo(evt)) return;\n    this.targets = []; // 获取所有选中的 Combo\n\n    var combos = graph.findAllByState('combo', this.selectedState);\n    var currentCombo = item.get('id');\n    var dragCombos = combos.filter(function (combo) {\n      var comboId = combo.get('id');\n      return currentCombo === comboId;\n    });\n\n    if (dragCombos.length === 0) {\n      this.targets.push(item);\n    } else {\n      this.targets = combos;\n    }\n\n    var beforeDragItems = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n\n      beforeDragItems.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragItems', beforeDragItems);\n\n    if (this.activeState) {\n      this.targets.map(function (combo) {\n        var model = combo.getModel();\n\n        if (model.parentId) {\n          var parentCombo = graph.findById(model.parentId);\n\n          if (parentCombo) {\n            graph.setItemState(parentCombo, _this.activeState, true);\n          }\n        }\n      });\n    }\n\n    this.point = {};\n    this.originPoint = {};\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.currentItemChildCombos = [];\n    traverseCombo(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n\n      var model = param.getModel();\n\n      _this.currentItemChildCombos.push(model.id);\n\n      return true;\n    });\n  },\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n\n    if (this.enableDelegate) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.activeState) {\n        var graph_1 = this.graph;\n        var item = evt.item;\n        var model_1 = item.getModel(); // 拖动过程中实时计算距离\n\n        var combos = graph_1.getCombos();\n        var sourceBBox = item.getBBox();\n        var centerX_1 = sourceBBox.centerX,\n            centerY_1 = sourceBBox.centerY,\n            width_1 = sourceBBox.width; // 参与计算的 Combo，需要排除掉：\n        // 1、拖动 combo 自己\n        // 2、拖动 combo 的 parent\n        // 3、拖动 Combo 的 children\n\n        var calcCombos = combos.filter(function (combo) {\n          var cmodel = combo.getModel(); // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\n\n          if (!model_1.parentId) {\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n          }\n\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n        });\n        calcCombos.map(function (combo) {\n          var _a = combo.getBBox(),\n              cx = _a.centerX,\n              cy = _a.centerY,\n              w = _a.width; // 拖动的 combo 和要进入的 combo 之间的距离\n\n\n          var disX = centerX_1 - cx;\n          var disY = centerY_1 - cy; // 圆心距离\n\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\n\n          if (width_1 + w - distance > 0.8 * width_1) {\n            graph_1.setItemState(combo, _this.activeState, true);\n          } else {\n            graph_1.setItemState(combo, _this.activeState, false);\n          }\n        });\n      }\n\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this; // 当启用 delegate 时，拖动结束时需要更新 combo\n\n\n    if (this.enableDelegate || restore) {\n      console.log('updatePositions', this.targets);\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt, restore);\n      });\n    }\n  },\n  onDrop: function onDrop(evt) {\n    var _this = this; // 被放下的目标 combo\n\n\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, item);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !item || !this.targets || item.destroyed) return;\n    var graph = this.graph;\n    var targetModel = item.getModel();\n    this.targets.map(function (combo) {\n      var model = combo.getModel();\n\n      if (model.parentId !== targetModel.id) {\n        if (_this.activeState) {\n          graph.setItemState(item, _this.activeState, false);\n        } // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n\n\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, targetModel.id, false);\n        } else {\n          graph.updateCombo(combo);\n        }\n      } else {\n        graph.updateCombo(item);\n      }\n    });\n    this.end(item, evt); // 如果已经拖放下了，则不需要再通过距离判断了\n\n    this.endComparison = true;\n  },\n  onNodeDrop: function onNodeDrop(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return;\n    var graph = this.graph;\n    var item = evt.item;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, newParentCombo);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    var droppedCombo; // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\n\n    if (comboId) {\n      if (this.activeState) {\n        var combo = graph.findById(comboId);\n        graph.setItemState(combo, this.activeState, false);\n      }\n\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          if (comboId !== combo.getID()) {\n            droppedCombo = graph.findById(comboId);\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } else {\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          var model = combo.getModel();\n\n          if (model.comboId) {\n            graph.updateComboTree(combo, undefined, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } // 如果已经拖放下了，则不需要再通过距离判断了\n\n\n    this.endComparison = true;\n    this.end(droppedCombo, evt);\n  },\n  onDragEnter: function onDragEnter(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, true);\n    }\n  },\n  onDragLeave: function onDragLeave(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, false);\n    }\n  },\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var item = evt.item;\n\n    if (this.currentShouldEnd) {\n      this.updatePositions(evt);\n    }\n\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\n    var graph = this.graph;\n\n    if (parentCombo && this.activeState) {\n      graph.setItemState(parentCombo, this.activeState, false);\n    }\n\n    this.end(undefined, evt);\n  },\n  end: function end(comboDropedOn, evt) {\n    var _this = this;\n\n    if (!this.origin) return;\n    var graph = this.graph; // 删除delegate shape\n\n    if (this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      delegateGroup.clear();\n      this.delegateShape = null;\n    }\n\n    if (comboDropedOn && this.activeState) {\n      graph.setItemState(comboDropedOn, this.activeState, false);\n    } // 若没有被放置的 combo，则是被放置在画布上\n\n\n    if (!comboDropedOn) {\n      var stack_1 = graph.get('enabledStack') && this.enableStack;\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: [].concat(this.get('beforeDragItems'))\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.map(function (combo) {\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, undefined, stack_1);\n        } else {\n          graph.updateCombo(combo);\n\n          var _a = combo.getModel(),\n              x = _a.x,\n              y = _a.y,\n              id = _a.id;\n\n          stackData_1.after.combos.push({\n            x: x,\n            y: y,\n            id: id\n          });\n          graph.pushStack('update', stackData_1);\n        }\n      });\n    }\n\n    this.point = [];\n    this.origin = null;\n    this.originPoint = null;\n    this.targets.length = 0;\n  },\n\n  /**\n   * 遍历 comboTree，分别更新 node 和 combo\n   * @param data\n   * @param fn\n   */\n  traverse: function traverse(data, fn, edgesToBeUpdate) {\n    var _this = this;\n\n    if (edgesToBeUpdate === void 0) {\n      edgesToBeUpdate = {};\n    }\n\n    if (fn(data, edgesToBeUpdate) === false) {\n      return;\n    }\n\n    if (data) {\n      var combos = data.get('combos');\n      each(combos, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n      var nodes = data.get('nodes');\n      each(nodes, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n    }\n  },\n  updateCombo: function updateCombo(item, evt, restore) {\n    this.updateSingleItem(item, evt, restore);\n    var edgesToBeUpdate = {};\n    this.traverse(item, function (paramItem, paramEdgesMap) {\n      if (paramItem.destroyed) {\n        return false;\n      }\n\n      paramItem.getEdges().forEach(function (edge) {\n        return paramEdgesMap[edge.getID()] = edge;\n      });\n      return true;\n    }, edgesToBeUpdate);\n    Object.values(edgesToBeUpdate).forEach(function (edge) {\n      return edge.refresh();\n    });\n  },\n\n  /**\n   *\n   * @param item 当前正在拖动的元素\n   * @param evt\n   */\n  updateSingleItem: function updateSingleItem(item, evt, restore) {\n    var origin = this.origin;\n    var graph = this.graph;\n    var model = item.getModel();\n    var itemId = item.get('id');\n\n    if (!this.point[itemId]) {\n      this.point[itemId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[itemId].x;\n    var y = evt.y - origin.y + this.point[itemId].y;\n    console.log('restore', restore);\n\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n\n    graph.updateItem(item, {\n      x: x,\n      y: y\n    }, false); // item.getEdges()?.forEach(edge => edge.refresh());\n  },\n\n  /**\n   * 根据 ID 获取父 Combo\n   * @param parentId 父 Combo ID\n   */\n  getParentCombo: function getParentCombo(parentId) {\n    var graph = this.graph;\n\n    if (!parentId) {\n      return undefined;\n    }\n\n    var parentCombo = graph.findById(parentId);\n\n    if (!parentCombo) {\n      return undefined;\n    }\n\n    return parentCombo;\n  },\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph; // 当没有 delegate shape 时创建\n\n    if (!this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      var bbox = null;\n\n      if (this.targets.length > 1) {\n        bbox = calculationItemsBBox(this.targets);\n      } else {\n        bbox = this.targets[0].getBBox();\n      }\n\n      var x = bbox.x,\n          y = bbox.y,\n          width = bbox.width,\n          height = bbox.height,\n          minX = bbox.minX,\n          minY = bbox.minY;\n      this.originPoint = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\n\n      this.delegateShape = delegateGroup.addShape('rect', {\n        attrs: __assign({\n          width: bbox.width,\n          height: bbox.height,\n          x: bbox.x,\n          y: bbox.y\n        }, attrs),\n        name: 'combo-delegate-shape'\n      });\n      this.delegateShape.set('capture', false);\n      this.delegate = this.delegateShape;\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateShape.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  }\n};","map":{"version":3,"names":["__assign","each","Util","Global","calculationItemsBBox","traverseCombo","data","fn","combos","get","length","child","getDefaultCfg","enableDelegate","delegateStyle","onlyChangeComboSize","activeState","selectedState","enableStack","getEvents","validationCombo","evt","item","destroyed","shouldUpdate","call","type","getType","onDragStart","_this","graph","currentShouldEnd","targets","findAllByState","currentCombo","dragCombos","filter","combo","comboId","push","beforeDragItems","forEach","t","_a","getModel","x","y","id","set","map","model","parentId","parentCombo","findById","setItemState","point","originPoint","origin","currentItemChildCombos","param","onDrag","updateDelegate","graph_1","model_1","getCombos","sourceBBox","getBBox","centerX_1","centerX","centerY_1","centerY","width_1","width","calcCombos","cmodel","includes","cx","cy","w","disX","disY","distance","Math","sqrt","updateCombo","updatePositions","restore","console","log","onDrop","shouldEnd","targetModel","updateComboTree","end","endComparison","onNodeDrop","newParentCombo","undefined","droppedCombo","getID","onDragEnter","onDragLeave","onDragEnd","getParentCombo","comboDropedOn","delegateShape","delegateGroup","clear","stack_1","stackData_1","before","nodes","edges","concat","after","pushStack","traverse","edgesToBeUpdate","updateSingleItem","paramItem","paramEdgesMap","getEdges","edge","Object","values","refresh","itemId","updateItem","bbox","height","minX","minY","attrs","addShape","name","delegate","clientX","clientY","attr"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-pc/es/behavior/drag-combo.js"],"sourcesContent":["import { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @LastEditors: moyee\n * @Description: 拖动 Combo\n */\n\nimport { each } from '@antv/util';\nimport Util from '../util';\nimport Global from '../global';\nvar calculationItemsBBox = Util.calculationItemsBBox;\n/**\n * 遍历拖动的 Combo 下的所有 Combo\n * @param data 拖动的 Combo\n * @param fn\n */\n\nvar traverseCombo = function traverseCombo(data, fn) {\n  if (fn(data) === false) {\n    return;\n  }\n\n  if (data) {\n    var combos = data.get('combos');\n\n    if (combos.length === 0) {\n      return false;\n    }\n\n    each(combos, function (child) {\n      traverseCombo(child, fn);\n    });\n  }\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      enableDelegate: false,\n      delegateStyle: {},\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      activeState: '',\n      selectedState: 'selected',\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'combo:dragstart': 'onDragStart',\n      'combo:drag': 'onDrag',\n      'combo:dragend': 'onDragEnd',\n      'combo:drop': 'onDrop',\n      'node:drop': 'onNodeDrop',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave'\n    };\n  },\n  validationCombo: function validationCombo(evt) {\n    var item = evt.item;\n\n    if (!item || item.destroyed) {\n      return false;\n    }\n\n    if (!this.shouldUpdate.call(this, evt)) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    var graph = this.graph;\n    var item = evt.item;\n    this.currentShouldEnd = true;\n    if (!this.validationCombo(evt)) return;\n    this.targets = []; // 获取所有选中的 Combo\n\n    var combos = graph.findAllByState('combo', this.selectedState);\n    var currentCombo = item.get('id');\n    var dragCombos = combos.filter(function (combo) {\n      var comboId = combo.get('id');\n      return currentCombo === comboId;\n    });\n\n    if (dragCombos.length === 0) {\n      this.targets.push(item);\n    } else {\n      this.targets = combos;\n    }\n\n    var beforeDragItems = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n\n      beforeDragItems.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragItems', beforeDragItems);\n\n    if (this.activeState) {\n      this.targets.map(function (combo) {\n        var model = combo.getModel();\n\n        if (model.parentId) {\n          var parentCombo = graph.findById(model.parentId);\n\n          if (parentCombo) {\n            graph.setItemState(parentCombo, _this.activeState, true);\n          }\n        }\n      });\n    }\n\n    this.point = {};\n    this.originPoint = {};\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.currentItemChildCombos = [];\n    traverseCombo(item, function (param) {\n      if (param.destroyed) {\n        return false;\n      }\n\n      var model = param.getModel();\n\n      _this.currentItemChildCombos.push(model.id);\n\n      return true;\n    });\n  },\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n\n    if (this.enableDelegate) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.activeState) {\n        var graph_1 = this.graph;\n        var item = evt.item;\n        var model_1 = item.getModel(); // 拖动过程中实时计算距离\n\n        var combos = graph_1.getCombos();\n        var sourceBBox = item.getBBox();\n        var centerX_1 = sourceBBox.centerX,\n            centerY_1 = sourceBBox.centerY,\n            width_1 = sourceBBox.width; // 参与计算的 Combo，需要排除掉：\n        // 1、拖动 combo 自己\n        // 2、拖动 combo 的 parent\n        // 3、拖动 Combo 的 children\n\n        var calcCombos = combos.filter(function (combo) {\n          var cmodel = combo.getModel(); // 被拖动的是最外层的 Combo，无 parent，排除自身和子元素\n\n          if (!model_1.parentId) {\n            return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n          }\n\n          return cmodel.id !== model_1.id && !_this.currentItemChildCombos.includes(cmodel.id);\n        });\n        calcCombos.map(function (combo) {\n          var _a = combo.getBBox(),\n              cx = _a.centerX,\n              cy = _a.centerY,\n              w = _a.width; // 拖动的 combo 和要进入的 combo 之间的距离\n\n\n          var disX = centerX_1 - cx;\n          var disY = centerY_1 - cy; // 圆心距离\n\n          var distance = 2 * Math.sqrt(disX * disX + disY * disY);\n\n          if (width_1 + w - distance > 0.8 * width_1) {\n            graph_1.setItemState(combo, _this.activeState, true);\n          } else {\n            graph_1.setItemState(combo, _this.activeState, false);\n          }\n        });\n      }\n\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt);\n      });\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this; // 当启用 delegate 时，拖动结束时需要更新 combo\n\n\n    if (this.enableDelegate || restore) {\n      console.log('updatePositions', this.targets);\n      each(this.targets, function (item) {\n        _this.updateCombo(item, evt, restore);\n      });\n    }\n  },\n  onDrop: function onDrop(evt) {\n    var _this = this; // 被放下的目标 combo\n\n\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, item);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !item || !this.targets || item.destroyed) return;\n    var graph = this.graph;\n    var targetModel = item.getModel();\n    this.targets.map(function (combo) {\n      var model = combo.getModel();\n\n      if (model.parentId !== targetModel.id) {\n        if (_this.activeState) {\n          graph.setItemState(item, _this.activeState, false);\n        } // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n\n\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, targetModel.id, false);\n        } else {\n          graph.updateCombo(combo);\n        }\n      } else {\n        graph.updateCombo(item);\n      }\n    });\n    this.end(item, evt); // 如果已经拖放下了，则不需要再通过距离判断了\n\n    this.endComparison = true;\n  },\n  onNodeDrop: function onNodeDrop(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return;\n    var graph = this.graph;\n    var item = evt.item;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, newParentCombo);\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n    var droppedCombo; // 如果被放置的的节点有 comboId，且这个 comboId 与正在被拖拽的 combo 的父 id 不相同，则更新父亲为 comboId\n\n    if (comboId) {\n      if (this.activeState) {\n        var combo = graph.findById(comboId);\n        graph.setItemState(combo, this.activeState, false);\n      }\n\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          if (comboId !== combo.getID()) {\n            droppedCombo = graph.findById(comboId);\n            if (comboId !== combo.getModel().parentId) graph.updateComboTree(combo, comboId, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } else {\n      // 如果被放置的节点没有 comboId，且正在被拖拽的 combo 有父 id，则更新父亲为 undefined\n      this.targets.map(function (combo) {\n        if (!_this.onlyChangeComboSize) {\n          var model = combo.getModel();\n\n          if (model.comboId) {\n            graph.updateComboTree(combo, undefined, false);\n          }\n        } else {\n          graph.updateCombo(combo);\n        }\n      });\n    } // 如果已经拖放下了，则不需要再通过距离判断了\n\n\n    this.endComparison = true;\n    this.end(droppedCombo, evt);\n  },\n  onDragEnter: function onDragEnter(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, true);\n    }\n  },\n  onDragLeave: function onDragLeave(evt) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.validationCombo(evt)) return;\n    var item = evt.item;\n    var graph = this.graph;\n\n    if (this.activeState) {\n      graph.setItemState(item, this.activeState, false);\n    }\n  },\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var item = evt.item;\n\n    if (this.currentShouldEnd) {\n      this.updatePositions(evt);\n    }\n\n    var parentCombo = this.getParentCombo(item.getModel().parentId);\n    var graph = this.graph;\n\n    if (parentCombo && this.activeState) {\n      graph.setItemState(parentCombo, this.activeState, false);\n    }\n\n    this.end(undefined, evt);\n  },\n  end: function end(comboDropedOn, evt) {\n    var _this = this;\n\n    if (!this.origin) return;\n    var graph = this.graph; // 删除delegate shape\n\n    if (this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      delegateGroup.clear();\n      this.delegateShape = null;\n    }\n\n    if (comboDropedOn && this.activeState) {\n      graph.setItemState(comboDropedOn, this.activeState, false);\n    } // 若没有被放置的 combo，则是被放置在画布上\n\n\n    if (!comboDropedOn) {\n      var stack_1 = graph.get('enabledStack') && this.enableStack;\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: [].concat(this.get('beforeDragItems'))\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.map(function (combo) {\n        // 将 Combo 放置到某个 Combo 上面时，只有当 onlyChangeComboSize 为 false 时候才更新 Combo 结构\n        if (!_this.onlyChangeComboSize) {\n          graph.updateComboTree(combo, undefined, stack_1);\n        } else {\n          graph.updateCombo(combo);\n\n          var _a = combo.getModel(),\n              x = _a.x,\n              y = _a.y,\n              id = _a.id;\n\n          stackData_1.after.combos.push({\n            x: x,\n            y: y,\n            id: id\n          });\n          graph.pushStack('update', stackData_1);\n        }\n      });\n    }\n\n    this.point = [];\n    this.origin = null;\n    this.originPoint = null;\n    this.targets.length = 0;\n  },\n\n  /**\n   * 遍历 comboTree，分别更新 node 和 combo\n   * @param data\n   * @param fn\n   */\n  traverse: function traverse(data, fn, edgesToBeUpdate) {\n    var _this = this;\n\n    if (edgesToBeUpdate === void 0) {\n      edgesToBeUpdate = {};\n    }\n\n    if (fn(data, edgesToBeUpdate) === false) {\n      return;\n    }\n\n    if (data) {\n      var combos = data.get('combos');\n      each(combos, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n      var nodes = data.get('nodes');\n      each(nodes, function (child) {\n        _this.traverse(child, fn, edgesToBeUpdate);\n      });\n    }\n  },\n  updateCombo: function updateCombo(item, evt, restore) {\n    this.updateSingleItem(item, evt, restore);\n    var edgesToBeUpdate = {};\n    this.traverse(item, function (paramItem, paramEdgesMap) {\n      if (paramItem.destroyed) {\n        return false;\n      }\n\n      paramItem.getEdges().forEach(function (edge) {\n        return paramEdgesMap[edge.getID()] = edge;\n      });\n      return true;\n    }, edgesToBeUpdate);\n    Object.values(edgesToBeUpdate).forEach(function (edge) {\n      return edge.refresh();\n    });\n  },\n\n  /**\n   *\n   * @param item 当前正在拖动的元素\n   * @param evt\n   */\n  updateSingleItem: function updateSingleItem(item, evt, restore) {\n    var origin = this.origin;\n    var graph = this.graph;\n    var model = item.getModel();\n    var itemId = item.get('id');\n\n    if (!this.point[itemId]) {\n      this.point[itemId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[itemId].x;\n    var y = evt.y - origin.y + this.point[itemId].y;\n    console.log('restore', restore);\n\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n\n    graph.updateItem(item, {\n      x: x,\n      y: y\n    }, false); // item.getEdges()?.forEach(edge => edge.refresh());\n  },\n\n  /**\n   * 根据 ID 获取父 Combo\n   * @param parentId 父 Combo ID\n   */\n  getParentCombo: function getParentCombo(parentId) {\n    var graph = this.graph;\n\n    if (!parentId) {\n      return undefined;\n    }\n\n    var parentCombo = graph.findById(parentId);\n\n    if (!parentCombo) {\n      return undefined;\n    }\n\n    return parentCombo;\n  },\n  updateDelegate: function updateDelegate(evt) {\n    var graph = this.graph; // 当没有 delegate shape 时创建\n\n    if (!this.delegateShape) {\n      var delegateGroup = graph.get('delegateGroup');\n      var bbox = null;\n\n      if (this.targets.length > 1) {\n        bbox = calculationItemsBBox(this.targets);\n      } else {\n        bbox = this.targets[0].getBBox();\n      }\n\n      var x = bbox.x,\n          y = bbox.y,\n          width = bbox.width,\n          height = bbox.height,\n          minX = bbox.minX,\n          minY = bbox.minY;\n      this.originPoint = {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      };\n\n      var attrs = __assign(__assign({}, Global.delegateStyle), this.delegateStyle);\n\n      this.delegateShape = delegateGroup.addShape('rect', {\n        attrs: __assign({\n          width: bbox.width,\n          height: bbox.height,\n          x: bbox.x,\n          y: bbox.y\n        }, attrs),\n        name: 'combo-delegate-shape'\n      });\n      this.delegateShape.set('capture', false);\n      this.delegate = this.delegateShape;\n    } else {\n      var clientX = evt.x - this.origin.x + this.originPoint.minX;\n      var clientY = evt.y - this.origin.y + this.originPoint.minY;\n      this.delegateShape.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}