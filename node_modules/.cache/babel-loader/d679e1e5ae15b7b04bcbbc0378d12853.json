{"ast":null,"code":"export var Scheduler;\n\n(function (Scheduler) {\n  const queue = [];\n  const threshold = 1000 / 60;\n  const unit = [];\n  let deadline = 0;\n\n  const getTime = () => performance.now();\n\n  const peek = queue => queue[0];\n\n  const schedule = cb => unit.push(cb) === 1 && postMessage();\n\n  const postMessage = (() => {\n    const cb = () => unit.splice(0, unit.length).forEach(c => c());\n\n    if (typeof MessageChannel !== 'undefined') {\n      const {\n        port1,\n        port2\n      } = new MessageChannel();\n      port1.onmessage = cb;\n      return () => port2.postMessage(null);\n    }\n\n    return () => setTimeout(cb);\n  })();\n\n  const flushTask = () => {\n    deadline = getTime() + threshold;\n    let job = peek(queue);\n\n    while (job && !Scheduler.shouldYield()) {\n      const {\n        callback,\n        data\n      } = job;\n      job.callback = null;\n      const next = callback && callback(data);\n\n      if (next) {\n        job.callback = next;\n      } else {\n        queue.shift();\n      }\n\n      job = peek(queue);\n    }\n\n    job && schedule(flushTask);\n  };\n\n  Scheduler.scheduleTask = (callback, data) => {\n    const task = {\n      callback,\n      data\n    };\n    queue.push(task);\n    schedule(flushTask);\n  };\n\n  Scheduler.shouldYield = () => {\n    var _a, _b;\n\n    return ((_b = (_a = navigator) === null || _a === void 0 ? void 0 : _a.scheduling) === null || _b === void 0 ? void 0 : _b.isInputPending()) || getTime() >= deadline;\n  };\n})(Scheduler || (Scheduler = {}));","map":{"version":3,"mappings":"AAAA,OAAM,IAAWA,SAAX;;AAAN,WAAiBA,SAAjB,EAA0B;EASxB,MAAMC,KAAK,GAAY,EAAvB;EACA,MAAMC,SAAS,GAAW,OAAO,EAAjC;EACA,MAAMC,IAAI,GAAkB,EAA5B;EACA,IAAIC,QAAQ,GAAG,CAAf;;EAEA,MAAMC,OAAO,GAAG,MAAMC,WAAW,CAACC,GAAZ,EAAtB;;EACA,MAAMC,IAAI,GAAIP,KAAD,IAAoBA,KAAK,CAAC,CAAD,CAAtC;;EACA,MAAMQ,QAAQ,GAAIC,EAAD,IAAqBP,IAAI,CAACQ,IAAL,CAAUD,EAAV,MAAkB,CAAlB,IAAuBE,WAAW,EAAxE;;EAEA,MAAMA,WAAW,GAAG,CAAC,MAAK;IACxB,MAAMF,EAAE,GAAG,MAAMP,IAAI,CAACU,MAAL,CAAY,CAAZ,EAAeV,IAAI,CAACW,MAApB,EAA4BC,OAA5B,CAAqCC,CAAD,IAAOA,CAAC,EAA5C,CAAjB;;IACA,IAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;MACzC,MAAM;QAAEC,KAAF;QAASC;MAAT,IAAmB,IAAIF,cAAJ,EAAzB;MACAC,KAAK,CAACE,SAAN,GAAkBV,EAAlB;MACA,OAAO,MAAMS,KAAK,CAACP,WAAN,CAAkB,IAAlB,CAAb;IACD;;IACD,OAAO,MAAMS,UAAU,CAACX,EAAD,CAAvB;EACD,CARmB,GAApB;;EAUA,MAAMY,SAAS,GAAG,MAAK;IACrBlB,QAAQ,GAAGC,OAAO,KAAKH,SAAvB;IACA,IAAIqB,GAAG,GAAGf,IAAI,CAACP,KAAD,CAAd;;IACA,OAAOsB,GAAG,IAAI,CAACvB,uBAAf,EAA8B;MAC5B,MAAM;QAAEwB,QAAF;QAAYC;MAAZ,IAAqBF,GAA3B;MACAA,GAAG,CAACC,QAAJ,GAAe,IAAf;MACA,MAAME,IAAI,GAAGF,QAAQ,IAAIA,QAAQ,CAACC,IAAD,CAAjC;;MACA,IAAIC,IAAJ,EAAU;QACRH,GAAG,CAACC,QAAJ,GAAeE,IAAf;MACD,CAFD,MAEO;QACLzB,KAAK,CAAC0B,KAAN;MACD;;MACDJ,GAAG,GAAGf,IAAI,CAACP,KAAD,CAAV;IACD;;IACDsB,GAAG,IAAId,QAAQ,CAACa,SAAD,CAAf;EACD,CAfD;;EAiBatB,yBAAe,CAACwB,QAAD,EAA0BC,IAA1B,KAAwC;IAClE,MAAMG,IAAI,GAAG;MACXJ,QADW;MAEXC;IAFW,CAAb;IAIAxB,KAAK,CAACU,IAAN,CAAWiB,IAAX;IACAnB,QAAQ,CAACa,SAAD,CAAR;EACD,CAPY;;EASAtB,wBAAc,MAAc;;;IACvC,OACE,aAAC6B,SAAD,MAAkB,IAAlB,IAAkBC,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,UAApB,MAA8B,IAA9B,IAA8BC,aAA9B,GAA8B,MAA9B,GAA8BA,GAAEC,cAAF,EAA9B,KAAoD5B,OAAO,MAAMD,QADnE;EAGD,CAJY;AAKd,CA3DD,EAAiBJ,SAAS,KAATA,SAAS,MAA1B","names":["Scheduler","queue","threshold","unit","deadline","getTime","performance","now","peek","schedule","cb","push","postMessage","splice","length","forEach","c","MessageChannel","port1","port2","onmessage","setTimeout","flushTask","job","callback","data","next","shift","task","navigator","_a","scheduling","_b","isInputPending"],"sourceRoot":"","sources":["../../../src/util/scheduler/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}