{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      'touchstart': 'onTouchStart',\n      'touchmove': 'onTouchMove',\n      'touchend': 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onTouchStart: function onTouchStart(e) {\n    if (!e.item) return;\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDragStart(e);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDrag(e);\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    this.currentShouldEnd = true;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n\n      beforeDragNodes.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.hidenEdge = {};\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate.call(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n\n    var _a;\n\n    if (!this.origin) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n\n    this.hidenEdge = {};\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n            x = _a.x,\n            y = _a.y,\n            id = _a.id;\n\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, item); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, undefined); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, newParentCombo); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      graph.updateCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n        graph = event.graph,\n        point = event.point,\n        origin = event.origin,\n        evt = event.evt,\n        updateEdge = event.updateEdge,\n        updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};","map":{"version":3,"names":["__assign","deepMix","clone","debounce","Global","getDefaultCfg","updateEdge","delegateStyle","enableDelegate","onlyChangeComboSize","comboActiveState","selectedState","enableOptimize","enableDebounce","enableStack","getEvents","validationCombo","item","origin","destroyed","type","getType","onTouchStart","e","self","touches","originalEvent","event1","event2","preventDefault","console","warn","onDragStart","onTouchMove","onDragEnd","onDrag","evt","_this","currentShouldEnd","shouldBegin","call","hasLocked","group","getContainer","set","cachedCaptureItems","push","target","isAnchorPoint","get","graph","targets","targetCombo","nodes","findAllByState","currentNodeId","dragNodes","filter","node","nodeId","length","forEach","locked","beforeDragNodes","t","_a","getModel","x","y","id","hidenEdge","edges","getEdges","edge","isVisible","getID","hide","point","originPoint","shouldUpdate","updateDelegate","debounceUpdate","map","update","delegateRect","remove","show","refresh","stackData_1","before","combos","after","model","pushStack","emit","items","targetItem","onDropCombo","shouldEnd","updatePositions","setItemState","updateCombos","targetComboModel_1","nodeModel","comboId","updateComboTree","updateCombo","onDropCanvas","undefined","onDropNode","newParentCombo","findById","combo","onDragEnter","onDragLeave","restore","updateFunc","pos","updateItem","updatePosition","event","parent_1","attrs","calculationGroupPosition","cx","cy","width","height","minX","minY","addShape","name","delegate","clientX","clientY","attr","minx","Infinity","maxx","miny","maxy","i","element","bbox","getBBox","maxX","maxY","Math","floor","ceil"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-pc/es/behavior/drag-node.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      'touchstart': 'onTouchStart',\n      'touchmove': 'onTouchMove',\n      'touchend': 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onTouchStart: function onTouchStart(e) {\n    if (!e.item) return;\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDragStart(e);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDrag(e);\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    this.currentShouldEnd = true;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      var _a = t.getModel(),\n          x = _a.x,\n          y = _a.y,\n          id = _a.id;\n\n      beforeDragNodes.push({\n        x: x,\n        y: y,\n        id: id\n      });\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.hidenEdge = {};\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate.call(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n\n    var _a;\n\n    if (!this.origin) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n\n    this.hidenEdge = {};\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push(model);\n      });\n      this.targets.forEach(function (target) {\n        var _a = target.getModel(),\n            x = _a.x,\n            y = _a.y,\n            id = _a.id;\n\n        stackData_1.after.nodes.push({\n          x: x,\n          y: y,\n          id: id\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, item); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, undefined); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, newParentCombo); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      graph.updateCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n        graph = event.graph,\n        point = event.point,\n        origin = event.origin,\n        evt = event.evt,\n        updateEdge = event.updateEdge,\n        updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}