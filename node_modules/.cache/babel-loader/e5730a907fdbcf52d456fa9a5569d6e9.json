{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _primitiveMap, _depthFuncMap, _blendEquationMap, _blendFuncMap, _formatMap, _filterMap, _wrapModeMap;\n\nimport { gl } from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants'; // WebGPU 不支持 LINE_LOOP & TRIANGLE_FAN\n\nexport var primitiveMap = (_primitiveMap = {}, _defineProperty(_primitiveMap, gl.POINTS, WebGPUConstants.PrimitiveTopology.PointList), _defineProperty(_primitiveMap, gl.LINES, WebGPUConstants.PrimitiveTopology.LineList), _defineProperty(_primitiveMap, gl.LINE_LOOP, WebGPUConstants.PrimitiveTopology.LineList), _defineProperty(_primitiveMap, gl.LINE_STRIP, WebGPUConstants.PrimitiveTopology.LineStrip), _defineProperty(_primitiveMap, gl.TRIANGLES, WebGPUConstants.PrimitiveTopology.TriangleList), _defineProperty(_primitiveMap, gl.TRIANGLE_FAN, WebGPUConstants.PrimitiveTopology.TriangleList), _defineProperty(_primitiveMap, gl.TRIANGLE_STRIP, WebGPUConstants.PrimitiveTopology.TriangleStrip), _primitiveMap);\nexport var depthFuncMap = (_depthFuncMap = {}, _defineProperty(_depthFuncMap, gl.NEVER, WebGPUConstants.CompareFunction.Never), _defineProperty(_depthFuncMap, gl.ALWAYS, WebGPUConstants.CompareFunction.Always), _defineProperty(_depthFuncMap, gl.LESS, WebGPUConstants.CompareFunction.Less), _defineProperty(_depthFuncMap, gl.LEQUAL, WebGPUConstants.CompareFunction.LessEqual), _defineProperty(_depthFuncMap, gl.GREATER, WebGPUConstants.CompareFunction.Greater), _defineProperty(_depthFuncMap, gl.GEQUAL, WebGPUConstants.CompareFunction.GreaterEqual), _defineProperty(_depthFuncMap, gl.EQUAL, WebGPUConstants.CompareFunction.Equal), _defineProperty(_depthFuncMap, gl.NOTEQUAL, WebGPUConstants.CompareFunction.NotEqual), _depthFuncMap);\nexport var blendEquationMap = (_blendEquationMap = {}, _defineProperty(_blendEquationMap, gl.FUNC_ADD, WebGPUConstants.BlendOperation.Add), _defineProperty(_blendEquationMap, gl.MIN_EXT, WebGPUConstants.BlendOperation.Min), _defineProperty(_blendEquationMap, gl.MAX_EXT, WebGPUConstants.BlendOperation.Max), _defineProperty(_blendEquationMap, gl.FUNC_SUBTRACT, WebGPUConstants.BlendOperation.Subtract), _defineProperty(_blendEquationMap, gl.FUNC_REVERSE_SUBTRACT, WebGPUConstants.BlendOperation.ReverseSubtract), _blendEquationMap); // @see https://gpuweb.github.io/gpuweb/#blend-state\n// 不支持 'constant alpha' 和 'one minus constant alpha'\n\nexport var blendFuncMap = (_blendFuncMap = {}, _defineProperty(_blendFuncMap, gl.ZERO, WebGPUConstants.BlendFactor.Zero), _defineProperty(_blendFuncMap, gl.ONE, WebGPUConstants.BlendFactor.One), _defineProperty(_blendFuncMap, gl.SRC_COLOR, WebGPUConstants.BlendFactor.SrcColor), _defineProperty(_blendFuncMap, gl.ONE_MINUS_SRC_COLOR, WebGPUConstants.BlendFactor.OneMinusSrcColor), _defineProperty(_blendFuncMap, gl.SRC_ALPHA, WebGPUConstants.BlendFactor.SrcAlpha), _defineProperty(_blendFuncMap, gl.ONE_MINUS_SRC_ALPHA, WebGPUConstants.BlendFactor.OneMinusSrcAlpha), _defineProperty(_blendFuncMap, gl.DST_COLOR, WebGPUConstants.BlendFactor.DstColor), _defineProperty(_blendFuncMap, gl.ONE_MINUS_DST_COLOR, WebGPUConstants.BlendFactor.OneMinusDstColor), _defineProperty(_blendFuncMap, gl.DST_ALPHA, WebGPUConstants.BlendFactor.DstAlpha), _defineProperty(_blendFuncMap, gl.ONE_MINUS_DST_ALPHA, WebGPUConstants.BlendFactor.OneMinusDstAlpha), _defineProperty(_blendFuncMap, gl.CONSTANT_COLOR, WebGPUConstants.BlendFactor.BlendColor), _defineProperty(_blendFuncMap, gl.ONE_MINUS_CONSTANT_COLOR, WebGPUConstants.BlendFactor.OneMinusBlendColor), _defineProperty(_blendFuncMap, gl.SRC_ALPHA_SATURATE, WebGPUConstants.BlendFactor.SrcAlphaSaturated), _blendFuncMap); // @see https://gpuweb.github.io/gpuweb/#texture-formats\n\nexport var formatMap = (_formatMap = {}, _defineProperty(_formatMap, gl.ALPHA, 'r8unorm'), _defineProperty(_formatMap, gl.RGBA, 'rgba8unorm'), _defineProperty(_formatMap, gl.DEPTH_COMPONENT, 'depth32float'), _defineProperty(_formatMap, gl.DEPTH_STENCIL, 'depth24plus-stencil8'), _formatMap); // @see https://gpuweb.github.io/gpuweb/#enumdef-gpufiltermode\n\nexport var filterMap = (_filterMap = {}, _defineProperty(_filterMap, gl.NEAREST, 'nearest'), _defineProperty(_filterMap, gl.LINEAR, 'linear'), _filterMap); // @see https://gpuweb.github.io/gpuweb/#enumdef-gpuaddressmode\n\nexport var wrapModeMap = (_wrapModeMap = {}, _defineProperty(_wrapModeMap, gl.REPEAT, 'repeat'), _defineProperty(_wrapModeMap, gl.CLAMP_TO_EDGE, 'clamp-to-edge'), _defineProperty(_wrapModeMap, gl.MIRRORED_REPEAT, 'mirror-repeat'), _wrapModeMap);\nexport function getCullMode(_ref) {\n  var cull = _ref.cull;\n\n  if (!cull || !cull.enable) {\n    return WebGPUConstants.CullMode.None;\n  }\n\n  if (cull.face) {\n    return cull.face === gl.FRONT ? WebGPUConstants.CullMode.Front : WebGPUConstants.CullMode.Back;\n  }\n}\nexport function getDepthStencilStateDescriptor(_ref2) {\n  var depth = _ref2.depth,\n      stencil = _ref2.stencil; // TODO: stencil\n\n  var stencilFrontBack = {\n    compare: WebGPUConstants.CompareFunction.Always,\n    depthFailOp: WebGPUConstants.StencilOperation.Keep,\n    failOp: WebGPUConstants.StencilOperation.Keep,\n    passOp: WebGPUConstants.StencilOperation.Keep\n  };\n  return {\n    depthWriteEnabled: depth && depth.enable,\n    depthCompare: depthFuncMap[(depth === null || depth === void 0 ? void 0 : depth.func) || gl.ALWAYS],\n    format: WebGPUConstants.TextureFormat.Depth24PlusStencil8,\n    stencilFront: stencilFrontBack,\n    stencilBack: stencilFrontBack,\n    stencilReadMask: 0xffffffff,\n    stencilWriteMask: 0xffffffff\n  };\n}\n/**\n * @see https://gpuweb.github.io/gpuweb/#color-state\n */\n\nexport function getColorStateDescriptors(_ref3, swapChainFormat) {\n  var blend = _ref3.blend;\n  return [{\n    format: swapChainFormat,\n    // https://gpuweb.github.io/gpuweb/#blend-state\n    alphaBlend: {\n      srcFactor: blendFuncMap[blend && blend.func && blend.func.srcAlpha || gl.ONE],\n      dstFactor: blendFuncMap[blend && blend.func && blend.func.dstAlpha || gl.ZERO],\n      operation: blendEquationMap[blend && blend.equation && blend.equation.alpha || gl.FUNC_ADD]\n    },\n    colorBlend: {\n      srcFactor: blendFuncMap[blend && blend.func && blend.func.srcRGB || gl.ONE],\n      dstFactor: blendFuncMap[blend && blend.func && blend.func.dstRGB || gl.ZERO],\n      operation: blendEquationMap[blend && blend.equation && blend.equation.rgb || gl.FUNC_ADD]\n    },\n    writeMask: WebGPUConstants.ColorWrite.All\n  }];\n}","map":{"version":3,"mappings":"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","names":["gl","WebGPUConstants","primitiveMap","POINTS","PrimitiveTopology","PointList","LINES","LineList","LINE_LOOP","LINE_STRIP","LineStrip","TRIANGLES","TriangleList","TRIANGLE_FAN","TRIANGLE_STRIP","TriangleStrip","depthFuncMap","NEVER","CompareFunction","Never","ALWAYS","Always","LESS","Less","LEQUAL","LessEqual","GREATER","Greater","GEQUAL","GreaterEqual","EQUAL","Equal","NOTEQUAL","NotEqual","blendEquationMap","FUNC_ADD","BlendOperation","Add","MIN_EXT","Min","MAX_EXT","Max","FUNC_SUBTRACT","Subtract","FUNC_REVERSE_SUBTRACT","ReverseSubtract","blendFuncMap","ZERO","BlendFactor","Zero","ONE","One","SRC_COLOR","SrcColor","ONE_MINUS_SRC_COLOR","OneMinusSrcColor","SRC_ALPHA","SrcAlpha","ONE_MINUS_SRC_ALPHA","OneMinusSrcAlpha","DST_COLOR","DstColor","ONE_MINUS_DST_COLOR","OneMinusDstColor","DST_ALPHA","DstAlpha","ONE_MINUS_DST_ALPHA","OneMinusDstAlpha","CONSTANT_COLOR","BlendColor","ONE_MINUS_CONSTANT_COLOR","OneMinusBlendColor","SRC_ALPHA_SATURATE","SrcAlphaSaturated","formatMap","ALPHA","RGBA","DEPTH_COMPONENT","DEPTH_STENCIL","filterMap","NEAREST","LINEAR","wrapModeMap","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","getCullMode","cull","enable","CullMode","None","face","FRONT","Front","Back","getDepthStencilStateDescriptor","depth","stencil","stencilFrontBack","compare","depthFailOp","StencilOperation","Keep","failOp","passOp","depthWriteEnabled","depthCompare","func","format","TextureFormat","Depth24PlusStencil8","stencilFront","stencilBack","stencilReadMask","stencilWriteMask","getColorStateDescriptors","swapChainFormat","blend","alphaBlend","srcFactor","srcAlpha","dstFactor","dstAlpha","operation","equation","alpha","colorBlend","srcRGB","dstRGB","rgb","writeMask","ColorWrite","All"],"sources":["../../src/webgpu/constants.ts"],"sourcesContent":["import { gl, IModelInitializationOptions } from '@antv/g-webgpu-core';\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\n\n// WebGPU 不支持 LINE_LOOP & TRIANGLE_FAN\nexport const primitiveMap: {\n  [key: string]:\n    | WebGPUConstants.PrimitiveTopology.PointList\n    | WebGPUConstants.PrimitiveTopology.LineList\n    | WebGPUConstants.PrimitiveTopology.LineStrip\n    | WebGPUConstants.PrimitiveTopology.TriangleList\n    | WebGPUConstants.PrimitiveTopology.TriangleStrip;\n} = {\n  [gl.POINTS]: WebGPUConstants.PrimitiveTopology.PointList,\n  [gl.LINES]: WebGPUConstants.PrimitiveTopology.LineList,\n  [gl.LINE_LOOP]: WebGPUConstants.PrimitiveTopology.LineList,\n  [gl.LINE_STRIP]: WebGPUConstants.PrimitiveTopology.LineStrip,\n  [gl.TRIANGLES]: WebGPUConstants.PrimitiveTopology.TriangleList,\n  [gl.TRIANGLE_FAN]: WebGPUConstants.PrimitiveTopology.TriangleList,\n  [gl.TRIANGLE_STRIP]: WebGPUConstants.PrimitiveTopology.TriangleStrip,\n};\n\nexport const depthFuncMap: {\n  [key: string]:\n    | WebGPUConstants.CompareFunction.Never\n    | WebGPUConstants.CompareFunction.Always\n    | WebGPUConstants.CompareFunction.Less\n    | WebGPUConstants.CompareFunction.LessEqual\n    | WebGPUConstants.CompareFunction.Greater\n    | WebGPUConstants.CompareFunction.GreaterEqual\n    | WebGPUConstants.CompareFunction.Equal\n    | WebGPUConstants.CompareFunction.NotEqual;\n} = {\n  [gl.NEVER]: WebGPUConstants.CompareFunction.Never,\n  [gl.ALWAYS]: WebGPUConstants.CompareFunction.Always,\n  [gl.LESS]: WebGPUConstants.CompareFunction.Less,\n  [gl.LEQUAL]: WebGPUConstants.CompareFunction.LessEqual,\n  [gl.GREATER]: WebGPUConstants.CompareFunction.Greater,\n  [gl.GEQUAL]: WebGPUConstants.CompareFunction.GreaterEqual,\n  [gl.EQUAL]: WebGPUConstants.CompareFunction.Equal,\n  [gl.NOTEQUAL]: WebGPUConstants.CompareFunction.NotEqual,\n};\n\nexport const blendEquationMap: {\n  [key: string]:\n    | WebGPUConstants.BlendOperation.Add\n    | WebGPUConstants.BlendOperation.Min\n    | WebGPUConstants.BlendOperation.Max\n    | WebGPUConstants.BlendOperation.Subtract\n    | WebGPUConstants.BlendOperation.ReverseSubtract;\n} = {\n  [gl.FUNC_ADD]: WebGPUConstants.BlendOperation.Add,\n  [gl.MIN_EXT]: WebGPUConstants.BlendOperation.Min,\n  [gl.MAX_EXT]: WebGPUConstants.BlendOperation.Max,\n  [gl.FUNC_SUBTRACT]: WebGPUConstants.BlendOperation.Subtract,\n  [gl.FUNC_REVERSE_SUBTRACT]: WebGPUConstants.BlendOperation.ReverseSubtract,\n};\n\n// @see https://gpuweb.github.io/gpuweb/#blend-state\n// 不支持 'constant alpha' 和 'one minus constant alpha'\nexport const blendFuncMap: {\n  [key: string]:\n    | WebGPUConstants.BlendFactor.Zero\n    | WebGPUConstants.BlendFactor.One\n    | WebGPUConstants.BlendFactor.SrcColor\n    | WebGPUConstants.BlendFactor.OneMinusSrcColor\n    | WebGPUConstants.BlendFactor.SrcAlpha\n    | WebGPUConstants.BlendFactor.OneMinusSrcAlpha\n    | WebGPUConstants.BlendFactor.DstColor\n    | WebGPUConstants.BlendFactor.OneMinusDstColor\n    | WebGPUConstants.BlendFactor.DstAlpha\n    | WebGPUConstants.BlendFactor.OneMinusDstAlpha\n    | WebGPUConstants.BlendFactor.BlendColor\n    | WebGPUConstants.BlendFactor.OneMinusBlendColor\n    | WebGPUConstants.BlendFactor.SrcAlphaSaturated;\n} = {\n  [gl.ZERO]: WebGPUConstants.BlendFactor.Zero,\n  [gl.ONE]: WebGPUConstants.BlendFactor.One,\n  [gl.SRC_COLOR]: WebGPUConstants.BlendFactor.SrcColor,\n  [gl.ONE_MINUS_SRC_COLOR]: WebGPUConstants.BlendFactor.OneMinusSrcColor,\n  [gl.SRC_ALPHA]: WebGPUConstants.BlendFactor.SrcAlpha,\n  [gl.ONE_MINUS_SRC_ALPHA]: WebGPUConstants.BlendFactor.OneMinusSrcAlpha,\n  [gl.DST_COLOR]: WebGPUConstants.BlendFactor.DstColor,\n  [gl.ONE_MINUS_DST_COLOR]: WebGPUConstants.BlendFactor.OneMinusDstColor,\n  [gl.DST_ALPHA]: WebGPUConstants.BlendFactor.DstAlpha,\n  [gl.ONE_MINUS_DST_ALPHA]: WebGPUConstants.BlendFactor.OneMinusDstAlpha,\n  [gl.CONSTANT_COLOR]: WebGPUConstants.BlendFactor.BlendColor,\n  [gl.ONE_MINUS_CONSTANT_COLOR]: WebGPUConstants.BlendFactor.OneMinusBlendColor,\n  // [gl.CONSTANT_ALPHA]: WebGPUConstants.BlendFactor.'constant alpha',\n  // [gl.ONE_MINUS_CONSTANT_ALPHA]: WebGPUConstants.BlendFactor.'one minus constant alpha',\n  [gl.SRC_ALPHA_SATURATE]: WebGPUConstants.BlendFactor.SrcAlphaSaturated,\n};\n\n// @see https://gpuweb.github.io/gpuweb/#texture-formats\nexport const formatMap: {\n  [key: string]:\n    | 'r8unorm'\n    | 'rgba8unorm'\n    | 'depth32float'\n    | 'depth24plus-stencil8';\n} = {\n  [gl.ALPHA]: 'r8unorm',\n  [gl.RGBA]: 'rgba8unorm',\n  [gl.DEPTH_COMPONENT]: 'depth32float',\n  [gl.DEPTH_STENCIL]: 'depth24plus-stencil8',\n};\n\n// @see https://gpuweb.github.io/gpuweb/#enumdef-gpufiltermode\nexport const filterMap: {\n  [key: string]: 'nearest' | 'linear';\n} = {\n  [gl.NEAREST]: 'nearest',\n  [gl.LINEAR]: 'linear',\n};\n\n// @see https://gpuweb.github.io/gpuweb/#enumdef-gpuaddressmode\nexport const wrapModeMap: {\n  [key: string]: 'repeat' | 'clamp-to-edge' | 'mirror-repeat';\n} = {\n  [gl.REPEAT]: 'repeat',\n  [gl.CLAMP_TO_EDGE]: 'clamp-to-edge',\n  [gl.MIRRORED_REPEAT]: 'mirror-repeat',\n};\n\nexport function getCullMode({\n  cull,\n}: Pick<IModelInitializationOptions, 'cull'>):\n  | 'none'\n  | 'front'\n  | 'back'\n  | undefined {\n  if (!cull || !cull.enable) {\n    return WebGPUConstants.CullMode.None;\n  }\n\n  if (cull.face) {\n    return cull.face === gl.FRONT\n      ? WebGPUConstants.CullMode.Front\n      : WebGPUConstants.CullMode.Back;\n  }\n}\n\nexport function getDepthStencilStateDescriptor({\n  depth,\n  stencil,\n}: Pick<IModelInitializationOptions, 'depth' | 'stencil'>):\n  | GPUDepthStencilStateDescriptor\n  | undefined {\n  // TODO: stencil\n\n  const stencilFrontBack: GPUStencilStateFaceDescriptor = {\n    compare: WebGPUConstants.CompareFunction.Always,\n    depthFailOp: WebGPUConstants.StencilOperation.Keep,\n    failOp: WebGPUConstants.StencilOperation.Keep,\n    passOp: WebGPUConstants.StencilOperation.Keep,\n  };\n\n  return {\n    depthWriteEnabled: depth && depth.enable,\n    depthCompare: depthFuncMap[depth?.func || gl.ALWAYS],\n    format: WebGPUConstants.TextureFormat.Depth24PlusStencil8,\n    stencilFront: stencilFrontBack,\n    stencilBack: stencilFrontBack,\n    stencilReadMask: 0xffffffff,\n    stencilWriteMask: 0xffffffff,\n  };\n}\n\n/**\n * @see https://gpuweb.github.io/gpuweb/#color-state\n */\nexport function getColorStateDescriptors(\n  { blend }: Pick<IModelInitializationOptions, 'blend'>,\n  swapChainFormat: GPUTextureFormat,\n): GPUColorStateDescriptor[] {\n  return [\n    {\n      format: swapChainFormat,\n      // https://gpuweb.github.io/gpuweb/#blend-state\n      alphaBlend: {\n        srcFactor:\n          blendFuncMap[(blend && blend.func && blend.func.srcAlpha) || gl.ONE],\n        dstFactor:\n          blendFuncMap[(blend && blend.func && blend.func.dstAlpha) || gl.ZERO],\n        operation:\n          blendEquationMap[\n            (blend && blend.equation && blend.equation.alpha) || gl.FUNC_ADD\n          ],\n      },\n      colorBlend: {\n        srcFactor:\n          blendFuncMap[(blend && blend.func && blend.func.srcRGB) || gl.ONE],\n        dstFactor:\n          blendFuncMap[(blend && blend.func && blend.func.dstRGB) || gl.ZERO],\n        operation:\n          blendEquationMap[\n            (blend && blend.equation && blend.equation.rgb) || gl.FUNC_ADD\n          ],\n      },\n      writeMask: WebGPUConstants.ColorWrite.All,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}