{"ast":null,"code":"import { Angle } from '../../geometry';\nimport { resolve } from './util';\n\nconst orthogonal = function (view, magnet, refPoint, options) {\n  const angle = view.cell.getAngle();\n  const bbox = view.getBBoxOfElement(magnet);\n  const result = bbox.getCenter();\n  const topLeft = bbox.getTopLeft();\n  const bottomRight = bbox.getBottomRight();\n  let padding = options.padding;\n\n  if (!Number.isFinite(padding)) {\n    padding = 0;\n  }\n\n  if (topLeft.y + padding <= refPoint.y && refPoint.y <= bottomRight.y - padding) {\n    const dy = refPoint.y - result.y;\n    result.x += angle === 0 || angle === 180 ? 0 : dy * 1 / Math.tan(Angle.toRad(angle));\n    result.y += dy;\n  } else if (topLeft.x + padding <= refPoint.x && refPoint.x <= bottomRight.x - padding) {\n    const dx = refPoint.x - result.x;\n    result.y += angle === 90 || angle === 270 ? 0 : dx * Math.tan(Angle.toRad(angle));\n    result.x += dx;\n  }\n\n  return result;\n};\n/**\n * Tries to place the anchor of the edge inside the view bbox so that the\n * edge is made orthogonal. The anchor is placed along two line segments\n * inside the view bbox (between the centers of the top and bottom side and\n * between the centers of the left and right sides). If it is not possible\n * to place the anchor so that the edge would be orthogonal, the anchor is\n * placed at the center of the view bbox instead.\n */\n\n\nexport const orth = resolve(orthogonal);","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAAyBC,OAAzB,QAAwC,QAAxC;;AAOA,MAAMC,UAAU,GACd,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,EAAyC;EACvC,MAAMC,KAAK,GAAGJ,IAAI,CAACK,IAAL,CAAUC,QAAV,EAAd;EACA,MAAMC,IAAI,GAAGP,IAAI,CAACQ,gBAAL,CAAsBP,MAAtB,CAAb;EACA,MAAMQ,MAAM,GAAGF,IAAI,CAACG,SAAL,EAAf;EACA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,UAAL,EAAhB;EACA,MAAMC,WAAW,GAAGN,IAAI,CAACO,cAAL,EAApB;EAEA,IAAIC,OAAO,GAAGZ,OAAO,CAACY,OAAtB;;EACA,IAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAL,EAA+B;IAC7BA,OAAO,GAAG,CAAV;EACD;;EAED,IACEJ,OAAO,CAACO,CAAR,GAAYH,OAAZ,IAAuBb,QAAQ,CAACgB,CAAhC,IACAhB,QAAQ,CAACgB,CAAT,IAAcL,WAAW,CAACK,CAAZ,GAAgBH,OAFhC,EAGE;IACA,MAAMI,EAAE,GAAGjB,QAAQ,CAACgB,CAAT,GAAaT,MAAM,CAACS,CAA/B;IACAT,MAAM,CAACW,CAAP,IACEhB,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,GAAzB,GACI,CADJ,GAEKe,EAAE,GAAG,CAAN,GAAWE,IAAI,CAACC,GAAL,CAASzB,KAAK,CAAC0B,KAAN,CAAYnB,KAAZ,CAAT,CAHjB;IAIAK,MAAM,CAACS,CAAP,IAAYC,EAAZ;EACD,CAVD,MAUO,IACLR,OAAO,CAACS,CAAR,GAAYL,OAAZ,IAAuBb,QAAQ,CAACkB,CAAhC,IACAlB,QAAQ,CAACkB,CAAT,IAAcP,WAAW,CAACO,CAAZ,GAAgBL,OAFzB,EAGL;IACA,MAAMS,EAAE,GAAGtB,QAAQ,CAACkB,CAAT,GAAaX,MAAM,CAACW,CAA/B;IACAX,MAAM,CAACS,CAAP,IACEd,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,GAA1B,GAAgC,CAAhC,GAAoCoB,EAAE,GAAGH,IAAI,CAACC,GAAL,CAASzB,KAAK,CAAC0B,KAAN,CAAYnB,KAAZ,CAAT,CAD3C;IAEAK,MAAM,CAACW,CAAP,IAAYI,EAAZ;EACD;;EAED,OAAOf,MAAP;AACD,CAlCH;AAoCA;;;;;;;;;;AAQA,OAAO,MAAMgB,IAAI,GAAG3B,OAAO,CAGzBC,UAHyB,CAApB","names":["Angle","resolve","orthogonal","view","magnet","refPoint","options","angle","cell","getAngle","bbox","getBBoxOfElement","result","getCenter","topLeft","getTopLeft","bottomRight","getBottomRight","padding","Number","isFinite","y","dy","x","Math","tan","toRad","dx","orth"],"sourceRoot":"","sources":["../../../src/registry/node-anchor/orth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}