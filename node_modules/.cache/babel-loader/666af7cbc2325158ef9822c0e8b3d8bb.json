{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\n\nvar initOrder = function (g) {\n  var visited = {};\n  var simpleNodes = g.nodes().filter(function (v) {\n    var _a;\n\n    return !((_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.length);\n  });\n  var nodeRanks = simpleNodes.map(function (v) {\n    return g.node(v).rank;\n  });\n  var maxRank = Math.max.apply(Math, nodeRanks);\n  var layers = [];\n\n  for (var i = 0; i < maxRank + 1; i++) {\n    layers.push([]);\n  }\n\n  var dfs = function (v) {\n    var _a;\n\n    if (visited.hasOwnProperty(v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n\n    if (!isNaN(node.rank)) {\n      layers[node.rank].push(v);\n    }\n\n    (_a = g.successors(v)) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      return dfs(child);\n    });\n  };\n\n  var orderedVs = simpleNodes.sort(function (a, b) {\n    return g.node(a).rank - g.node(b).rank;\n  }); // const orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v)!.rank; });\n  // 有fixOrder的，直接排序好放进去\n\n  var beforeSort = orderedVs.filter(function (n) {\n    return g.node(n).fixorder !== undefined;\n  });\n  var fixOrderNodes = beforeSort.sort(function (a, b) {\n    return g.node(a).fixorder - g.node(b).fixorder;\n  });\n  fixOrderNodes === null || fixOrderNodes === void 0 ? void 0 : fixOrderNodes.forEach(function (n) {\n    if (!isNaN(g.node(n).rank)) {\n      layers[g.node(n).rank].push(n);\n    }\n\n    visited[n] = true;\n  });\n  orderedVs === null || orderedVs === void 0 ? void 0 : orderedVs.forEach(dfs);\n  return layers;\n};\n\nexports.default = initOrder;","map":{"version":3,"mappings":"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","names":["initOrder","g","visited","simpleNodes","nodes","filter","v","children","_a","length","nodeRanks","map","node","rank","maxRank","Math","max","apply","layers","i","push","dfs","hasOwnProperty","isNaN","successors","forEach","child","orderedVs","sort","a","b","beforeSort","n","fixorder","undefined","fixOrderNodes","exports"],"sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/init-order.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}