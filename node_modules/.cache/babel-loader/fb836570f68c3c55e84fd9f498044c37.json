{"ast":null,"code":"import { ObjectExt, NumberExt, Dom, FunctionExt } from '../../util';\nexport const text = {\n  qualify(text, {\n    attrs\n  }) {\n    return attrs.textWrap == null || !ObjectExt.isPlainObject(attrs.textWrap);\n  },\n\n  set(text, {\n    view,\n    elem,\n    attrs\n  }) {\n    const cacheName = 'x6-text';\n    const $elem = view.$(elem);\n    const cache = $elem.data(cacheName);\n\n    const json = str => {\n      try {\n        return JSON.parse(str);\n      } catch (error) {\n        return str;\n      }\n    };\n\n    const options = {\n      x: attrs.x,\n      eol: attrs.eol,\n      annotations: json(attrs.annotations),\n      textPath: json(attrs['text-path'] || attrs.textPath),\n      textVerticalAnchor: attrs['text-vertical-anchor'] || attrs.textVerticalAnchor,\n      displayEmpty: (attrs['display-empty'] || attrs.displayEmpty) === 'true',\n      lineHeight: attrs['line-height'] || attrs.lineHeight\n    };\n    const fontSize = attrs['font-size'] || attrs.fontSize;\n    const textHash = JSON.stringify([text, options]);\n\n    if (fontSize) {\n      elem.setAttribute('font-size', fontSize);\n    } // Updates the text only if there was a change in the string\n    // or any of its attributes.\n\n\n    if (cache == null || cache !== textHash) {\n      // Text Along Path Selector\n      const textPath = options.textPath;\n\n      if (textPath != null && typeof textPath === 'object') {\n        const selector = textPath.selector;\n\n        if (typeof selector === 'string') {\n          const pathNode = view.find(selector)[0];\n\n          if (pathNode instanceof SVGPathElement) {\n            Dom.ensureId(pathNode);\n            options.textPath = Object.assign({\n              'xlink:href': `#${pathNode.id}`\n            }, textPath);\n          }\n        }\n      }\n\n      Dom.text(elem, `${text}`, options);\n      $elem.data(cacheName, textHash);\n    }\n  }\n\n};\nexport const textWrap = {\n  qualify: ObjectExt.isPlainObject,\n\n  set(val, {\n    view,\n    elem,\n    attrs,\n    refBBox\n  }) {\n    const info = val; // option `width`\n\n    const width = info.width || 0;\n\n    if (NumberExt.isPercentage(width)) {\n      refBBox.width *= parseFloat(width) / 100;\n    } else if (width <= 0) {\n      refBBox.width += width;\n    } else {\n      refBBox.width = width;\n    } // option `height`\n\n\n    const height = info.height || 0;\n\n    if (NumberExt.isPercentage(height)) {\n      refBBox.height *= parseFloat(height) / 100;\n    } else if (height <= 0) {\n      refBBox.height += height;\n    } else {\n      refBBox.height = height;\n    } // option `text`\n\n\n    let wrappedText;\n    let txt = info.text;\n\n    if (txt == null) {\n      txt = attrs.text;\n    }\n\n    if (txt != null) {\n      wrappedText = Dom.breakText(`${txt}`, refBBox, {\n        'font-weight': attrs['font-weight'] || attrs.fontWeight,\n        'font-size': attrs['font-size'] || attrs.fontSize,\n        'font-family': attrs['font-family'] || attrs.fontFamily,\n        lineHeight: attrs.lineHeight\n      }, {\n        svgDocument: view.graph.view.svg,\n        ellipsis: info.ellipsis,\n        hyphen: info.hyphen,\n        breakWord: info.breakWord\n      });\n    } else {\n      wrappedText = '';\n    }\n\n    FunctionExt.call(text.set, this, wrappedText, {\n      view,\n      elem,\n      attrs,\n      refBBox,\n      cell: view.cell\n    });\n  }\n\n};\n\nconst isTextInUse = (val, {\n  attrs\n}) => {\n  return attrs.text !== undefined;\n};\n\nexport const lineHeight = {\n  qualify: isTextInUse\n};\nexport const textVerticalAnchor = {\n  qualify: isTextInUse\n};\nexport const textPath = {\n  qualify: isTextInUse\n};\nexport const annotations = {\n  qualify: isTextInUse\n};\nexport const eol = {\n  qualify: isTextInUse\n};\nexport const displayEmpty = {\n  qualify: isTextInUse\n};","map":{"version":3,"mappings":"AAAA,SACEA,SADF,EAGEC,SAHF,EAIEC,GAJF,EAKEC,WALF,QAOO,YAPP;AAUA,OAAO,MAAMC,IAAI,GAAoB;EACnCC,OAAO,CAACD,IAAD,EAAO;IAAEE;EAAF,CAAP,EAAgB;IACrB,OAAOA,KAAK,CAACC,QAAN,IAAkB,IAAlB,IAA0B,CAACP,SAAS,CAACQ,aAAV,CAAwBF,KAAK,CAACC,QAA9B,CAAlC;EACD,CAHkC;;EAInCE,GAAG,CAACL,IAAD,EAAO;IAAEM,IAAF;IAAQC,IAAR;IAAcL;EAAd,CAAP,EAA4B;IAC7B,MAAMM,SAAS,GAAG,SAAlB;IACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,CAAL,CAAOH,IAAP,CAAd;IACA,MAAMI,KAAK,GAAGF,KAAK,CAACG,IAAN,CAAWJ,SAAX,CAAd;;IACA,MAAMK,IAAI,GAAOC,GAAJ,IAAgB;MAC3B,IAAI;QACF,OAAOC,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAP;MACD,CAFD,CAEE,OAAOG,KAAP,EAAc;QACd,OAAOH,GAAP;MACD;IACF,CAND;;IAOA,MAAMI,OAAO,GAAoB;MAC/BC,CAAC,EAAEjB,KAAK,CAACiB,CADsB;MAE/BC,GAAG,EAAElB,KAAK,CAACkB,GAFoB;MAG/BC,WAAW,EAAER,IAAI,CAACX,KAAK,CAACmB,WAAP,CAHc;MAM/BC,QAAQ,EAAET,IAAI,CAACX,KAAK,CAAC,WAAD,CAAL,IAAsBA,KAAK,CAACoB,QAA7B,CANiB;MAO/BC,kBAAkB,EAAGrB,KAAK,CAAC,sBAAD,CAAL,IACnBA,KAAK,CAACqB,kBARuB;MAS/BC,YAAY,EAAE,CAACtB,KAAK,CAAC,eAAD,CAAL,IAA0BA,KAAK,CAACsB,YAAjC,MAAmD,MATlC;MAU/BC,UAAU,EAAGvB,KAAK,CAAC,aAAD,CAAL,IAAwBA,KAAK,CAACuB;IAVZ,CAAjC;IAaA,MAAMC,QAAQ,GAAIxB,KAAK,CAAC,WAAD,CAAL,IAAsBA,KAAK,CAACwB,QAA9C;IACA,MAAMC,QAAQ,GAAGZ,IAAI,CAACa,SAAL,CAAe,CAAC5B,IAAD,EAAOkB,OAAP,CAAf,CAAjB;;IAEA,IAAIQ,QAAJ,EAAc;MACZnB,IAAI,CAACsB,YAAL,CAAkB,WAAlB,EAA+BH,QAA/B;IACD,CA7B4B,CA+B7B;IACA;;;IACA,IAAIf,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAKgB,QAA/B,EAAyC;MACvC;MACA,MAAML,QAAQ,GAAGJ,OAAO,CAACI,QAAzB;;MACA,IAAIA,QAAQ,IAAI,IAAZ,IAAoB,OAAOA,QAAP,KAAoB,QAA5C,EAAsD;QACpD,MAAMQ,QAAQ,GAAGR,QAAQ,CAACQ,QAA1B;;QACA,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;UAChC,MAAMC,QAAQ,GAAGzB,IAAI,CAAC0B,IAAL,CAAUF,QAAV,EAAoB,CAApB,CAAjB;;UACA,IAAIC,QAAQ,YAAYE,cAAxB,EAAwC;YACtCnC,GAAG,CAACoC,QAAJ,CAAaH,QAAb;YACAb,OAAO,CAACI,QAAR,GAAgBa;cACd,cAAc,IAAIJ,QAAQ,CAACK,EAAE;YADf,GAEXd,QAFW,CAAhB;UAID;QACF;MACF;;MAEDxB,GAAG,CAACE,IAAJ,CAASO,IAAT,EAA6B,GAAGP,IAAI,EAApC,EAAwCkB,OAAxC;MACAT,KAAK,CAACG,IAAN,CAAWJ,SAAX,EAAsBmB,QAAtB;IACD;EACF;;AAzDkC,CAA9B;AA4DP,OAAO,MAAMxB,QAAQ,GAAoB;EACvCF,OAAO,EAAEL,SAAS,CAACQ,aADoB;;EAEvCC,GAAG,CAACgC,GAAD,EAAM;IAAE/B,IAAF;IAAQC,IAAR;IAAcL,KAAd;IAAqBoC;EAArB,CAAN,EAAoC;IACrC,MAAMC,IAAI,GAAGF,GAAb,CADqC,CAGrC;;IACA,MAAMG,KAAK,GAAGD,IAAI,CAACC,KAAL,IAAc,CAA5B;;IACA,IAAI3C,SAAS,CAAC4C,YAAV,CAAuBD,KAAvB,CAAJ,EAAmC;MACjCF,OAAO,CAACE,KAAR,IAAiBE,UAAU,CAACF,KAAD,CAAV,GAAoB,GAArC;IACD,CAFD,MAEO,IAAIA,KAAK,IAAI,CAAb,EAAgB;MACrBF,OAAO,CAACE,KAAR,IAAiBA,KAAjB;IACD,CAFM,MAEA;MACLF,OAAO,CAACE,KAAR,GAAgBA,KAAhB;IACD,CAXoC,CAarC;;;IACA,MAAMG,MAAM,GAAGJ,IAAI,CAACI,MAAL,IAAe,CAA9B;;IACA,IAAI9C,SAAS,CAAC4C,YAAV,CAAuBE,MAAvB,CAAJ,EAAoC;MAClCL,OAAO,CAACK,MAAR,IAAkBD,UAAU,CAACC,MAAD,CAAV,GAAqB,GAAvC;IACD,CAFD,MAEO,IAAIA,MAAM,IAAI,CAAd,EAAiB;MACtBL,OAAO,CAACK,MAAR,IAAkBA,MAAlB;IACD,CAFM,MAEA;MACLL,OAAO,CAACK,MAAR,GAAiBA,MAAjB;IACD,CArBoC,CAuBrC;;;IACA,IAAIC,WAAJ;IACA,IAAIC,GAAG,GAAGN,IAAI,CAACvC,IAAf;;IACA,IAAI6C,GAAG,IAAI,IAAX,EAAiB;MACfA,GAAG,GAAG3C,KAAK,CAACF,IAAZ;IACD;;IAED,IAAI6C,GAAG,IAAI,IAAX,EAAiB;MACfD,WAAW,GAAG9C,GAAG,CAACgD,SAAJ,CACZ,GAAGD,GAAG,EADM,EAEZP,OAFY,EAGZ;QACE,eAAepC,KAAK,CAAC,aAAD,CAAL,IAAwBA,KAAK,CAAC6C,UAD/C;QAEE,aAAa7C,KAAK,CAAC,WAAD,CAAL,IAAsBA,KAAK,CAACwB,QAF3C;QAGE,eAAexB,KAAK,CAAC,aAAD,CAAL,IAAwBA,KAAK,CAAC8C,UAH/C;QAIEvB,UAAU,EAAEvB,KAAK,CAACuB;MAJpB,CAHY,EASZ;QACEwB,WAAW,EAAE3C,IAAI,CAAC4C,KAAL,CAAW5C,IAAX,CAAgB6C,GAD/B;QAEEC,QAAQ,EAAEb,IAAI,CAACa,QAFjB;QAGEC,MAAM,EAAEd,IAAI,CAACc,MAHf;QAIEC,SAAS,EAAEf,IAAI,CAACe;MAJlB,CATY,CAAd;IAgBD,CAjBD,MAiBO;MACLV,WAAW,GAAG,EAAd;IACD;;IAED7C,WAAW,CAACwD,IAAZ,CAAiBvD,IAAI,CAACK,GAAtB,EAA2B,IAA3B,EAAiCuC,WAAjC,EAA8C;MAC5CtC,IAD4C;MAE5CC,IAF4C;MAG5CL,KAH4C;MAI5CoC,OAJ4C;MAK5CkB,IAAI,EAAElD,IAAI,CAACkD;IALiC,CAA9C;EAOD;;AA5DsC,CAAlC;;AA+DP,MAAMC,WAAW,GAAyB,CAACpB,GAAD,EAAM;EAAEnC;AAAF,CAAN,KAAmB;EAC3D,OAAOA,KAAK,CAACF,IAAN,KAAe0D,SAAtB;AACD,CAFD;;AAIA,OAAO,MAAMjC,UAAU,GAAoB;EACzCxB,OAAO,EAAEwD;AADgC,CAApC;AAIP,OAAO,MAAMlC,kBAAkB,GAAoB;EACjDtB,OAAO,EAAEwD;AADwC,CAA5C;AAIP,OAAO,MAAMnC,QAAQ,GAAoB;EACvCrB,OAAO,EAAEwD;AAD8B,CAAlC;AAIP,OAAO,MAAMpC,WAAW,GAAoB;EAC1CpB,OAAO,EAAEwD;AADiC,CAArC;AAIP,OAAO,MAAMrC,GAAG,GAAoB;EAClCnB,OAAO,EAAEwD;AADyB,CAA7B;AAIP,OAAO,MAAMjC,YAAY,GAAoB;EAC3CvB,OAAO,EAAEwD;AADkC,CAAtC","names":["ObjectExt","NumberExt","Dom","FunctionExt","text","qualify","attrs","textWrap","isPlainObject","set","view","elem","cacheName","$elem","$","cache","data","json","str","JSON","parse","error","options","x","eol","annotations","textPath","textVerticalAnchor","displayEmpty","lineHeight","fontSize","textHash","stringify","setAttribute","selector","pathNode","find","SVGPathElement","ensureId","Object","id","val","refBBox","info","width","isPercentage","parseFloat","height","wrappedText","txt","breakText","fontWeight","fontFamily","svgDocument","graph","svg","ellipsis","hyphen","breakWord","call","cell","isTextInUse","undefined"],"sourceRoot":"","sources":["../../../src/registry/attr/text.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}