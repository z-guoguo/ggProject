{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-fed4f764\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"antx\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"container\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEACTC,oBAA0B,KAA1B,EAA0B;EAArBC,EAAE,EAAC;AAAkB,CAA1B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;oBAAAC;;uBADFC,oBAEM,KAFN,cAEMC,UAFN","names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antx/index.vue"],"sourcesContent":["<template>\n  <div class=\"antx\">\n    <div id=\"container\"></div>\n  </div>\n</template>\n<script>\nimport { defineComponent, onMounted } from \"vue\";\nimport X6 from \"@antv/X6\";\nexport default defineComponent({\n  name: \"antx\",\n  setup() {\n    onMounted(() => {\n\n    })\n  },\n        defaultNode: {\n          type: \"rect-node\",\n          style: {\n            fill: \"#eee\",\n            stroke: \"#ccc\",\n          },\n        },\n        defaultEdge: {\n          type: \"quadratic\",\n          style: {\n            stroke: \"#F6BD16\",\n            lineWidth: 2,\n          },\n        },\n      });\n\n      graph.data(data);\n      graph.render();\n      // 新增节点按钮事件----新增事件\n      descriptionDiv.addEventListener(\"click\", (e) => {\n          data.nodes.push({ \n              id: \"node\" + data.nodes.length+1,\n            x: data.nodes[data.nodes.length - 1].x,\n            y:  data.nodes[data.nodes.length - 1].y + 50\n        });\n        // 重新绘制\n        graph.data(data);\n        graph.render();\n      });\n      //链接完成事件\n      graph.on(\"aftercreateedge\", (e) => {\n        // update the sourceAnchor and targetAnchor for the newly added edge\n        graph.updateItem(e.edge, {\n          sourceAnchor: sourceAnchorIdx,\n          targetAnchor: targetAnchorIdx,\n        });\n\n        // 更新平行边的curveOffset\n        //设置边(不重叠)\n        const edges = graph.save().edges;\n        processParallelEdgesOnAnchorPoint(edges);\n        graph.getEdges().forEach((edge, i) => {\n          graph.updateItem(edge, {\n            curveOffset: edges[i].curveOffset,\n            curvePosition: edges[i].curvePosition,\n          });\n        });\n      });\n\n      // 如果创建边缘在结束前被取消，更新锚点圆圈上的“链接”\n      graph.on(\"afterremoveitem\", (e) => {\n        if (e.item && e.item.source && e.item.target) {\n          const sourceNode = graph.findById(e.item.source);\n          const targetNode = graph.findById(e.item.target);\n          const { sourceAnchor, targetAnchor } = e.item;\n          if (sourceNode && !isNaN(sourceAnchor)) {\n            const sourceAnchorShape = sourceNode\n              .getContainer()\n              .find(\n                (ele) =>\n                  ele.get(\"name\") === \"anchor-point\" &&\n                  ele.get(\"anchorPointIdx\") === sourceAnchor\n              );\n            sourceAnchorShape.set(\"links\", sourceAnchorShape.get(\"links\") - 1);\n          }\n          if (targetNode && !isNaN(targetAnchor)) {\n            const targetAnchorShape = targetNode\n              .getContainer()\n              .find(\n                (ele) =>\n                  ele.get(\"name\") === \"anchor-point\" &&\n                  ele.get(\"anchorPointIdx\") === targetAnchor\n              );\n            targetAnchorShape.set(\"links\", targetAnchorShape.get(\"links\") - 1);\n          }\n        }\n      });\n\n      // 单击第一个节点后，创建边缘，更新 sourceAnchor(点击第一个⭕️锚点即触发)\n      graph.on(\"afteradditem\", (e) => {\n        if (e.item && e.item.getType() === \"edge\") {\n          graph.updateItem(e.item, {\n            sourceAnchor: sourceAnchorIdx,\n          });\n        }\n      });\n\n      // 一些监听器来控制节点的状态以显示和隐藏锚点圆---鼠标进入节点事件\n      graph.on(\"node:mouseenter\", (e) => {\n        graph.setItemState(e.item, \"showAnchors\", true);\n      });\n    //   鼠标离开事件-隐藏锚点\n      graph.on(\"node:mouseleave\", (e) => {\n        graph.setItemState(e.item, \"showAnchors\", false);\n      });\n\n      if (typeof window !== \"undefined\")\n        window.onresize = () => {\n          if (!graph || graph.get(\"destroyed\")) return;\n          if (!container || !container.scrollWidth || !container.scrollHeight)\n            return;\n          graph.changeSize(container.scrollWidth, container.scrollHeight - 20);\n        };\n    });\n  },\n});\n</script>\n<style lang=\"less\" scoped>\n.antx {\n  height: 100%;\n  // border: 1px solid #ddd;\n  border-radius: 6px;\n  #container {\n    height: 100%;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}