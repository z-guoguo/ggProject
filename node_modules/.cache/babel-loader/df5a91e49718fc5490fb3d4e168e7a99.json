{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constant = require(\"./constant\");\n\nvar _index = _interopRequireDefault(require(\"./index.worker\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 创建一个在worker中运行的算法\n * @param type 算法类型\n */\n\n\nvar createWorker = function createWorker(type) {\n  return function () {\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    return new Promise(function (resolve, reject) {\n      var worker = new _index.default();\n      worker.postMessage({\n        _algorithmType: type,\n        data: data\n      });\n\n      worker.onmessage = function (event) {\n        var _a = event.data,\n            data = _a.data,\n            _algorithmType = _a._algorithmType;\n\n        if (_constant.MESSAGE.SUCCESS === _algorithmType) {\n          resolve(data);\n        } else {\n          reject();\n        }\n\n        worker.terminate();\n      };\n    });\n  };\n};\n\nvar _default = createWorker;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_constant","require","_index","_interopRequireDefault","obj","__esModule","createWorker","type","data","_i","arguments","length","Promise","resolve","reject","worker","postMessage","_algorithmType","onmessage","event","_a","MESSAGE","SUCCESS","terminate","_default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/lib/workers/createWorker.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _constant = require(\"./constant\");\n\nvar _index = _interopRequireDefault(require(\"./index.worker\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * 创建一个在worker中运行的算法\n * @param type 算法类型\n */\nvar createWorker = function createWorker(type) {\n  return function () {\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    return new Promise(function (resolve, reject) {\n      var worker = new _index.default();\n      worker.postMessage({\n        _algorithmType: type,\n        data: data\n      });\n\n      worker.onmessage = function (event) {\n        var _a = event.data,\n            data = _a.data,\n            _algorithmType = _a._algorithmType;\n\n        if (_constant.MESSAGE.SUCCESS === _algorithmType) {\n          resolve(data);\n        } else {\n          reject();\n        }\n\n        worker.terminate();\n      };\n    });\n  };\n};\n\nvar _default = createWorker;\nexports.default = _default;"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACF,OAAO,CAAC,gBAAD,CAAR,CAAnC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;IAAEL,OAAO,EAAEK;EAAX,CAArC;AAAwD;AAE/F;AACA;AACA;AACA;;;AACA,IAAIE,YAAY,GAAG,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;EAC7C,OAAO,YAAY;IACjB,IAAIC,IAAI,GAAG,EAAX;;IAEA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;MAC5CD,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;IACD;;IAED,OAAO,IAAIG,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;MAC5C,IAAIC,MAAM,GAAG,IAAIb,MAAM,CAACH,OAAX,EAAb;MACAgB,MAAM,CAACC,WAAP,CAAmB;QACjBC,cAAc,EAAEV,IADC;QAEjBC,IAAI,EAAEA;MAFW,CAAnB;;MAKAO,MAAM,CAACG,SAAP,GAAmB,UAAUC,KAAV,EAAiB;QAClC,IAAIC,EAAE,GAAGD,KAAK,CAACX,IAAf;QAAA,IACIA,IAAI,GAAGY,EAAE,CAACZ,IADd;QAAA,IAEIS,cAAc,GAAGG,EAAE,CAACH,cAFxB;;QAIA,IAAIjB,SAAS,CAACqB,OAAV,CAAkBC,OAAlB,KAA8BL,cAAlC,EAAkD;UAChDJ,OAAO,CAACL,IAAD,CAAP;QACD,CAFD,MAEO;UACLM,MAAM;QACP;;QAEDC,MAAM,CAACQ,SAAP;MACD,CAZD;IAaD,CApBM,CAAP;EAqBD,CA5BD;AA6BD,CA9BD;;AAgCA,IAAIC,QAAQ,GAAGlB,YAAf;AACAT,OAAO,CAACE,OAAR,GAAkByB,QAAlB"},"metadata":{},"sourceType":"script"}