{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { gl } from '@antv/g-webgpu-core';\nimport { colorSpaceMap, dataTypeMap, filterMap, formatMap, mipmapMap, wrapModeMap } from './constants';\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\n\nvar ReglTexture2D = /*#__PURE__*/function () {\n  function ReglTexture2D(reGl, options) {\n    _classCallCheck(this, ReglTexture2D);\n\n    this.texture = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    var data = options.data,\n        _options$type = options.type,\n        type = _options$type === void 0 ? gl.UNSIGNED_BYTE : _options$type,\n        width = options.width,\n        height = options.height,\n        _options$flipY = options.flipY,\n        flipY = _options$flipY === void 0 ? false : _options$flipY,\n        _options$format = options.format,\n        format = _options$format === void 0 ? gl.RGBA : _options$format,\n        _options$mipmap = options.mipmap,\n        mipmap = _options$mipmap === void 0 ? false : _options$mipmap,\n        _options$wrapS = options.wrapS,\n        wrapS = _options$wrapS === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapS,\n        _options$wrapT = options.wrapT,\n        wrapT = _options$wrapT === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapT,\n        _options$aniso = options.aniso,\n        aniso = _options$aniso === void 0 ? 0 : _options$aniso,\n        _options$alignment = options.alignment,\n        alignment = _options$alignment === void 0 ? 1 : _options$alignment,\n        _options$premultiplyA = options.premultiplyAlpha,\n        premultiplyAlpha = _options$premultiplyA === void 0 ? false : _options$premultiplyA,\n        _options$mag = options.mag,\n        mag = _options$mag === void 0 ? gl.NEAREST : _options$mag,\n        _options$min = options.min,\n        min = _options$min === void 0 ? gl.NEAREST : _options$min,\n        _options$colorSpace = options.colorSpace,\n        colorSpace = _options$colorSpace === void 0 ? gl.BROWSER_DEFAULT_WEBGL : _options$colorSpace;\n    this.width = width;\n    this.height = height;\n    var textureOptions = {\n      width: width,\n      height: height,\n      // @ts-ignore\n      type: dataTypeMap[type],\n      format: formatMap[format],\n      wrapS: wrapModeMap[wrapS],\n      wrapT: wrapModeMap[wrapT],\n      // @ts-ignore\n      mag: filterMap[mag],\n      min: filterMap[min],\n      alignment: alignment,\n      flipY: flipY,\n      colorSpace: colorSpaceMap[colorSpace],\n      premultiplyAlpha: premultiplyAlpha,\n      aniso: aniso\n    };\n\n    if (data) {\n      textureOptions.data = data;\n    }\n\n    if (typeof mipmap === 'number') {\n      textureOptions.mipmap = mipmapMap[mipmap];\n    } else if (typeof mipmap === 'boolean') {\n      textureOptions.mipmap = mipmap;\n    }\n\n    this.texture = reGl.texture(textureOptions);\n  }\n\n  _createClass(ReglTexture2D, [{\n    key: \"get\",\n    value: function get() {\n      return this.texture;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      // @ts-ignore\n      this.texture._texture.bind();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      this.texture.resize(width, height);\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.texture.destroy();\n    }\n  }]);\n\n  return ReglTexture2D;\n}();\n\nexport { ReglTexture2D as default };","map":{"version":3,"mappings":"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","names":["gl","colorSpaceMap","dataTypeMap","filterMap","formatMap","mipmapMap","wrapModeMap","ReglTexture2D","reGl","options","_classCallCheck","texture","width","height","data","type","UNSIGNED_BYTE","flipY","format","RGBA","mipmap","wrapS","CLAMP_TO_EDGE","wrapT","aniso","alignment","premultiplyAlpha","mag","NEAREST","min","colorSpace","BROWSER_DEFAULT_WEBGL","textureOptions","_texture","bind","resize","destroy"],"sources":["../../src/webgl/ReglTexture2D.ts"],"sourcesContent":["import {\n  gl,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n} from '@antv/g-webgpu-core';\nimport regl from 'regl';\nimport {\n  colorSpaceMap,\n  dataTypeMap,\n  filterMap,\n  formatMap,\n  mipmapMap,\n  wrapModeMap,\n} from './constants';\n\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\nexport default class ReglTexture2D implements ITexture2D {\n  private texture: regl.Texture2D;\n  private width: number;\n  private height: number;\n\n  constructor(reGl: regl.Regl, options: ITexture2DInitializationOptions) {\n    const {\n      data,\n      type = gl.UNSIGNED_BYTE,\n      width,\n      height,\n      flipY = false,\n      format = gl.RGBA,\n      mipmap = false,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      aniso = 0,\n      alignment = 1,\n      premultiplyAlpha = false,\n      mag = gl.NEAREST,\n      min = gl.NEAREST,\n      colorSpace = gl.BROWSER_DEFAULT_WEBGL,\n    } = options;\n    this.width = width;\n    this.height = height;\n\n    const textureOptions: regl.Texture2DOptions = {\n      width,\n      height,\n      // @ts-ignore\n      type: dataTypeMap[type],\n      format: formatMap[format],\n      wrapS: wrapModeMap[wrapS],\n      wrapT: wrapModeMap[wrapT],\n      // @ts-ignore\n      mag: filterMap[mag],\n      min: filterMap[min],\n      alignment,\n      flipY,\n      colorSpace: colorSpaceMap[colorSpace],\n      premultiplyAlpha,\n      aniso,\n    };\n\n    if (data) {\n      textureOptions.data = data;\n    }\n\n    if (typeof mipmap === 'number') {\n      textureOptions.mipmap = mipmapMap[mipmap];\n    } else if (typeof mipmap === 'boolean') {\n      textureOptions.mipmap = mipmap;\n    }\n\n    this.texture = reGl.texture(textureOptions);\n  }\n\n  public get() {\n    return this.texture;\n  }\n  public update() {\n    // @ts-ignore\n    this.texture._texture.bind();\n  }\n\n  public resize({ width, height }: { width: number; height: number }): void {\n    this.texture.resize(width, height);\n    this.width = width;\n    this.height = height;\n  }\n\n  public destroy() {\n    this.texture.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}