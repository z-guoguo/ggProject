{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from './base';\nexport class ClipboardManager extends Base {\n  get commonOptions() {\n    const _a = this.instanceOptions,\n          {\n      enabled\n    } = _a,\n          others = __rest(_a, [\"enabled\"]);\n\n    return others;\n  }\n\n  get instanceOptions() {\n    return this.options.clipboard;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  get disabled() {\n    return this.instanceOptions.enabled !== true;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createClipboard();\n    this.widget.deserialize(this.instanceOptions);\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.instanceOptions.enabled = true;\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.instanceOptions.enabled = false;\n    }\n  }\n\n  copy(cells, options = {}) {\n    if (!this.disabled) {\n      this.widget.copy(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n      this.graph.trigger('clipboard:changed', {\n        cells\n      });\n    }\n  }\n\n  cut(cells, options = {}) {\n    if (!this.disabled) {\n      this.widget.cut(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n      this.graph.trigger('clipboard:changed', {\n        cells\n      });\n    }\n  }\n\n  paste(options = {}, graph = this.graph) {\n    if (!this.disabled) {\n      return this.widget.paste(graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n\n    return [];\n  }\n\n  clean(force) {\n    if (!this.disabled || force) {\n      this.widget.clean();\n      this.graph.trigger('clipboard:changed', {\n        cells: []\n      });\n    }\n  }\n\n  isEmpty() {\n    return this.widget.isEmpty();\n  }\n\n  dispose() {\n    this.clean(true);\n  }\n\n}\n\n__decorate([Base.dispose()], ClipboardManager.prototype, \"dispose\", null);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAIA,SAASA,IAAT,QAAqB,QAArB;AAEA,OAAM,MAAOC,gBAAP,SAAgCD,IAAhC,CAAoC;EAGb,IAAbE,aAAa;IACzB,MAAMC,KAAyB,KAAKC,eAApC;IAAA,MAAM;MAAEC;IAAF,IAASF,EAAf;IAAA,MAAoBG,MAAM,cAApB,WAAoB,CAA1B;;IACA,OAAOA,MAAP;EACD;;EAE4B,IAAfF,eAAe;IAC3B,OAAO,KAAKG,OAAL,CAAaC,SAApB;EACD;;EAEQ,IAALC,KAAK;IACP,OAAO,KAAKC,MAAL,CAAYD,KAAnB;EACD;;EAEW,IAARE,QAAQ;IACV,OAAO,KAAKP,eAAL,CAAqBC,OAArB,KAAiC,IAAxC;EACD;;EAESO,IAAI;IACZ,KAAKF,MAAL,GAAc,KAAKG,KAAL,CAAWC,IAAX,CAAgBC,eAAhB,EAAd;IACA,KAAKL,MAAL,CAAYM,WAAZ,CAAwB,KAAKZ,eAA7B;EACD;;EAEDa,MAAM;IACJ,IAAI,KAAKN,QAAT,EAAmB;MACjB,KAAKP,eAAL,CAAqBC,OAArB,GAA+B,IAA/B;IACD;EACF;;EAEDa,OAAO;IACL,IAAI,CAAC,KAAKP,QAAV,EAAoB;MAClB,KAAKP,eAAL,CAAqBC,OAArB,GAA+B,KAA/B;IACD;EACF;;EAEDc,IAAI,CAACV,KAAD,EAAgBF,UAAiC,EAAjD,EAAmD;IACrD,IAAI,CAAC,KAAKI,QAAV,EAAoB;MAClB,KAAKD,MAAL,CAAYS,IAAZ,CAAiBV,KAAjB,EAAwB,KAAKI,KAA7B,EAAkCO,gCAC7B,KAAKlB,aADwB,GAE7BK,OAF6B,CAAlC;MAIA,KAAKM,KAAL,CAAWQ,OAAX,CAAmB,mBAAnB,EAAwC;QAAEZ;MAAF,CAAxC;IACD;EACF;;EAEDa,GAAG,CAACb,KAAD,EAAgBF,UAAiC,EAAjD,EAAmD;IACpD,IAAI,CAAC,KAAKI,QAAV,EAAoB;MAClB,KAAKD,MAAL,CAAYY,GAAZ,CAAgBb,KAAhB,EAAuB,KAAKI,KAA5B,EAAiCO,gCAC5B,KAAKlB,aADuB,GAE5BK,OAF4B,CAAjC;MAIA,KAAKM,KAAL,CAAWQ,OAAX,CAAmB,mBAAnB,EAAwC;QAAEZ;MAAF,CAAxC;IACD;EACF;;EAEDc,KAAK,CAAChB,UAAkC,EAAnC,EAAuCM,QAAe,KAAKA,KAA3D,EAAgE;IACnE,IAAI,CAAC,KAAKF,QAAV,EAAoB;MAClB,OAAO,KAAKD,MAAL,CAAYa,KAAZ,CAAkBV,KAAlB,EAAuBO,gCACzB,KAAKlB,aADoB,GAEzBK,OAFyB,CAAvB,CAAP;IAID;;IACD,OAAO,EAAP;EACD;;EAEDiB,KAAK,CAACC,KAAD,EAAgB;IACnB,IAAI,CAAC,KAAKd,QAAN,IAAkBc,KAAtB,EAA6B;MAC3B,KAAKf,MAAL,CAAYc,KAAZ;MACA,KAAKX,KAAL,CAAWQ,OAAX,CAAmB,mBAAnB,EAAwC;QAAEZ,KAAK,EAAE;MAAT,CAAxC;IACD;EACF;;EAEDiB,OAAO;IACL,OAAO,KAAKhB,MAAL,CAAYgB,OAAZ,EAAP;EACD;;EAGDC,OAAO;IACL,KAAKH,KAAL,CAAW,IAAX;EACD;;AAjFuC;;AA+ExCI,YADC5B,IAAI,CAAC2B,OAAL,EACD","names":["Base","ClipboardManager","commonOptions","_a","instanceOptions","enabled","others","options","clipboard","cells","widget","disabled","init","graph","hook","createClipboard","deserialize","enable","disable","copy","Object","trigger","cut","paste","clean","force","isEmpty","dispose","__decorate"],"sourceRoot":"","sources":["../../src/graph/clipboard.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}