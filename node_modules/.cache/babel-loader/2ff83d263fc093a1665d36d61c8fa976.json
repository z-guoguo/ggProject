{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nimport { Geometry } from '.';\nvar primitiveUv1Padding = 4.0 / 64;\nvar primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;\nexport var\n/**\n * borrow from playcanvas:\n * Creates a procedural box-shaped mesh\n */\nBox = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_Geometry) {\n  _inherits(Box, _Geometry);\n\n  var _super = _createSuper(Box);\n\n  function Box() {\n    _classCallCheck(this, Box);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Box, [{\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var _this$config = this.config,\n          _this$config$widthSeg = _this$config.widthSegments,\n          widthSegments = _this$config$widthSeg === void 0 ? 1 : _this$config$widthSeg,\n          _this$config$heightSe = _this$config.heightSegments,\n          heightSegments = _this$config$heightSe === void 0 ? 1 : _this$config$heightSe,\n          _this$config$depthSeg = _this$config.depthSegments,\n          depthSegments = _this$config$depthSeg === void 0 ? 1 : _this$config$depthSeg,\n          _this$config$halfExte = _this$config.halfExtents,\n          halfExtents = _this$config$halfExte === void 0 ? vec3.fromValues(0.5, 0.5, 0.5) : _this$config$halfExte;\n      var ws = widthSegments;\n      var hs = heightSegments;\n      var ds = depthSegments;\n\n      var _halfExtents = _slicedToArray(halfExtents, 3),\n          hex = _halfExtents[0],\n          hey = _halfExtents[1],\n          hez = _halfExtents[2];\n\n      var corners = [vec3.fromValues(-hex, -hey, hez), vec3.fromValues(hex, -hey, hez), vec3.fromValues(hex, hey, hez), vec3.fromValues(-hex, hey, hez), vec3.fromValues(hex, -hey, -hez), vec3.fromValues(-hex, -hey, -hez), vec3.fromValues(-hex, hey, -hez), vec3.fromValues(hex, hey, -hez)];\n      var faceAxes = [[0, 1, 3], // FRONT\n      [4, 5, 7], // BACK\n      [3, 2, 6], // TOP\n      [1, 0, 4], // BOTTOM\n      [1, 4, 2], // RIGHT\n      [5, 0, 6] // LEFT\n      ];\n      var faceNormals = [[0, 0, 1], // FRONT\n      [0, 0, -1], // BACK\n      [0, 1, 0], // TOP\n      [0, -1, 0], // BOTTOM\n      [1, 0, 0], // RIGHT\n      [-1, 0, 0] // LEFT\n      ];\n      var sides = {\n        FRONT: 0,\n        BACK: 1,\n        TOP: 2,\n        BOTTOM: 3,\n        RIGHT: 4,\n        LEFT: 5\n      };\n      var positions = [];\n      var normals = [];\n      var uvs = [];\n      var uvs1 = [];\n      var indices = [];\n      var vcounter = 0;\n\n      var generateFace = function generateFace(side, uSegments, vSegments) {\n        var u;\n        var v;\n        var i;\n        var j;\n\n        for (i = 0; i <= uSegments; i++) {\n          for (j = 0; j <= vSegments; j++) {\n            var temp1 = vec3.create();\n            var temp2 = vec3.create();\n            var temp3 = vec3.create();\n            var r = vec3.create();\n            vec3.lerp(temp1, corners[faceAxes[side][0]], corners[faceAxes[side][1]], i / uSegments);\n            vec3.lerp(temp2, corners[faceAxes[side][0]], corners[faceAxes[side][2]], j / vSegments);\n            vec3.sub(temp3, temp2, corners[faceAxes[side][0]]);\n            vec3.add(r, temp1, temp3);\n            u = i / uSegments;\n            v = j / vSegments;\n            positions.push(r[0], r[1], r[2]);\n            normals.push(faceNormals[side][0], faceNormals[side][1], faceNormals[side][2]);\n            uvs.push(u, v); // pack as 3x2\n            // 1/3 will be empty, but it's either that or stretched pixels\n            // TODO: generate non-rectangular lightMaps, so we could use space without stretching\n\n            u /= 3;\n            v /= 3;\n            u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n            v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n            u += side % 3 / 3;\n            v += Math.floor(side / 3) / 3;\n            uvs1.push(u, v);\n\n            if (i < uSegments && j < vSegments) {\n              indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);\n              indices.push(vcounter + vSegments + 1, vcounter + vSegments + 2, vcounter + 1);\n            }\n\n            vcounter++;\n          }\n        }\n      };\n\n      generateFace(sides.FRONT, ws, hs);\n      generateFace(sides.BACK, ws, hs);\n      generateFace(sides.TOP, ws, ds);\n      generateFace(sides.BOTTOM, ws, ds);\n      generateFace(sides.RIGHT, ds, hs);\n      generateFace(sides.LEFT, ds, hs); // generate AABB\n\n      var aabb = generateAABBFromVertices(positions);\n      var component = this.getComponent();\n      component.indices = Uint32Array.from(indices);\n      component.aabb = aabb;\n      component.vertexCount = vcounter;\n      component.attributes = [{\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float2'\n        }]\n      }]; // TODO: barycentric & tangent\n    }\n  }]);\n\n  return Box;\n}(Geometry)) || _class);","map":{"version":3,"mappings":"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","names":["generateAABBFromVertices","vec3","injectable","Geometry","primitiveUv1Padding","primitiveUv1PaddingScale","Box","_inherits","_classCallCheck","_createClass","key","value","config","widthSegments","heightSegments","depthSegments","halfExtents","fromValues","ws","hs","ds","hex","hey","hez","corners","faceAxes","faceNormals","sides","FRONT","BACK","TOP","BOTTOM","RIGHT","LEFT","positions","normals","uvs","uvs1","indices","vcounter","generateFace","side","uSegments","vSegments","u","v","i","j","temp1","create","temp2","temp3","r","lerp","sub","add","push","Math","floor","aabb","component","getComponent","Uint32Array","from","vertexCount","attributes","dirty","name","data","Float32Array","arrayStride","stepMode","shaderLocation","offset","format"],"sources":["../../src/geometry/Box.ts"],"sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface IBoxGeometryParams {\n  halfExtents: vec3;\n  widthSegments: number;\n  heightSegments: number;\n  depthSegments: number;\n}\n\nconst primitiveUv1Padding = 4.0 / 64;\nconst primitiveUv1PaddingScale = 1.0 - primitiveUv1Padding * 2;\n\n@injectable()\n/**\n * borrow from playcanvas:\n * Creates a procedural box-shaped mesh\n */\nexport class Box extends Geometry<Partial<IBoxGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      widthSegments = 1,\n      heightSegments = 1,\n      depthSegments = 1,\n      halfExtents = vec3.fromValues(0.5, 0.5, 0.5),\n    } = this.config;\n    const ws = widthSegments;\n    const hs = heightSegments;\n    const ds = depthSegments;\n    const [hex, hey, hez] = halfExtents;\n\n    const corners = [\n      vec3.fromValues(-hex, -hey, hez),\n      vec3.fromValues(hex, -hey, hez),\n      vec3.fromValues(hex, hey, hez),\n      vec3.fromValues(-hex, hey, hez),\n      vec3.fromValues(hex, -hey, -hez),\n      vec3.fromValues(-hex, -hey, -hez),\n      vec3.fromValues(-hex, hey, -hez),\n      vec3.fromValues(hex, hey, -hez),\n    ];\n\n    const faceAxes = [\n      [0, 1, 3], // FRONT\n      [4, 5, 7], // BACK\n      [3, 2, 6], // TOP\n      [1, 0, 4], // BOTTOM\n      [1, 4, 2], // RIGHT\n      [5, 0, 6], // LEFT\n    ];\n\n    const faceNormals = [\n      [0, 0, 1], // FRONT\n      [0, 0, -1], // BACK\n      [0, 1, 0], // TOP\n      [0, -1, 0], // BOTTOM\n      [1, 0, 0], // RIGHT\n      [-1, 0, 0], // LEFT\n    ];\n\n    const sides = {\n      FRONT: 0,\n      BACK: 1,\n      TOP: 2,\n      BOTTOM: 3,\n      RIGHT: 4,\n      LEFT: 5,\n    };\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const uvs1: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    const generateFace = (\n      side: number,\n      uSegments: number,\n      vSegments: number,\n    ) => {\n      let u;\n      let v;\n      let i;\n      let j;\n\n      for (i = 0; i <= uSegments; i++) {\n        for (j = 0; j <= vSegments; j++) {\n          const temp1 = vec3.create();\n          const temp2 = vec3.create();\n          const temp3 = vec3.create();\n          const r = vec3.create();\n          vec3.lerp(\n            temp1,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][1]],\n            i / uSegments,\n          );\n          vec3.lerp(\n            temp2,\n            corners[faceAxes[side][0]],\n            corners[faceAxes[side][2]],\n            j / vSegments,\n          );\n          vec3.sub(temp3, temp2, corners[faceAxes[side][0]]);\n          vec3.add(r, temp1, temp3);\n          u = i / uSegments;\n          v = j / vSegments;\n\n          positions.push(r[0], r[1], r[2]);\n          normals.push(\n            faceNormals[side][0],\n            faceNormals[side][1],\n            faceNormals[side][2],\n          );\n          uvs.push(u, v);\n          // pack as 3x2\n          // 1/3 will be empty, but it's either that or stretched pixels\n          // TODO: generate non-rectangular lightMaps, so we could use space without stretching\n          u /= 3;\n          v /= 3;\n          u = u * primitiveUv1PaddingScale + primitiveUv1Padding;\n          v = v * primitiveUv1PaddingScale + primitiveUv1Padding;\n          u += (side % 3) / 3;\n          v += Math.floor(side / 3) / 3;\n          uvs1.push(u, v);\n\n          if (i < uSegments && j < vSegments) {\n            indices.push(vcounter + vSegments + 1, vcounter + 1, vcounter);\n            indices.push(\n              vcounter + vSegments + 1,\n              vcounter + vSegments + 2,\n              vcounter + 1,\n            );\n          }\n\n          vcounter++;\n        }\n      }\n    };\n\n    generateFace(sides.FRONT, ws, hs);\n    generateFace(sides.BACK, ws, hs);\n    generateFace(sides.TOP, ws, ds);\n    generateFace(sides.BOTTOM, ws, ds);\n    generateFace(sides.RIGHT, ds, hs);\n    generateFace(sides.LEFT, ds, hs);\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = vcounter;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"]},"metadata":{},"sourceType":"module"}