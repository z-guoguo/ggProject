{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { Util } from '../../../global/util';\nimport { Point, Line, Angle } from '../../../geometry';\nexport function getSourceBBox(view, options) {\n  const bbox = view.sourceBBox.clone();\n\n  if (options && options.paddingBox) {\n    return bbox.moveAndExpand(options.paddingBox);\n  }\n\n  return bbox;\n}\nexport function getTargetBBox(view, options) {\n  const bbox = view.targetBBox.clone();\n\n  if (options && options.paddingBox) {\n    return bbox.moveAndExpand(options.paddingBox);\n  }\n\n  return bbox;\n}\nexport function getSourceEndpoint(view, options) {\n  if (view.sourceAnchor) {\n    return view.sourceAnchor;\n  }\n\n  const sourceBBox = getSourceBBox(view, options);\n  return sourceBBox.getCenter();\n}\nexport function getTargetEndpoint(view, options) {\n  if (view.targetAnchor) {\n    return view.targetAnchor;\n  }\n\n  const targetBBox = getTargetBBox(view, options);\n  return targetBBox.getCenter();\n} // returns a direction index from start point to end point\n// corrects for grid deformation between start and end\n\nexport function getDirectionAngle(start, end, directionCount, grid, options) {\n  const quadrant = 360 / directionCount;\n  const angleTheta = start.theta(fixAngleEnd(start, end, grid, options));\n  const normalizedAngle = Angle.normalize(angleTheta + quadrant / 2);\n  return quadrant * Math.floor(normalizedAngle / quadrant);\n}\n\nfunction fixAngleEnd(start, end, grid, options) {\n  const step = options.step;\n  const diffX = end.x - start.x;\n  const diffY = end.y - start.y;\n  const gridStepsX = diffX / grid.x;\n  const gridStepsY = diffY / grid.y;\n  const distanceX = gridStepsX * step;\n  const distanceY = gridStepsY * step;\n  return new Point(start.x + distanceX, start.y + distanceY);\n}\n/**\n * Returns the change in direction between two direction angles.\n */\n\n\nexport function getDirectionChange(angle1, angle2) {\n  const change = Math.abs(angle1 - angle2);\n  return change > 180 ? 360 - change : change;\n} // fix direction offsets according to current grid\n\nexport function getGridOffsets(grid, options) {\n  const step = options.step;\n  options.directions.forEach(direction => {\n    direction.gridOffsetX = direction.offsetX / step * grid.x;\n    direction.gridOffsetY = direction.offsetY / step * grid.y;\n  });\n  return options.directions;\n} // get grid size in x and y dimensions, adapted to source and target positions\n\nexport function getGrid(step, source, target) {\n  return {\n    source: source.clone(),\n    x: getGridDimension(target.x - source.x, step),\n    y: getGridDimension(target.y - source.y, step)\n  };\n}\n\nfunction getGridDimension(diff, step) {\n  // return step if diff = 0\n  if (!diff) {\n    return step;\n  }\n\n  const abs = Math.abs(diff);\n  const count = Math.round(abs / step); // return `abs` if less than one step apart\n\n  if (!count) {\n    return abs;\n  } // otherwise, return corrected step\n\n\n  const roundedDiff = count * step;\n  const remainder = abs - roundedDiff;\n  const correction = remainder / count;\n  return step + correction;\n}\n\nfunction snapGrid(point, grid) {\n  const source = grid.source;\n  const x = Util.snapToGrid(point.x - source.x, grid.x) + source.x;\n  const y = Util.snapToGrid(point.y - source.y, grid.y) + source.y;\n  return new Point(x, y);\n}\n\nexport function round(point, precision) {\n  return point.round(precision);\n}\nexport function align(point, grid, precision) {\n  return round(snapGrid(point.clone(), grid), precision);\n}\nexport function getKey(point) {\n  return point.toString();\n}\nexport function normalizePoint(point) {\n  return new Point(point.x === 0 ? 0 : Math.abs(point.x) / point.x, point.y === 0 ? 0 : Math.abs(point.y) / point.y);\n}\nexport function getCost(from, anchors) {\n  let min = Infinity;\n\n  for (let i = 0, len = anchors.length; i < len; i += 1) {\n    const dist = from.manhattanDistance(anchors[i]);\n\n    if (dist < min) {\n      min = dist;\n    }\n  }\n\n  return min;\n} // Find points around the bbox taking given directions into account\n// lines are drawn from anchor in given directions, intersections recorded\n// if anchor is outside bbox, only those directions that intersect get a rect point\n// the anchor itself is returned as rect point (representing some directions)\n// (since those directions are unobstructed by the bbox)\n\nexport function getRectPoints(anchor, bbox, directionList, grid, options) {\n  const precision = options.precision;\n  const directionMap = options.directionMap;\n  const centerVector = anchor.diff(bbox.getCenter());\n  const rectPoints = Object.keys(directionMap).reduce((res, key) => {\n    if (directionList.includes(key)) {\n      const direction = directionMap[key]; // Create a line that is guaranteed to intersect the bbox if bbox\n      // is in the direction even if anchor lies outside of bbox.\n\n      const ending = new Point(anchor.x + direction.x * (Math.abs(centerVector.x) + bbox.width), anchor.y + direction.y * (Math.abs(centerVector.y) + bbox.height));\n      const intersectionLine = new Line(anchor, ending); // Get the farther intersection, in case there are two\n      // (that happens if anchor lies next to bbox)\n\n      const intersections = intersectionLine.intersect(bbox) || [];\n      let farthestIntersectionDistance;\n      let farthestIntersection = null;\n\n      for (let i = 0; i < intersections.length; i += 1) {\n        const intersection = intersections[i];\n        const distance = anchor.squaredDistance(intersection);\n\n        if (farthestIntersectionDistance == null || distance > farthestIntersectionDistance) {\n          farthestIntersectionDistance = distance;\n          farthestIntersection = intersection;\n        }\n      } // If an intersection was found in this direction, it is our rectPoint\n\n\n      if (farthestIntersection) {\n        let target = align(farthestIntersection, grid, precision); // If the rectPoint lies inside the bbox, offset it by one more step\n\n        if (bbox.containsPoint(target)) {\n          target = align(target.translate(direction.x * grid.x, direction.y * grid.y), grid, precision);\n        }\n\n        res.push(target);\n      }\n    }\n\n    return res;\n  }, []); // if anchor lies outside of bbox, add it to the array of points\n\n  if (!bbox.containsPoint(anchor)) {\n    rectPoints.push(align(anchor, grid, precision));\n  }\n\n  return rectPoints;\n} // reconstructs a route by concatenating points with their parents\n\nexport function reconstructRoute(parents, points, tailPoint, from, to) {\n  const route = [];\n  let prevDiff = normalizePoint(to.diff(tailPoint)); // tailPoint is assumed to be aligned already\n\n  let currentKey = getKey(tailPoint);\n  let parent = parents[currentKey];\n  let point;\n\n  while (parent) {\n    // point is assumed to be aligned already\n    point = points[currentKey];\n    const diff = normalizePoint(point.diff(parent));\n\n    if (!diff.equals(prevDiff)) {\n      route.unshift(point);\n      prevDiff = diff;\n    } // parent is assumed to be aligned already\n\n\n    currentKey = getKey(parent);\n    parent = parents[currentKey];\n  } // leadPoint is assumed to be aligned already\n\n\n  const leadPoint = points[currentKey];\n  const fromDiff = normalizePoint(leadPoint.diff(from));\n\n  if (!fromDiff.equals(prevDiff)) {\n    route.unshift(leadPoint);\n  }\n\n  return route;\n}","map":{"version":3,"mappings":"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","names":["Util","Point","Line","Angle","getSourceBBox","view","options","bbox","sourceBBox","clone","paddingBox","moveAndExpand","getTargetBBox","targetBBox","getSourceEndpoint","sourceAnchor","getCenter","getTargetEndpoint","targetAnchor","getDirectionAngle","start","end","directionCount","grid","quadrant","angleTheta","theta","fixAngleEnd","normalizedAngle","normalize","Math","floor","step","diffX","x","diffY","y","gridStepsX","gridStepsY","distanceX","distanceY","getDirectionChange","angle1","angle2","change","abs","getGridOffsets","directions","forEach","direction","gridOffsetX","offsetX","gridOffsetY","offsetY","getGrid","source","target","getGridDimension","diff","count","round","roundedDiff","remainder","correction","snapGrid","point","snapToGrid","precision","align","getKey","toString","normalizePoint","getCost","from","anchors","min","Infinity","i","len","length","dist","manhattanDistance","getRectPoints","anchor","directionList","directionMap","centerVector","rectPoints","Object","keys","reduce","res","key","includes","ending","width","height","intersectionLine","intersections","intersect","farthestIntersectionDistance","farthestIntersection","intersection","distance","squaredDistance","containsPoint","translate","push","reconstructRoute","parents","points","tailPoint","to","route","prevDiff","currentKey","parent","equals","unshift","leadPoint","fromDiff"],"sourceRoot":"","sources":["../../../../src/registry/router/manhattan/util.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}