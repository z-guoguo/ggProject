{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkNonEmpty, checkRowIndices, checkColumnIndices } from './util';\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n\n    let newMatrix = new Matrix(newRows, newColumns);\n\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      random = Math.random\n    } = options;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1000,\n      random = Math.random\n    } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      i++;\n    }\n\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n\n      i++;\n    }\n\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n\n        h++;\n        k++;\n      }\n    }\n\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n\n        h--;\n      }\n    }\n\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      rows = 1,\n      columns = 1\n    } = options;\n\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row':\n        {\n          const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[row]) {\n                max[row] = this.get(row, column);\n              }\n            }\n          }\n\n          return max;\n        }\n\n      case 'column':\n        {\n          const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max[column]) {\n                max[column] = this.get(row, column);\n              }\n            }\n          }\n\n          return max;\n        }\n\n      case undefined:\n        {\n          let max = this.get(0, 0);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) > max) {\n                max = this.get(row, column);\n              }\n            }\n          }\n\n          return max;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row':\n        {\n          const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[row]) {\n                min[row] = this.get(row, column);\n              }\n            }\n          }\n\n          return min;\n        }\n\n      case 'column':\n        {\n          const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min[column]) {\n                min[column] = this.get(row, column);\n              }\n            }\n          }\n\n          return min;\n        }\n\n      case undefined:\n        {\n          let min = this.get(0, 0);\n\n          for (let row = 0; row < this.rows; row++) {\n            for (let column = 0; column < this.columns; column++) {\n              if (this.get(row, column) < min) {\n                min = this.get(row, column);\n              }\n            }\n          }\n\n          return min;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n\n    let dot = 0;\n\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n    let result = new Matrix(m, p);\n    let Bcolj = new Float64Array(n);\n\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1); // Compute intermediate values.\n\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22); // Combine intermediate values into the output.\n\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n    } // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n\n\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    } // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c); // Our recursive multiplication function.\n\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      } // Apply dynamic padding.\n\n\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10); // Subdivide input matrices.\n\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1); // Compute intermediate values.\n\n      let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n      let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols); // Combine intermediate values into the output.\n\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6); // Crop output to the desired size (undo dynamic padding).\n\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n\n      if (row.length > 0) {\n        rescale(row, {\n          min,\n          max,\n          output: row\n        });\n      }\n\n      newMatrix.setRow(i, row);\n    }\n\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column\n        });\n      }\n\n      newMatrix.setColumn(i, column);\n    }\n\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n    let result = new Matrix(m * p, n * q);\n\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n\n    if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n\n    if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (matrix.isEmpty()) {\n      return this;\n    }\n\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n\n      case 'column':\n        return sumByColumn(this);\n\n      case undefined:\n        return sumAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n\n      case 'column':\n        return productByColumn(this);\n\n      case undefined:\n        return productAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n\n    switch (by) {\n      case 'row':\n        {\n          for (let i = 0; i < this.rows; i++) {\n            sum[i] /= this.columns;\n          }\n\n          return sum;\n        }\n\n      case 'column':\n        {\n          for (let i = 0; i < this.columns; i++) {\n            sum[i] /= this.rows;\n          }\n\n          return sum;\n        }\n\n      case undefined:\n        return sum / this.size;\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      unbiased = true,\n      mean = this.mean(by)\n    } = options;\n\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByRow(this, unbiased, mean);\n        }\n\n      case 'column':\n        {\n          if (!isAnyArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByColumn(this, unbiased, mean);\n        }\n\n      case undefined:\n        {\n          if (typeof mean !== 'number') {\n            throw new TypeError('mean must be a number');\n          }\n\n          return varianceAll(this, unbiased, mean);\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    const variance = this.variance(by, options);\n\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      center = this.mean(by)\n    } = options;\n\n    switch (by) {\n      case 'row':\n        {\n          if (!isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByRow(this, center);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (!isAnyArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByColumn(this, center);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (typeof center !== 'number') {\n            throw new TypeError('center must be a number');\n          }\n\n          centerAll(this, center);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    let scale = options.scale;\n\n    switch (by) {\n      case 'row':\n        {\n          if (scale === undefined) {\n            scale = getScaleByRow(this);\n          } else if (!isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByRow(this, scale);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (scale === undefined) {\n            scale = getScaleByColumn(this);\n          } else if (!isAnyArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByColumn(this, scale);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (scale === undefined) {\n            scale = getScaleAll(this);\n          } else if (typeof scale !== 'number') {\n            throw new TypeError('scale must be a number');\n          }\n\n          scaleAll(this, scale);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n}\nAbstractMatrix.prototype.klass = 'Matrix';\n\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every(element => {\n    return typeof element === 'number';\n  });\n} // Synonyms\n\n\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n\n      if (typeof nColumns !== 'number') {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      newRow[j++] = array[i];\n\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns += 1;\n    return this;\n  }\n\n}\ninstallMathOperations(AbstractMatrix, Matrix);","map":{"version":3,"names":["isAnyArray","rescale","inspectMatrix","inspectMatrixWithOptions","installMathOperations","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","varianceByColumn","varianceAll","centerByRow","centerByColumn","centerAll","scaleByRow","scaleByColumn","scaleAll","getScaleByRow","getScaleByColumn","getScaleAll","checkRowVector","checkRowIndex","checkColumnIndex","checkColumnVector","checkRange","checkNonEmpty","checkRowIndices","checkColumnIndices","AbstractMatrix","from1DArray","newRows","newColumns","newData","length","RangeError","newMatrix","Matrix","row","column","set","rowVector","vector","i","columnVector","zeros","rows","columns","ones","fill","rand","options","TypeError","random","Math","matrix","j","randInt","min","max","Number","isInteger","interval","value","round","eye","undefined","diag","data","l","matrix1","matrix2","checkMatrix","result","get","isMatrix","klass","size","apply","callback","call","to1DArray","array","push","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isEmpty","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","factor","reducedEchelonForm","m","n","maxRow","p","pivot","Error","repeat","setSubMatrix","neg","mulS","getRow","index","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","Array","NEGATIVE_INFINITY","maxIndex","v","idx","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","sqrt","cumulativeSum","sum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","mmulStrassen","y","x","r1","c1","r2","c2","console","warn","embed","mat","cols","r","c","resultat","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","output","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","startRow","endRow","startColumn","endColumn","subMatrixRow","indices","subMatrixColumn","selection","rowIndices","columnIndices","rowIndex","columnIndex","trace","product","mean","variance","unbiased","standardDeviation","center","scale","toString","prototype","Symbol","for","isArrayOfNumbers","every","element","randomInt","diagonal","identity","negate","tensorProduct","constructor","nRows","nColumns","arrayData","from","removeRow","splice","addRow","removeColumn","newRow","addColumn"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/ml-matrix/src/matrix.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns >= 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}