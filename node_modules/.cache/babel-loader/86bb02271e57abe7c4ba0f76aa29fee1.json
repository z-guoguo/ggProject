{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nexport var Plane = /*#__PURE__*/function () {\n  /**\n   * lookup table for p-vertex & n-vertex when doing frustum culling\n   */\n  function Plane(distance, normal) {\n    _classCallCheck(this, Plane);\n\n    this.distance = void 0;\n    this.normal = void 0;\n    this.pnVertexFlag = void 0;\n    this.distance = distance || 0;\n    this.normal = normal || vec3.fromValues(0, 1, 0);\n    this.updatePNVertexFlag();\n  }\n\n  _createClass(Plane, [{\n    key: \"updatePNVertexFlag\",\n    value: function updatePNVertexFlag() {\n      this.pnVertexFlag = (Number(this.normal[0] >= 0) << 8) + (Number(this.normal[1] >= 0) << 4) + Number(this.normal[2] >= 0);\n    }\n  }, {\n    key: \"distanceToPoint\",\n    value: function distanceToPoint(point) {\n      return vec3.dot(point, this.normal) - this.distance;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var invLen = 1 / vec3.len(this.normal);\n      vec3.scale(this.normal, this.normal, invLen);\n      this.distance *= invLen;\n    }\n  }, {\n    key: \"intersectsLine\",\n    value: function intersectsLine(start, end, point) {\n      var d0 = this.distanceToPoint(start);\n      var d1 = this.distanceToPoint(end);\n      var t = d0 / (d0 - d1);\n      var intersects = t >= 0 && t <= 1;\n\n      if (intersects && point) {\n        vec3.lerp(point, start, end, t);\n      }\n\n      return intersects;\n    }\n  }]);\n\n  return Plane;\n}();","map":{"version":3,"mappings":";;AAAA,SAASA,IAAT,QAAqB,WAArB;AAEA,WAAaC,KAAb;EAIE;AACF;AACA;EAGE,eAAYC,QAAZ,EAA+BC,MAA/B,EAA8C;IAAAC;;IAAA,KARvCF,QAQuC;IAAA,KAPvCC,MAOuC;IAAA,KAFvCE,YAEuC;IAC5C,KAAKH,QAAL,GAAgBA,QAAQ,IAAI,CAA5B;IACA,KAAKC,MAAL,GAAcA,MAAM,IAAIH,IAAI,CAACM,UAALN,CAAgB,CAAhBA,EAAmB,CAAnBA,EAAsB,CAAtBA,CAAxB;IACA,KAAKO,kBAAL;EACD;;EAbHC;IAAAC;IAAAC,qCAe8B;MAC1B,KAAKL,YAAL,GACE,CAACM,MAAM,CAAC,KAAKR,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAANQ,IAA+B,CAAhC,KACCA,MAAM,CAAC,KAAKR,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAANQ,IAA+B,CADhC,IAEAA,MAAM,CAAC,KAAKR,MAAL,CAAY,CAAZ,KAAkB,CAAnB,CAHR;IAID;EApBH;IAAAM;IAAAC,gCAsByBE,KAtBzB,EAsBsC;MAClC,OAAOZ,IAAI,CAACa,GAALb,CAASY,KAATZ,EAAgB,KAAKG,MAArBH,IAA+B,KAAKE,QAA3C;IACD;EAxBH;IAAAO;IAAAC,4BA0BqB;MACjB,IAAMI,MAAM,GAAG,IAAId,IAAI,CAACe,GAALf,CAAS,KAAKG,MAAdH,CAAnB;MACAA,IAAI,CAACgB,KAALhB,CAAW,KAAKG,MAAhBH,EAAwB,KAAKG,MAA7BH,EAAqCc,MAArCd;MACA,KAAKE,QAAL,IAAiBY,MAAjB;IACD;EA9BH;IAAAL;IAAAC,+BAgCwBO,KAhCxB,EAgCqCC,GAhCrC,EAgCgDN,KAhChD,EAgC8D;MAC1D,IAAMO,EAAE,GAAG,KAAKC,eAAL,CAAqBH,KAArB,CAAX;MACA,IAAMI,EAAE,GAAG,KAAKD,eAAL,CAAqBF,GAArB,CAAX;MACA,IAAMI,CAAC,GAAGH,EAAE,IAAIA,EAAE,GAAGE,EAAT,CAAZ;MACA,IAAME,UAAU,GAAGD,CAAC,IAAI,CAALA,IAAUA,CAAC,IAAI,CAAlC;;MACA,IAAIC,UAAU,IAAIX,KAAlB,EAAyB;QACvBZ,IAAI,CAACwB,IAALxB,CAAUY,KAAVZ,EAAiBiB,KAAjBjB,EAAwBkB,GAAxBlB,EAA6BsB,CAA7BtB;MACD;;MACD,OAAOuB,UAAP;IACD;EAzCH;;EAAA;AAAA","names":["vec3","Plane","distance","normal","_classCallCheck","pnVertexFlag","fromValues","updatePNVertexFlag","_createClass","key","value","Number","point","dot","invLen","len","scale","start","end","d0","distanceToPoint","d1","t","intersects","lerp"],"sources":["../../src/shape/Plane.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\n\nexport class Plane {\n  public distance: number;\n  public normal: vec3;\n\n  /**\n   * lookup table for p-vertex & n-vertex when doing frustum culling\n   */\n  public pnVertexFlag: number;\n\n  constructor(distance?: number, normal?: vec3) {\n    this.distance = distance || 0;\n    this.normal = normal || vec3.fromValues(0, 1, 0);\n    this.updatePNVertexFlag();\n  }\n\n  public updatePNVertexFlag() {\n    this.pnVertexFlag =\n      (Number(this.normal[0] >= 0) << 8) +\n      (Number(this.normal[1] >= 0) << 4) +\n      Number(this.normal[2] >= 0);\n  }\n\n  public distanceToPoint(point: vec3) {\n    return vec3.dot(point, this.normal) - this.distance;\n  }\n\n  public normalize() {\n    const invLen = 1 / vec3.len(this.normal);\n    vec3.scale(this.normal, this.normal, invLen);\n    this.distance *= invLen;\n  }\n\n  public intersectsLine(start: vec3, end: vec3, point?: vec3) {\n    const d0 = this.distanceToPoint(start);\n    const d1 = this.distanceToPoint(end);\n    const t = d0 / (d0 - d1);\n    const intersects = t >= 0 && t <= 1;\n    if (intersects && point) {\n      vec3.lerp(point, start, end, t);\n    }\n    return intersects;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}