{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n\n    if (typeof id === 'undefined') {\n      id = uniqueId(itemType);\n    } else if (typeof id !== 'string') {\n      id = String(id);\n    }\n\n    this.get('model').id = id;\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options; // merge the stateStyles from item and shape\n\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1); // The text's position and matrix is not allowed to be affected by states\n\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle'); // let styles: ShapeStyle = {};\n\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {}; // 获取当前状态样式\n\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key]; // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      }; // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n\n\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n\n    if (name) {\n      currentShape = group['shapeMap'][name]; // group.find((element) => element.get('name') === name) as IShapeBase;\n    } else {\n      currentShape = this.getKeyShape();\n    }\n\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n      filterStateName = \"\".concat(state, \":\");\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(updateType); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model'); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n      Object.assign(model, cfg); // 如果 x,y 有变化，先重置位置\n\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape(updateType);\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新（即有继承的/复写的 update 方法，即 update 方法没有被复写为 undefined）\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType); // 更新完以后重新设置原始样式\n\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新后重置节点状态\n\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;","map":{"version":3,"names":["__assign","each","isPlainObject","isString","isBoolean","mix","deepMix","clone","Shape","getBBox","translate","uniqueId","CACHE_BBOX","CACHE_CANVAS_BBOX","ARROWS","ItemBase","cfg","_cfg","destroyed","defaultCfg","id","undefined","type","model","group","animate","visible","locked","event","keyShape","states","Object","assign","getDefaultCfg","get","itemType","String","set","init","draw","shapeType","shape","shapeFactory","options","stateStyles","styles","prototype","calculateBBox","bbox","x","minX","y","minY","width","maxX","height","maxY","centerX","centerY","calculateCanvasBBox","drawInner","self","clear","changeVisibility","updatePosition","getShapeCfg","setOriginStyle","restoreStates","children","getKeyShape","keyShapeName","originStyles","i","length","child","name_1","attr","getShapeStyleByName","matrix","keyShapeStyle","path","shapeName","styles_1","currentStatesStyle_1","getCurrentStatesStyle","_loop_1","name_2","shapeAttrs","shapeStateStyle_1","keys","forEach","key","value","shapeAttrs_1","keyShapeStateStyles_1","styleKey","subStyle","state","setState","getFactory","val","clearCache","beforeDraw","afterDraw","afterUpdate","name","currentShape","styles_2","updateType","newModel","style","getStateStyle","stateStyle","getOriginStyle","getStates","stateName","filterStateName","concat","newStates","index","indexOf","push","splice","filterStates","filter","includes","clearStates","originStates","getContainer","getModel","getType","getID","isItem","hasState","refresh","updateShape","getUpdateType","update","oriVisible","cfgVisible","originPosition","isNaN","shouldUpdate","updateCfg","baseUpdate","getMatrix","resetMatrix","getCanvasBBox","toFront","toBack","show","hide","isVisible","enableCapture","enable","destroy","stopAnimate","remove"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-core/es/item/item.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isPlainObject, isString, isBoolean, mix, deepMix, clone } from '@antv/util';\nimport Shape from '../element/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nimport { uniqueId } from '../util/base';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\nvar ARROWS = ['startArrow', 'endArrow'];\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var model = this.get('model');\n    var id = model.id;\n    var itemType = this.get('type');\n\n    if (typeof id === 'undefined') {\n      id = uniqueId(itemType);\n    } else if (typeof id !== 'string') {\n      id = String(id);\n    }\n\n    this.get('model').id = id;\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n    var shapeType = model.shape || model.type || (itemType === 'edge' ? 'line' : 'circle');\n    var shapeFactory = this.get('shapeFactory');\n\n    if (shapeFactory && shapeFactory[shapeType]) {\n      var options = shapeFactory[shapeType].options; // merge the stateStyles from item and shape\n\n      if (options && options.stateStyles) {\n        var styles = this.get('styles') || model.stateStyles;\n        styles = deepMix({}, options.stateStyles, styles);\n        this.set('styles', styles);\n      }\n    }\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function () {\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    var keyShapeName = keyShape.get('name');\n\n    if (!this.get('originStyle')) {\n      // 第一次 set originStyle，直接拿首次渲染所有图形的 attrs\n      var originStyles = {};\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var shapeType = child.get('type');\n        var name_1 = child.get('name');\n\n        if (name_1 && name_1 !== keyShapeName) {\n          originStyles[name_1] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1); // The text's position and matrix is not allowed to be affected by states\n\n          if (shapeType === 'text' && originStyles[name_1]) {\n            delete originStyles[name_1].x;\n            delete originStyles[name_1].y;\n            delete originStyles[name_1].matrix;\n          }\n        } else {\n          var keyShapeStyle = self.getShapeStyleByName(); // 可优化，需要去除 child.attr 中其他 shape 名的对象\n\n          delete keyShapeStyle.path;\n          delete keyShapeStyle.matrix;\n\n          if (!keyShapeName) {\n            Object.assign(originStyles, keyShapeStyle);\n          } else {\n            // 若 keyShape 有 name 且 !name，这个图形不是 keyShape，给这个图形一个 name\n            if (!name_1) {\n              var shapeName = uniqueId('shape');\n              child.set('name', shapeName);\n              group['shapeMap'][shapeName] = child;\n              originStyles[shapeName] = shapeType !== 'image' ? clone(child.attr()) : self.getShapeStyleByName(name_1);\n            } else {\n              originStyles[keyShapeName] = keyShapeStyle;\n            }\n          }\n        }\n      }\n\n      self.set('originStyle', originStyles);\n    } else {\n      // 第二次 set originStyles，需要找到不是 stateStyles 的样式，更新到 originStyles 中\n      // 上一次设置的 originStyle，是初始的 shape attrs\n      var styles_1 = this.get('originStyle'); // let styles: ShapeStyle = {};\n\n      if (keyShapeName && !styles_1[keyShapeName]) styles_1[keyShapeName] = {}; // 获取当前状态样式\n\n      var currentStatesStyle_1 = this.getCurrentStatesStyle();\n\n      var _loop_1 = function _loop_1(i) {\n        var child = children[i];\n        var name_2 = child.get('name');\n        var shapeAttrs = child.attr();\n\n        if (name_2 && name_2 !== keyShapeName) {\n          // 有 name 的非 keyShape 图形\n          var shapeStateStyle_1 = currentStatesStyle_1[name_2];\n          if (!styles_1[name_2]) styles_1[name_2] = {};\n\n          if (shapeStateStyle_1) {\n            Object.keys(shapeAttrs).forEach(function (key) {\n              var value = shapeAttrs[key];\n              if (value !== shapeStateStyle_1[key]) styles_1[name_2][key] = value;\n            });\n          } else {\n            styles_1[name_2] = child.get('type') !== 'image' ? clone(shapeAttrs) : self.getShapeStyleByName(name_2);\n          }\n        } else {\n          var shapeAttrs_1 = child.attr();\n          var keyShapeStateStyles_1 = {};\n          Object.keys(currentStatesStyle_1).forEach(function (styleKey) {\n            var subStyle = currentStatesStyle_1[styleKey];\n\n            if (styleKey === keyShapeName || !isPlainObject(subStyle)) {\n              keyShapeStateStyles_1[styleKey] = subStyle;\n            }\n          });\n          Object.keys(shapeAttrs_1).forEach(function (key) {\n            var value = shapeAttrs_1[key]; // 如果是对象且不是 arrow，则是其他 shape 的样式\n            // if (isPlainObject(value) && ARROWS.indexOf(name) === -1) return;\n\n            if (keyShapeStateStyles_1[key] !== value) {\n              if (keyShapeName) styles_1[keyShapeName][key] = value;else styles_1[key] = value;\n            }\n          });\n        }\n      }; // 遍历当前所有图形的 attrs，找到不是 stateStyles 的样式更新到 originStyles 中\n\n\n      for (var i = 0; i < children.length; i++) {\n        _loop_1(i);\n      }\n\n      delete styles_1.path;\n      delete styles_1.matrix;\n      delete styles_1.x;\n      delete styles_1.y;\n\n      if (styles_1[keyShapeName]) {\n        delete styles_1[keyShapeName].x;\n        delete styles_1[keyShapeName].y;\n        delete styles_1[keyShapeName].matrix;\n        delete styles_1[keyShapeName].path;\n      }\n\n      self.set('originStyle', styles_1);\n    }\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape;\n\n    if (name) {\n      currentShape = group['shapeMap'][name]; // group.find((element) => element.get('name') === name) as IShapeBase;\n    } else {\n      currentShape = this.getKeyShape();\n    }\n\n    if (currentShape) {\n      var styles_2 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img' || isString(val)) {\n          styles_2[key] = val;\n        }\n      });\n      return styles_2;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model, updateType) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    var states = self.getStates();\n\n    if (!states || !states.length) {\n      return this.get('originStyle');\n    }\n\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = \"\".concat(state, \":\").concat(value);\n      filterStateName = \"\".concat(state, \":\");\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function (updateType) {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(updateType); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.getUpdateType = function (cfg) {\n    return undefined;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg, updateType) {\n    if (updateType === void 0) {\n      updateType = undefined;\n    }\n\n    var model = this.get('model'); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (updateType === 'move') {\n      this.updatePosition(cfg);\n    } else {\n      var oriVisible = model.visible;\n      var cfgVisible = cfg.visible;\n      if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n      var originPosition = {\n        x: model.x,\n        y: model.y\n      };\n      cfg.x = isNaN(+cfg.x) ? model.x : +cfg.x;\n      cfg.y = isNaN(+cfg.y) ? model.y : +cfg.y;\n      var styles = this.get('styles');\n\n      if (cfg.stateStyles) {\n        // 更新 item 时更新 this.get('styles') 中的值\n        var stateStyles = cfg.stateStyles;\n        mix(styles, stateStyles);\n        delete cfg.stateStyles;\n      } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n      Object.assign(model, cfg); // 如果 x,y 有变化，先重置位置\n\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape(updateType);\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function (updateType) {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新（即有继承的/复写的 update 方法，即 update 方法没有被复写为 undefined）\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model, updateType);\n      shapeFactory.baseUpdate(shape, updateCfg, this, updateType); // 更新完以后重新设置原始样式\n\n      if (updateType !== 'move') this.setOriginStyle();\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新后重置节点状态\n\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNaN(+cfg.x) ? +model.x : +cfg.x;\n    var y = isNaN(+cfg.y) ? +model.y : +cfg.y;\n    var group = this.get('group');\n\n    if (isNaN(x) || isNaN(y)) {\n      return false;\n    }\n\n    model.x = x;\n    model.y = y;\n    var matrix = group.getMatrix();\n    if (matrix && matrix[6] === x && matrix[7] === y) return false;\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    this.clearCache(); // 位置更新后需要清除缓存\n\n    return true;\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      group['shapeMap'] = {};\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;"],"mappings":"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"},"metadata":{},"sourceType":"module"}