{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-56cc1ecc\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"antv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, \" import G6 from '@antv/g6'; /** * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。 */ let addedCount = 0; // Register a custom behavior: add a node when user click the blank part of canvas G6.registerBehavior('click-add-node', { // Set the events and the corresponding responsing function for this behavior getEvents() { // The event is canvas:click, the responsing function is onClick return { 'canvas:click': 'onClick', }; }, // Click event onClick(ev) { const self = this; const graph = self.graph; // Add a new node graph.addItem('node', { x: ev.canvasX, y: ev.canvasY, id: `node-${addedCount}`, // Generate the unique id }); addedCount++; }, }); // Register a custom behavior: click two end nodes to add an edge G6.registerBehavior('click-add-edge', { // Set the events and the corresponding responsing function for this behavior getEvents() { return { 'node:click': 'onClick', // The event is canvas:click, the responsing function is onClick mousemove: 'onMousemove', // The event is mousemove, the responsing function is onMousemove 'edge:click': 'onEdgeClick', // The event is edge:click, the responsing function is onEdgeClick }; }, // The responsing function for node:click defined in getEvents onClick(ev) { const self = this; const node = ev.item; const graph = self.graph; // The position where the mouse clicks const point = { x: ev.x, y: ev.y }; const model = node.getModel(); if (self.addingEdge && self.edge) { graph.updateItem(self.edge, { target: model.id, }); self.edge = null; self.addingEdge = false; } else { // Add anew edge, the end node is the current node user clicks self.edge = graph.addItem('edge', { source: model.id, target: model.id, }); self.addingEdge = true; } }, // The responsing function for mousemove defined in getEvents onMousemove(ev) { const self = this; // The current position the mouse clicks const point = { x: ev.x, y: ev.y }; if (self.addingEdge && self.edge) { // Update the end node to the current node the mouse clicks self.graph.updateItem(self.edge, { target: point, }); } }, // The responsing function for edge:click defined in getEvents onEdgeClick(ev) { const self = this; const currentEdge = ev.item; if (self.addingEdge && self.edge === currentEdge) { self.graph.removeItem(self.edge); self.edge = null; self.addingEdge = false; } }, }); // Initial data const data = { nodes: [ { id: 'node1', x: 100, y: 200, }, { id: 'node2', x: 300, y: 200, }, { id: 'node3', x: 300, y: 300, }, ], edges: [ { id: 'edge1', target: 'node2', source: 'node1', }, ], }; const container = document.getElementById('container'); // Add a selector to DOM const selector = document.createElement('select'); selector.id = 'selector'; const selection1 = document.createElement('option'); selection1.value = 'default'; selection1.innerHTML = 'Default Mode'; const selection2 = document.createElement('option'); selection2.value = 'addNode'; selection2.innerHTML = 'Add Node (By clicking canvas)'; const selection3 = document.createElement('option'); selection3.value = 'addEdge'; selection3.innerHTML = 'Add Edge (By clicking two end nodes)'; selector.appendChild(selection1); selector.appendChild(selection2); selector.appendChild(selection3); container.appendChild(selector); const width = container.scrollWidth; const height = (container.scrollHeight || 500) - 30; const graph = new G6.Graph({ container: 'container', width, height, // The sets of behavior modes modes: { // Defualt mode default: ['drag-node', 'click-select'], // Adding node mode addNode: ['click-add-node', 'click-select'], // Adding edge mode addEdge: ['click-add-edge', 'click-select'], }, // The node styles in different states nodeStateStyles: { // The node styles in selected state selected: { stroke: '#666', lineWidth: 2, fill: 'steelblue', }, }, }); graph.data(data); graph.render(); // Listen to the selector, change the mode when the selector is changed selector.addEventListener('change', (e) => { const value = e.target.value; // change the behavior mode graph.setMode(value); }); if (typeof window !== 'undefined') window.onresize = () => { if (!graph || graph.get('destroyed')) return; if (!container || !container.scrollWidth || !container.scrollHeight) return; graph.changeSize(container.scrollWidth, container.scrollHeight - 30); }; \");\n}","map":{"version":3,"mappings":";;;;;EACSA,KAAK,EAAC;;;uBAAXC,oBA+KM,KA/KN,cAAkB,upIAAlB","names":["class","_createElementBlock"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antv/index.vue"],"sourcesContent":["<template>\n    <div class=\"antv\">\n        import G6 from '@antv/g6';\n\n/**\n * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n */\nlet addedCount = 0;\n// Register a custom behavior: add a node when user click the blank part of canvas\nG6.registerBehavior('click-add-node', {\n  // Set the events and the corresponding responsing function for this behavior\n  getEvents() {\n    // The event is canvas:click, the responsing function is onClick\n    return {\n      'canvas:click': 'onClick',\n    };\n  },\n  // Click event\n  onClick(ev) {\n    const self = this;\n    const graph = self.graph;\n    // Add a new node\n    graph.addItem('node', {\n      x: ev.canvasX,\n      y: ev.canvasY,\n      id: `node-${addedCount}`, // Generate the unique id\n    });\n    addedCount++;\n  },\n});\n// Register a custom behavior: click two end nodes to add an edge\nG6.registerBehavior('click-add-edge', {\n  // Set the events and the corresponding responsing function for this behavior\n  getEvents() {\n    return {\n      'node:click': 'onClick', // The event is canvas:click, the responsing function is onClick\n      mousemove: 'onMousemove', // The event is mousemove, the responsing function is onMousemove\n      'edge:click': 'onEdgeClick', // The event is edge:click, the responsing function is onEdgeClick\n    };\n  },\n  // The responsing function for node:click defined in getEvents\n  onClick(ev) {\n    const self = this;\n    const node = ev.item;\n    const graph = self.graph;\n    // The position where the mouse clicks\n    const point = { x: ev.x, y: ev.y };\n    const model = node.getModel();\n    if (self.addingEdge && self.edge) {\n      graph.updateItem(self.edge, {\n        target: model.id,\n      });\n\n      self.edge = null;\n      self.addingEdge = false;\n    } else {\n      // Add anew edge, the end node is the current node user clicks\n      self.edge = graph.addItem('edge', {\n        source: model.id,\n        target: model.id,\n      });\n      self.addingEdge = true;\n    }\n  },\n  // The responsing function for mousemove defined in getEvents\n  onMousemove(ev) {\n    const self = this;\n    // The current position the mouse clicks\n    const point = { x: ev.x, y: ev.y };\n    if (self.addingEdge && self.edge) {\n      // Update the end node to the current node the mouse clicks\n      self.graph.updateItem(self.edge, {\n        target: point,\n      });\n    }\n  },\n  // The responsing function for edge:click defined in getEvents\n  onEdgeClick(ev) {\n    const self = this;\n    const currentEdge = ev.item;\n    if (self.addingEdge && self.edge === currentEdge) {\n      self.graph.removeItem(self.edge);\n      self.edge = null;\n      self.addingEdge = false;\n    }\n  },\n});\n// Initial data\nconst data = {\n  nodes: [\n    {\n      id: 'node1',\n      x: 100,\n      y: 200,\n    },\n    {\n      id: 'node2',\n      x: 300,\n      y: 200,\n    },\n    {\n      id: 'node3',\n      x: 300,\n      y: 300,\n    },\n  ],\n  edges: [\n    {\n      id: 'edge1',\n      target: 'node2',\n      source: 'node1',\n    },\n  ],\n};\n\nconst container = document.getElementById('container');\n\n// Add a selector to DOM\nconst selector = document.createElement('select');\nselector.id = 'selector';\nconst selection1 = document.createElement('option');\nselection1.value = 'default';\nselection1.innerHTML = 'Default Mode';\nconst selection2 = document.createElement('option');\nselection2.value = 'addNode';\nselection2.innerHTML = 'Add Node (By clicking canvas)';\nconst selection3 = document.createElement('option');\nselection3.value = 'addEdge';\nselection3.innerHTML = 'Add Edge (By clicking two end nodes)';\nselector.appendChild(selection1);\nselector.appendChild(selection2);\nselector.appendChild(selection3);\ncontainer.appendChild(selector);\n\nconst width = container.scrollWidth;\nconst height = (container.scrollHeight || 500) - 30;\nconst graph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  // The sets of behavior modes\n  modes: {\n    // Defualt mode\n    default: ['drag-node', 'click-select'],\n    // Adding node mode\n    addNode: ['click-add-node', 'click-select'],\n    // Adding edge mode\n    addEdge: ['click-add-edge', 'click-select'],\n  },\n  // The node styles in different states\n  nodeStateStyles: {\n    // The node styles in selected state\n    selected: {\n      stroke: '#666',\n      lineWidth: 2,\n      fill: 'steelblue',\n    },\n  },\n});\ngraph.data(data);\ngraph.render();\n\n// Listen to the selector, change the mode when the selector is changed\nselector.addEventListener('change', (e) => {\n  const value = e.target.value;\n  // change the behavior mode\n  graph.setMode(value);\n});\n\nif (typeof window !== 'undefined')\n  window.onresize = () => {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n  };\n\n    </div>\n</template>\n<script>\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n    name: 'antV',\n    setup() {\n        const data = {\n\n        }\n    },\n})\n</script>\n<style lang=\"less\" scoped>\n.antv {\n    height: 100%;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}