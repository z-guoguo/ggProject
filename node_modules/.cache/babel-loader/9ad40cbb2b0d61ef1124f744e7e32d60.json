{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Base } from './base';\nimport { SizeSensor } from '../util';\nexport class SizeManager extends Base {\n  hasScroller() {\n    return this.graph.scroller.widget != null;\n  }\n\n  getContainer() {\n    return this.hasScroller() ? this.graph.scroller.widget.container : this.graph.container;\n  }\n\n  init() {\n    const autoResize = this.options.autoResize;\n\n    if (autoResize) {\n      const target = typeof autoResize === 'boolean' ? this.getContainer() : autoResize;\n      SizeSensor.bind(target, () => {\n        const container = this.getContainer(); // container is border-box\n\n        const width = container.offsetWidth;\n        const height = container.offsetHeight;\n        this.resize(width, height);\n      });\n    }\n  }\n\n  resize(width, height) {\n    if (this.hasScroller()) {\n      this.resizeScroller(width, height);\n    } else {\n      this.resizeGraph(width, height);\n    }\n  }\n\n  resizeGraph(width, height) {\n    this.graph.transform.resize(width, height);\n  }\n\n  resizeScroller(width, height) {\n    this.graph.scroller.resize(width, height);\n  }\n\n  resizePage(width, height) {\n    const instance = this.graph.scroller.widget;\n\n    if (instance) {\n      instance.updatePageSize(width, height);\n    }\n  }\n\n  dispose() {\n    SizeSensor.clear(this.getContainer());\n  }\n\n}\n\n__decorate([Base.dispose()], SizeManager.prototype, \"dispose\", null);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,OAAM,MAAOC,WAAP,SAA2BF,IAA3B,CAA+B;EACzBG,WAAW;IACnB,OAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,IAA8B,IAArC;EACD;;EAESC,YAAY;IACpB,OAAO,KAAKJ,WAAL,KACH,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,MAApB,CAA4BE,SADzB,GAEH,KAAKJ,KAAL,CAAWI,SAFf;EAGD;;EAESC,IAAI;IACZ,MAAMC,UAAU,GAAG,KAAKC,OAAL,CAAaD,UAAhC;;IACA,IAAIA,UAAJ,EAAgB;MACd,MAAME,MAAM,GACV,OAAOF,UAAP,KAAsB,SAAtB,GACI,KAAKH,YAAL,EADJ,GAEKG,UAHP;MAKAT,UAAU,CAACY,IAAX,CAAgBD,MAAhB,EAAwB,MAAK;QAC3B,MAAMJ,SAAS,GAAG,KAAKD,YAAL,EAAlB,CAD2B,CAE3B;;QACA,MAAMO,KAAK,GAAGN,SAAS,CAACO,WAAxB;QACA,MAAMC,MAAM,GAAGR,SAAS,CAACS,YAAzB;QACA,KAAKC,MAAL,CAAYJ,KAAZ,EAAmBE,MAAnB;MACD,CAND;IAOD;EACF;;EAEDE,MAAM,CAACJ,KAAD,EAAiBE,MAAjB,EAAgC;IACpC,IAAI,KAAKb,WAAL,EAAJ,EAAwB;MACtB,KAAKgB,cAAL,CAAoBL,KAApB,EAA2BE,MAA3B;IACD,CAFD,MAEO;MACL,KAAKI,WAAL,CAAiBN,KAAjB,EAAwBE,MAAxB;IACD;EACF;;EAEDI,WAAW,CAACN,KAAD,EAAiBE,MAAjB,EAAgC;IACzC,KAAKZ,KAAL,CAAWiB,SAAX,CAAqBH,MAArB,CAA4BJ,KAA5B,EAAmCE,MAAnC;EACD;;EAEDG,cAAc,CAACL,KAAD,EAAiBE,MAAjB,EAAgC;IAC5C,KAAKZ,KAAL,CAAWC,QAAX,CAAoBa,MAApB,CAA2BJ,KAA3B,EAAkCE,MAAlC;EACD;;EAEDM,UAAU,CAACR,KAAD,EAAiBE,MAAjB,EAAgC;IACxC,MAAMO,QAAQ,GAAG,KAAKnB,KAAL,CAAWC,QAAX,CAAoBC,MAArC;;IACA,IAAIiB,QAAJ,EAAc;MACZA,QAAQ,CAACC,cAAT,CAAwBV,KAAxB,EAA+BE,MAA/B;IACD;EACF;;EAGDS,OAAO;IACLxB,UAAU,CAACyB,KAAX,CAAiB,KAAKnB,YAAL,EAAjB;EACD;;AAvDkC;;AAqDnCoB,YADC3B,IAAI,CAACyB,OAAL,EACD","names":["Base","SizeSensor","SizeManager","hasScroller","graph","scroller","widget","getContainer","container","init","autoResize","options","target","bind","width","offsetWidth","height","offsetHeight","resize","resizeScroller","resizeGraph","transform","resizePage","instance","updatePageSize","dispose","clear","__decorate"],"sourceRoot":"","sources":["../../src/graph/size.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}