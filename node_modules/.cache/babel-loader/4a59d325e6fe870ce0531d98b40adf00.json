{"ast":null,"code":"import { isArray } from '@antv/util';\nvar SPACES = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029';\nvar PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');\nvar PATH_VALUES = new RegExp('(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig'); // Parses given path string into an array of arrays of path segments\n\nexport default function parsePathString(pathString) {\n  if (!pathString) {\n    return null;\n  }\n\n  if (isArray(pathString)) {\n    return pathString;\n  }\n\n  var paramCounts = {\n    a: 7,\n    c: 6,\n    o: 2,\n    h: 1,\n    l: 2,\n    m: 2,\n    r: 4,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    u: 3,\n    z: 0\n  };\n  var data = [];\n  String(pathString).replace(PATH_COMMAND, function (a, b, c) {\n    var params = [];\n    var name = b.toLowerCase();\n    c.replace(PATH_VALUES, function (a, b) {\n      b && params.push(+b);\n    });\n\n    if (name === 'm' && params.length > 2) {\n      data.push([b].concat(params.splice(0, 2)));\n      name = 'l';\n      b = b === 'm' ? 'l' : 'L';\n    }\n\n    if (name === 'o' && params.length === 1) {\n      data.push([b, params[0]]);\n    }\n\n    if (name === 'r') {\n      data.push([b].concat(params));\n    } else {\n      while (params.length >= paramCounts[name]) {\n        data.push([b].concat(params.splice(0, paramCounts[name])));\n\n        if (!paramCounts[name]) {\n          break;\n        }\n      }\n    }\n\n    return '';\n  });\n  return data;\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,IAAMC,MAAM,GAAG,0IAAf;AACA,IAAMC,YAAY,GAAG,IAAIC,MAAJ,CAAW,aAAaF,MAAb,GAAsB,uCAAtB,GAAgEA,MAAhE,GAAyE,OAAzE,GAAmFA,MAAnF,GAA4F,OAAvG,EAAgH,IAAhH,CAArB;AACA,IAAMG,WAAW,GAAG,IAAID,MAAJ,CAAW,uCAAuCF,MAAvC,GAAgD,OAAhD,GAA0DA,MAA1D,GAAmE,IAA9E,EAAoF,IAApF,CAApB,C,CAEA;;AACA,eAAc,SAAUI,eAAV,CAA0BC,UAA1B,EAA4C;EACxD,IAAI,CAACA,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,IAAIN,OAAO,CAACM,UAAD,CAAX,EAAyB;IACvB,OAAOA,UAAP;EACD;;EACD,IAAMC,WAAW,GAAG;IAClBC,CAAC,EAAE,CADe;IAElBC,CAAC,EAAE,CAFe;IAGlBC,CAAC,EAAE,CAHe;IAIlBC,CAAC,EAAE,CAJe;IAKlBC,CAAC,EAAE,CALe;IAMlBC,CAAC,EAAE,CANe;IAOlBC,CAAC,EAAE,CAPe;IAQlBC,CAAC,EAAE,CARe;IASlBC,CAAC,EAAE,CATe;IAUlBC,CAAC,EAAE,CAVe;IAWlBC,CAAC,EAAE,CAXe;IAYlBC,CAAC,EAAE,CAZe;IAalBC,CAAC,EAAE;EAbe,CAApB;EAeA,IAAMC,IAAI,GAAG,EAAb;EAEAC,MAAM,CAAChB,UAAD,CAAN,CAAmBiB,OAAnB,CAA2BrB,YAA3B,EAAyC,UAAUM,CAAV,EAAagB,CAAb,EAAgBf,CAAhB,EAAiB;IACxD,IAAMgB,MAAM,GAAG,EAAf;IACA,IAAIC,IAAI,GAAGF,CAAC,CAACG,WAAF,EAAX;IACAlB,CAAC,CAACc,OAAF,CAAUnB,WAAV,EAAuB,UAAUI,CAAV,EAAagB,CAAb,EAAc;MACnCA,CAAC,IAAIC,MAAM,CAACG,IAAP,CAAY,CAACJ,CAAb,CAAL;IACD,CAFD;;IAGA,IAAIE,IAAI,KAAK,GAAT,IAAgBD,MAAM,CAACI,MAAP,GAAgB,CAApC,EAAuC;MACrCR,IAAI,CAACO,IAAL,CAAU,CAAEJ,CAAF,EAAMM,MAAN,CAAaL,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiB,CAAjB,CAAb,CAAV;MACAL,IAAI,GAAG,GAAP;MACAF,CAAC,GAAGA,CAAC,KAAK,GAAN,GAAY,GAAZ,GAAkB,GAAtB;IACD;;IACD,IAAIE,IAAI,KAAK,GAAT,IAAgBD,MAAM,CAACI,MAAP,KAAkB,CAAtC,EAAyC;MACvCR,IAAI,CAACO,IAAL,CAAU,CAAEJ,CAAF,EAAKC,MAAM,CAAC,CAAD,CAAX,CAAV;IACD;;IACD,IAAIC,IAAI,KAAK,GAAb,EAAkB;MAChBL,IAAI,CAACO,IAAL,CAAU,CAAEJ,CAAF,EAAMM,MAAN,CAAaL,MAAb,CAAV;IACD,CAFD,MAEO;MACL,OAAOA,MAAM,CAACI,MAAP,IAAiBtB,WAAW,CAACmB,IAAD,CAAnC,EAA2C;QACzCL,IAAI,CAACO,IAAL,CAAU,CAAEJ,CAAF,EAAMM,MAAN,CAAaL,MAAM,CAACM,MAAP,CAAc,CAAd,EAAiBxB,WAAW,CAACmB,IAAD,CAA5B,CAAb,CAAV;;QACA,IAAI,CAACnB,WAAW,CAACmB,IAAD,CAAhB,EAAwB;UACtB;QACD;MACF;IACF;;IACD,OAAO,EAAP;EACD,CAzBD;EA2BA,OAAOL,IAAP;AACD","names":["isArray","SPACES","PATH_COMMAND","RegExp","PATH_VALUES","parsePathString","pathString","paramCounts","a","c","o","h","l","m","r","q","s","t","v","u","z","data","String","replace","b","params","name","toLowerCase","push","length","concat","splice"],"sourceRoot":"","sources":["../src/parse-path-string.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}