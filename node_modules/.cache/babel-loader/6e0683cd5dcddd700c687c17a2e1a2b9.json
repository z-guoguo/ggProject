{"ast":null,"code":"/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nimport { mat3, vec2 } from 'gl-matrix';\nexport function leftTranslate(out, a, v) {\n  var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromTranslation(transMat, v);\n  return mat3.multiply(out, transMat, a);\n}\nexport function leftRotate(out, a, rad) {\n  var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromRotation(rotateMat, rad);\n  return mat3.multiply(out, rotateMat, a);\n}\nexport function leftScale(out, a, v) {\n  var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n  mat3.fromScaling(scaleMat, v);\n  return mat3.multiply(out, scaleMat, a);\n}\n\nfunction leftMultiply(out, a, a1) {\n  return mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\n\n\nexport function transform(m, actions) {\n  var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n  for (var i = 0, len = actions.length; i < len; i++) {\n    var action = actions[i];\n\n    switch (action[0]) {\n      case 't':\n        leftTranslate(matrix, matrix, [action[1], action[2]]);\n        break;\n\n      case 's':\n        leftScale(matrix, matrix, [action[1], action[2]]);\n        break;\n\n      case 'r':\n        leftRotate(matrix, matrix, action[1]);\n        break;\n\n      case 'm':\n        leftMultiply(matrix, matrix, action[1]);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return matrix;\n}\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\n\nexport function direction(v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n}\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\n\nexport function angleTo(v1, v2, direct) {\n  var ang = vec2.angle(v1, v2);\n  var angleLargeThanPI = direction(v1, v2) >= 0;\n\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - ang;\n    }\n\n    return ang;\n  }\n\n  if (angleLargeThanPI) {\n    return ang;\n  }\n\n  return Math.PI * 2 - ang;\n}\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\n\nexport function vertical(out, v, flag) {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n\n  return out;\n}","map":{"version":3,"mappings":"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","names":["mat3","vec2","leftTranslate","out","a","v","transMat","fromTranslation","multiply","leftRotate","rad","rotateMat","fromRotation","leftScale","scaleMat","fromScaling","leftMultiply","a1","transform","m","actions","matrix","concat","i","len","length","action","direction","v1","v2","angleTo","direct","ang","angle","angleLargeThanPI","Math","PI","vertical","flag"],"sourceRoot":"","sources":["../src/ext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}