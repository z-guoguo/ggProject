{"ast":null,"code":"/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n  var points = [];\n\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n\n    default:\n  }\n\n  return points;\n} // 将两个点均分成count个点\n\n\nfunction _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index;\n  var t = 1 / (count + 1);\n\n  var formerEnd = _getSegmentPoints(former)[0];\n\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n\n  return result;\n}\n\nexport default function formatPath(fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n\n  var points;\n\n  for (var i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n\n          fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n\n  return fromPath;\n}","map":{"version":3,"mappings":"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","names":["_getSegmentPoints","segment","points","push","_splitPoints","former","count","result","concat","index","t","formerEnd","i","Math","floor","length","unshift","splice","formatPath","fromPath","toPath","reduce","arr"],"sourceRoot":"","sources":["../src/format-path.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}