{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Point, Line, Rectangle, Polyline, Ellipse, Path } from '../../geometry';\nimport { attr } from './attr';\nimport { sample, toPath, getPointsFromSvgElement } from './path';\nimport { ensureId, isSVGGraphicsElement, createSvgElement, isHTMLElement } from './elem';\nimport { getComputedStyle } from './style';\nimport { createSVGPoint, createSVGMatrix, decomposeMatrix, transformRectangle, transformStringToMatrix } from './matrix';\n/**\n * Returns the bounding box of the element after transformations are\n * applied. If `withoutTransformations` is `true`, transformations of\n * the element will not be considered when computing the bounding box.\n * If `target` is specified, bounding box will be computed relatively\n * to the `target` element.\n */\n\nexport function bbox(elem, withoutTransformations, target) {\n  let box;\n  const ownerSVGElement = elem.ownerSVGElement; // If the element is not in the live DOM, it does not have a bounding\n  // box defined and so fall back to 'zero' dimension element.\n\n  if (!ownerSVGElement) {\n    return new Rectangle(0, 0, 0, 0);\n  }\n\n  try {\n    box = elem.getBBox();\n  } catch (e) {\n    // Fallback for IE.\n    box = {\n      x: elem.clientLeft,\n      y: elem.clientTop,\n      width: elem.clientWidth,\n      height: elem.clientHeight\n    };\n  }\n\n  if (withoutTransformations) {\n    return Rectangle.create(box);\n  }\n\n  const matrix = getTransformToElement(elem, target || ownerSVGElement);\n  return transformRectangle(box, matrix);\n}\n/**\n * Returns the bounding box of the element after transformations are\n * applied. Unlike `bbox()`, this function fixes a browser implementation\n * bug to return the correct bounding box if this elemenent is a group of\n * svg elements (if `options.recursive` is specified).\n */\n\nexport function getBBox(elem, options = {}) {\n  let outputBBox;\n  const ownerSVGElement = elem.ownerSVGElement; // If the element is not in the live DOM, it does not have a bounding box\n  // defined and so fall back to 'zero' dimension element.\n  // If the element is not an SVGGraphicsElement, we could not measure the\n  // bounding box either\n\n  if (!ownerSVGElement || !isSVGGraphicsElement(elem)) {\n    if (isHTMLElement(elem)) {\n      // If the element is a HTMLElement, return the position relative to the body\n      const {\n        left,\n        top,\n        width,\n        height\n      } = getBoundingOffsetRect(elem);\n      return new Rectangle(left, top, width, height);\n    }\n\n    return new Rectangle(0, 0, 0, 0);\n  }\n\n  let target = options.target;\n  const recursive = options.recursive;\n\n  if (!recursive) {\n    try {\n      outputBBox = elem.getBBox();\n    } catch (e) {\n      outputBBox = {\n        x: elem.clientLeft,\n        y: elem.clientTop,\n        width: elem.clientWidth,\n        height: elem.clientHeight\n      };\n    }\n\n    if (!target) {\n      return Rectangle.create(outputBBox);\n    } // transform like target\n\n\n    const matrix = getTransformToElement(elem, target);\n    return transformRectangle(outputBBox, matrix);\n  } // recursive\n\n\n  {\n    const children = elem.childNodes;\n    const n = children.length;\n\n    if (n === 0) {\n      return getBBox(elem, {\n        target\n      });\n    }\n\n    if (!target) {\n      target = elem; // eslint-disable-line\n    }\n\n    for (let i = 0; i < n; i += 1) {\n      const child = children[i];\n      let childBBox;\n\n      if (child.childNodes.length === 0) {\n        childBBox = getBBox(child, {\n          target\n        });\n      } else {\n        // if child is a group element, enter it with a recursive call\n        childBBox = getBBox(child, {\n          target,\n          recursive: true\n        });\n      }\n\n      if (!outputBBox) {\n        outputBBox = childBBox;\n      } else {\n        outputBBox = outputBBox.union(childBBox);\n      }\n    }\n\n    return outputBBox;\n  }\n} // BBox is calculated by the attribute on the node\n\nexport function getBBoxByElementAttr(elem) {\n  let node = elem;\n  let tagName = node ? node.tagName.toLowerCase() : ''; // find shape node\n\n  while (tagName === 'g') {\n    node = node.firstElementChild;\n    tagName = node ? node.tagName.toLowerCase() : '';\n  }\n\n  const attr = name => {\n    const s = node.getAttribute(name);\n    const v = s ? parseFloat(s) : 0;\n    return Number.isNaN(v) ? 0 : v;\n  };\n\n  let r;\n  let bbox;\n\n  switch (tagName) {\n    case 'rect':\n      bbox = new Rectangle(attr('x'), attr('y'), attr('width'), attr('height'));\n      break;\n\n    case 'circle':\n      r = attr('r');\n      bbox = new Rectangle(attr('cx') - r, attr('cy') - r, 2 * r, 2 * r);\n      break;\n\n    default:\n      break;\n  }\n\n  return bbox;\n} // Matrix is calculated by the transform attribute on the node\n\nexport function getMatrixByElementAttr(elem, target) {\n  let matrix = createSVGMatrix();\n\n  if (isSVGGraphicsElement(target) && isSVGGraphicsElement(elem)) {\n    let node = elem;\n    const matrixList = [];\n\n    while (node && node !== target) {\n      const transform = node.getAttribute('transform') || null;\n      const nodeMatrix = transformStringToMatrix(transform);\n      matrixList.push(nodeMatrix);\n      node = node.parentNode;\n    }\n\n    matrixList.reverse().forEach(m => {\n      matrix = matrix.multiply(m);\n    });\n  }\n\n  return matrix;\n}\n/**\n * Returns an DOMMatrix that specifies the transformation necessary\n * to convert `elem` coordinate system into `target` coordinate system.\n */\n\nexport function getTransformToElement(elem, target) {\n  if (isSVGGraphicsElement(target) && isSVGGraphicsElement(elem)) {\n    const targetCTM = target.getScreenCTM();\n    const nodeCTM = elem.getScreenCTM();\n\n    if (targetCTM && nodeCTM) {\n      return targetCTM.inverse().multiply(nodeCTM);\n    }\n  } // Could not get actual transformation matrix\n\n\n  return createSVGMatrix();\n}\n/**\n * Converts a global point with coordinates `x` and `y` into the\n * coordinate space of the element.\n */\n\nexport function toLocalPoint(elem, x, y) {\n  const svg = elem instanceof SVGSVGElement ? elem : elem.ownerSVGElement;\n  const p = svg.createSVGPoint();\n  p.x = x;\n  p.y = y;\n\n  try {\n    const ctm = svg.getScreenCTM();\n    const globalPoint = p.matrixTransform(ctm.inverse());\n    const globalToLocalMatrix = getTransformToElement(elem, svg).inverse();\n    return globalPoint.matrixTransform(globalToLocalMatrix);\n  } catch (e) {\n    return p;\n  }\n}\n/**\n * Convert the SVGElement to an equivalent geometric shape. The element's\n * transformations are not taken into account.\n *\n * SVGRectElement      => Rectangle\n *\n * SVGLineElement      => Line\n *\n * SVGCircleElement    => Ellipse\n *\n * SVGEllipseElement   => Ellipse\n *\n * SVGPolygonElement   => Polyline\n *\n * SVGPolylineElement  => Polyline\n *\n * SVGPathElement      => Path\n *\n * others              => Rectangle\n */\n\nexport function toGeometryShape(elem) {\n  const attr = name => {\n    const s = elem.getAttribute(name);\n    const v = s ? parseFloat(s) : 0;\n    return Number.isNaN(v) ? 0 : v;\n  };\n\n  switch (elem instanceof SVGElement && elem.nodeName.toLowerCase()) {\n    case 'rect':\n      return new Rectangle(attr('x'), attr('y'), attr('width'), attr('height'));\n\n    case 'circle':\n      return new Ellipse(attr('cx'), attr('cy'), attr('r'), attr('r'));\n\n    case 'ellipse':\n      return new Ellipse(attr('cx'), attr('cy'), attr('rx'), attr('ry'));\n\n    case 'polyline':\n      {\n        const points = getPointsFromSvgElement(elem);\n        return new Polyline(points);\n      }\n\n    case 'polygon':\n      {\n        const points = getPointsFromSvgElement(elem);\n\n        if (points.length > 1) {\n          points.push(points[0]);\n        }\n\n        return new Polyline(points);\n      }\n\n    case 'path':\n      {\n        let d = elem.getAttribute('d');\n\n        if (!Path.isValid(d)) {\n          d = Path.normalize(d);\n        }\n\n        return Path.parse(d);\n      }\n\n    case 'line':\n      {\n        return new Line(attr('x1'), attr('y1'), attr('x2'), attr('y2'));\n      }\n\n    default:\n      break;\n  } // Anything else is a rectangle\n\n\n  return getBBox(elem);\n}\nexport function getIntersection(elem, ref, target) {\n  const svg = elem instanceof SVGSVGElement ? elem : elem.ownerSVGElement;\n  target = target || svg; // eslint-disable-line\n\n  const bbox = getBBox(target);\n  const center = bbox.getCenter();\n\n  if (!bbox.intersectsWithLineFromCenterToPoint(ref)) {\n    return null;\n  }\n\n  let spot = null;\n  const tagName = elem.tagName.toLowerCase(); // Little speed up optimization for `<rect>` element. We do not do convert\n  // to path element and sampling but directly calculate the intersection\n  // through a transformed geometrical rectangle.\n\n  if (tagName === 'rect') {\n    const gRect = new Rectangle(parseFloat(elem.getAttribute('x') || '0'), parseFloat(elem.getAttribute('y') || '0'), parseFloat(elem.getAttribute('width') || '0'), parseFloat(elem.getAttribute('height') || '0')); // Get the rect transformation matrix with regards to the SVG document.\n\n    const rectMatrix = getTransformToElement(elem, target);\n    const rectMatrixComponents = decomposeMatrix(rectMatrix); // Rotate the rectangle back so that we can use\n    // `intersectsWithLineFromCenterToPoint()`.\n\n    const reseted = svg.createSVGTransform();\n    reseted.setRotate(-rectMatrixComponents.rotation, center.x, center.y);\n    const rect = transformRectangle(gRect, reseted.matrix.multiply(rectMatrix));\n    spot = Rectangle.create(rect).intersectsWithLineFromCenterToPoint(ref, rectMatrixComponents.rotation);\n  } else if (tagName === 'path' || tagName === 'polygon' || tagName === 'polyline' || tagName === 'circle' || tagName === 'ellipse') {\n    const pathNode = tagName === 'path' ? elem : toPath(elem);\n    const samples = sample(pathNode);\n    let minDistance = Infinity;\n    let closestSamples = [];\n\n    for (let i = 0, ii = samples.length; i < ii; i += 1) {\n      const sample = samples[i]; // Convert the sample point in the local coordinate system\n      // to the global coordinate system.\n\n      let gp = createSVGPoint(sample.x, sample.y);\n      gp = gp.matrixTransform(getTransformToElement(elem, target));\n      const ggp = Point.create(gp);\n      const centerDistance = ggp.distance(center); // Penalize a higher distance to the reference point by 10%.\n      // This gives better results. This is due to\n      // inaccuracies introduced by rounding errors and getPointAtLength() returns.\n\n      const refDistance = ggp.distance(ref) * 1.1;\n      const distance = centerDistance + refDistance;\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestSamples = [{\n          sample,\n          refDistance\n        }];\n      } else if (distance < minDistance + 1) {\n        closestSamples.push({\n          sample,\n          refDistance\n        });\n      }\n    }\n\n    closestSamples.sort((a, b) => a.refDistance - b.refDistance);\n\n    if (closestSamples[0]) {\n      spot = Point.create(closestSamples[0].sample);\n    }\n  }\n\n  return spot;\n}\nexport function animate(elem, options) {\n  return createAnimation(elem, options, 'animate');\n}\nexport function animateTransform(elem, options) {\n  return createAnimation(elem, options, 'animateTransform');\n}\n\nfunction createAnimation(elem, options, type) {\n  // @see\n  // https://www.w3.org/TR/SVG11/animate.html#AnimateElement\n  // https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateElement\n  // https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimateTransformElement\n  const animate = createSvgElement(type);\n  elem.appendChild(animate);\n\n  try {\n    return setupAnimation(animate, options);\n  } catch (error) {// pass\n  }\n\n  return () => {};\n}\n\nfunction setupAnimation(animate, options) {\n  const {\n    start,\n    complete,\n    repeat\n  } = options,\n        attrs = __rest(options, [\"start\", \"complete\", \"repeat\"]);\n\n  attr(animate, attrs);\n  start && animate.addEventListener('beginEvent', start);\n  complete && animate.addEventListener('endEvent', complete);\n  repeat && animate.addEventListener('repeatEvent', repeat);\n  const ani = animate;\n  ani.beginElement();\n  return () => ani.endElement();\n}\n/**\n * Animate the element along the path SVG element (or Vector object).\n * `attrs` contain Animation Timing attributes describing the animation.\n */\n\n\nexport function animateAlongPath(elem, options, path) {\n  const id = ensureId(path); // https://developer.mozilla.org/en-US/docs/Web/API/SVGAnimationElement\n\n  const animate = createSvgElement('animateMotion');\n  const mpath = createSvgElement('mpath');\n  attr(mpath, {\n    'xlink:href': `#${id}`\n  });\n  animate.appendChild(mpath);\n  elem.appendChild(animate);\n\n  try {\n    return setupAnimation(animate, options);\n  } catch (e) {\n    // Fallback for IE 9.\n    if (document.documentElement.getAttribute('smiling') === 'fake') {\n      // Register the animation. (See `https://answers.launchpad.net/smil/+question/203333`)\n      const ani = animate;\n      ani.animators = [];\n      const win = window;\n      const animationID = ani.getAttribute('id');\n\n      if (animationID) {\n        win.id2anim[animationID] = ani;\n      }\n\n      const targets = win.getTargets(ani);\n\n      for (let i = 0, ii = targets.length; i < ii; i += 1) {\n        const target = targets[i];\n        const animator = new win.Animator(ani, target, i);\n        win.animators.push(animator);\n        ani.animators[i] = animator;\n        animator.register();\n      }\n    }\n  }\n\n  return () => {};\n}\nexport function getBoundingOffsetRect(elem) {\n  let left = 0;\n  let top = 0;\n  let width = 0;\n  let height = 0;\n\n  if (elem) {\n    let current = elem;\n\n    while (current) {\n      left += current.offsetLeft;\n      top += current.offsetTop;\n      current = current.offsetParent;\n\n      if (current) {\n        left += parseInt(getComputedStyle(current, 'borderLeft'), 10);\n        top += parseInt(getComputedStyle(current, 'borderTop'), 10);\n      }\n    }\n\n    width = elem.offsetWidth;\n    height = elem.offsetHeight;\n  }\n\n  return {\n    left,\n    top,\n    width,\n    height\n  };\n}","map":{"version":3,"mappings":"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","names":["Point","Line","Rectangle","Polyline","Ellipse","Path","attr","sample","toPath","getPointsFromSvgElement","ensureId","isSVGGraphicsElement","createSvgElement","isHTMLElement","getComputedStyle","createSVGPoint","createSVGMatrix","decomposeMatrix","transformRectangle","transformStringToMatrix","bbox","elem","withoutTransformations","target","box","ownerSVGElement","getBBox","e","x","clientLeft","y","clientTop","width","clientWidth","height","clientHeight","create","matrix","getTransformToElement","options","outputBBox","left","top","getBoundingOffsetRect","recursive","children","childNodes","n","length","i","child","childBBox","union","getBBoxByElementAttr","node","tagName","toLowerCase","firstElementChild","name","s","getAttribute","v","parseFloat","Number","isNaN","r","getMatrixByElementAttr","matrixList","transform","nodeMatrix","push","parentNode","reverse","forEach","m","multiply","targetCTM","getScreenCTM","nodeCTM","inverse","toLocalPoint","svg","SVGSVGElement","p","ctm","globalPoint","matrixTransform","globalToLocalMatrix","toGeometryShape","SVGElement","nodeName","points","d","isValid","normalize","parse","getIntersection","ref","center","getCenter","intersectsWithLineFromCenterToPoint","spot","gRect","rectMatrix","rectMatrixComponents","reseted","createSVGTransform","setRotate","rotation","rect","pathNode","samples","minDistance","Infinity","closestSamples","ii","gp","ggp","centerDistance","distance","refDistance","sort","a","b","animate","createAnimation","animateTransform","type","appendChild","setupAnimation","error","start","complete","repeat","attrs","addEventListener","ani","beginElement","endElement","animateAlongPath","path","id","mpath","document","documentElement","animators","win","window","animationID","id2anim","targets","getTargets","animator","Animator","register","current","offsetLeft","offsetTop","offsetParent","parseInt","offsetWidth","offsetHeight"],"sourceRoot":"","sources":["../../../src/util/dom/geom.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}