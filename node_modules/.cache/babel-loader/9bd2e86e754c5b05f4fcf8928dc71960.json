{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { IDENTIFIER } from '@antv/g-webgpu-core';\nimport { inject, injectable } from 'inversify';\nimport { TextureCache } from './Cache';\nexport var Texture2D = (_dec = injectable(), _dec2 = inject(TextureCache), _dec3 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function Texture2D() {\n    _classCallCheck(this, Texture2D);\n\n    _initializerDefineProperty(this, \"textureCache\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n\n    this.config = void 0;\n    this.loaded = false;\n    this.texture = void 0;\n  }\n\n  _createClass(Texture2D, [{\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.config = config;\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this.loaded;\n    } // public update(config: ITexture2DInitializationOptions) {\n    //   if (this.loaded && this.texture) {\n    //     const t = this.texture.get();\n    //   }\n    // }\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.config.url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var existed = _this.textureCache.get(_this.config.url);\n\n                  if (existed) {\n                    resolve(existed);\n                  } else {\n                    var image = new Image();\n                    image.crossOrigin = 'Anonymous';\n                    image.src = _this.config.url;\n\n                    image.onload = function () {\n                      var texture = _this.engine.createTexture2D(_objectSpread(_objectSpread({}, _this.config), {}, {\n                        data: image,\n                        width: image.width,\n                        height: image.height,\n                        flipY: true\n                      }));\n\n                      _this.textureCache.set(_this.config.url, texture);\n\n                      _this.texture = texture;\n                      _this.loaded = true;\n                      resolve(texture);\n                    };\n\n                    image.onerror = function () {\n                      reject();\n                    };\n                  }\n                }));\n\n              case 4:\n                this.loaded = true;\n                this.texture = this.engine.createTexture2D(this.config);\n                return _context.abrupt(\"return\", this.texture);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }]);\n\n  return Texture2D;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"textureCache\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAGEA,UAHF,QAUO,qBAVP;AAWA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AACA,SAASC,YAAT,QAA6B,SAA7B;AAGA,WAAaC,SAAb,WADCF,UAAU,EACX,UACGD,MAAM,CAACE,YAAD,CADT,UAIGF,MAAM,CAACD,UAAU,CAACK,YAAZ,CAJT;EAAA;IAAAC;;IAAAC;;IAAAA;;IAAA,KAOUC,MAPV;IAAA,KAQUC,MARV,GAQmB,KARnB;IAAA,KASUC,OATV;EAAA;;EAAAC;IAAAC;IAAAC,0BAWmBL,MAXnB,EAW8E;MAC1E,KAAKA,MAAL,GAAcA,MAAd;IACD;EAbH;IAAAI;IAAAC,2BAeoB;MAChB,OAAO,KAAKJ,MAAZ;IAhBJ,EAmBE;IACA;IACA;IACA;IACA;;EAvBF;IAAAG;IAAAC;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,KA0BQ,KAAKL,MAAL,CAAYM,GA1BpB;kBAAAC;kBAAA;gBAAA;;gBAAA,iCA2Ba,IAAIC,OAAJ,CAAwB,UAACC,OAAD,EAAUC,MAAV,EAAqB;kBAClD,IAAMC,OAAO,GAAGC,KAAI,CAACC,YAAL,CAAkBC,GAAlB,CAAsBF,KAAI,CAACZ,MAAL,CAAYM,GAAlC,CAAhB;;kBACA,IAAIK,OAAJ,EAAa;oBACXF,OAAO,CAACE,OAAD,CAAPF;kBADF,OAEO;oBACL,IAAMM,KAAK,GAAG,IAAIC,KAAJ,EAAd;oBACAD,KAAK,CAACE,WAANF,GAAoB,WAApBA;oBACAA,KAAK,CAACG,GAANH,GAAYH,KAAI,CAACZ,MAAL,CAAYM,GAAxBS;;oBACAA,KAAK,CAACI,MAANJ,GAAe,YAAM;sBACnB,IAAMb,OAAO,GAAGU,KAAI,CAACQ,MAAL,CAAYC,eAAZ,iCACXT,KAAI,CAACZ,MADM;wBAEdsB,IAAI,EAAEP,KAFQ;wBAGdQ,KAAK,EAAER,KAAK,CAACQ,KAHC;wBAIdC,MAAM,EAAET,KAAK,CAACS,MAJA;wBAKdC,KAAK,EAAE;sBALO,GAAhB;;sBAOAb,KAAI,CAACC,YAAL,CAAkBa,GAAlB,CAAsBd,KAAI,CAACZ,MAAL,CAAYM,GAAlC,EAAuCJ,OAAvC;;sBACAU,KAAI,CAACV,OAAL,GAAeA,OAAf;sBACAU,KAAI,CAACX,MAAL,GAAc,IAAd;sBACAQ,OAAO,CAACP,OAAD,CAAPO;oBAXF;;oBAaAM,KAAK,CAACY,OAANZ,GAAgB,YAAM;sBACpBL,MAAM;oBADR;kBAGD;gBAxBI,EA3Bb;;cAAA;gBAsDM,KAAKT,MAAL,GAAc,IAAd;gBACA,KAAKC,OAAL,GAAe,KAAKkB,MAAL,CAAYC,eAAZ,CAA4B,KAAKrB,MAAjC,CAAf;gBAvDN,iCAwDa,KAAKE,OAxDlB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;;EAAA;AAAA;EAAA0B;EAAAC;EAAAC;EAAAC;AAAA;EAAAH;EAAAC;EAAAC;EAAAC;AAAA","names":["IDENTIFIER","inject","injectable","TextureCache","Texture2D","RenderEngine","_classCallCheck","_initializerDefineProperty","config","loaded","texture","_createClass","key","value","url","_context","Promise","resolve","reject","existed","_this","textureCache","get","image","Image","crossOrigin","src","onload","engine","createTexture2D","data","width","height","flipY","set","onerror","configurable","enumerable","writable","initializer"],"sources":["../../src/texture/Texture2D.ts"],"sourcesContent":["import {\n  IClearOptions,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  IShaderModuleService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  IView,\n} from '@antv/g-webgpu-core';\nimport { inject, injectable } from 'inversify';\nimport { TextureCache } from './Cache';\n\n@injectable()\nexport class Texture2D {\n  @inject(TextureCache)\n  private readonly textureCache: TextureCache;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  private config: ITexture2DInitializationOptions & { url: string };\n  private loaded = false;\n  private texture: ITexture2D;\n\n  public setConfig(config: ITexture2DInitializationOptions & { url: string }) {\n    this.config = config;\n  }\n\n  public isLoaded() {\n    return this.loaded;\n  }\n\n  // public update(config: ITexture2DInitializationOptions) {\n  //   if (this.loaded && this.texture) {\n  //     const t = this.texture.get();\n  //   }\n  // }\n\n  public async load() {\n    if (this.config.url) {\n      return new Promise<ITexture2D>((resolve, reject) => {\n        const existed = this.textureCache.get(this.config.url);\n        if (existed) {\n          resolve(existed);\n        } else {\n          const image = new Image();\n          image.crossOrigin = 'Anonymous';\n          image.src = this.config.url;\n          image.onload = () => {\n            const texture = this.engine.createTexture2D({\n              ...this.config,\n              data: image,\n              width: image.width,\n              height: image.height,\n              flipY: true,\n            });\n            this.textureCache.set(this.config.url, texture);\n            this.texture = texture;\n            this.loaded = true;\n            resolve(texture);\n          };\n          image.onerror = () => {\n            reject();\n          };\n        }\n      });\n    } else {\n      this.loaded = true;\n      this.texture = this.engine.createTexture2D(this.config);\n      return this.texture;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}