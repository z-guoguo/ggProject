{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { injectable } from 'inversify';\nimport { Geometry } from '.';\nexport var\n/**\n * borrow from playcanvas\n */\nPlane = (_dec = injectable(), _dec(_class = /*#__PURE__*/function (_Geometry) {\n  _inherits(Plane, _Geometry);\n\n  var _super = _createSuper(Plane);\n\n  function Plane() {\n    _classCallCheck(this, Plane);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Plane, [{\n    key: \"onEntityCreated\",\n    value: function onEntityCreated() {\n      var _this$config = this.config,\n          _this$config$halfExte = _this$config.halfExtents,\n          halfExtents = _this$config$halfExte === void 0 ? [0.5, 0.5] : _this$config$halfExte,\n          _this$config$widthSeg = _this$config.widthSegments,\n          widthSegments = _this$config$widthSeg === void 0 ? 5 : _this$config$widthSeg,\n          _this$config$lengthSe = _this$config.lengthSegments,\n          lengthSegments = _this$config$lengthSe === void 0 ? 5 : _this$config$lengthSe;\n      var positions = [];\n      var normals = [];\n      var uvs = [];\n      var indices = [];\n      var vcounter = 0;\n\n      for (var i = 0; i <= widthSegments; i++) {\n        for (var j = 0; j <= lengthSegments; j++) {\n          var x = -halfExtents[0] + 2.0 * halfExtents[0] * i / widthSegments;\n          var y = 0.0;\n          var z = -(-halfExtents[1] + 2.0 * halfExtents[1] * j / lengthSegments);\n          var u = i / widthSegments;\n          var v = j / lengthSegments;\n          positions.push(x, y, z);\n          normals.push(0.0, 1.0, 0.0);\n          uvs.push(u, v);\n\n          if (i < widthSegments && j < lengthSegments) {\n            indices.push(vcounter + lengthSegments + 1, vcounter + 1, vcounter);\n            indices.push(vcounter + lengthSegments + 1, vcounter + lengthSegments + 2, vcounter + 1);\n          }\n\n          vcounter++;\n        }\n      } // generate AABB\n\n\n      var aabb = generateAABBFromVertices(positions);\n      var component = this.getComponent();\n      component.indices = Uint32Array.from(indices);\n      component.aabb = aabb;\n      component.vertexCount = vcounter;\n      component.attributes = [{\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 0,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 1,\n          offset: 0,\n          format: 'float3'\n        }]\n      }, {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [{\n          shaderLocation: 2,\n          offset: 0,\n          format: 'float2'\n        }]\n      }]; // TODO: barycentric & tangent\n    }\n  }]);\n\n  return Plane;\n}(Geometry)) || _class);","map":{"version":3,"mappings":"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","names":["generateAABBFromVertices","injectable","Geometry","Plane","_inherits","_classCallCheck","_createClass","key","value","config","halfExtents","widthSegments","lengthSegments","positions","normals","uvs","indices","vcounter","i","j","x","y","z","u","v","push","aabb","component","getComponent","Uint32Array","from","vertexCount","attributes","dirty","name","data","Float32Array","arrayStride","stepMode","shaderLocation","offset","format"],"sources":["../../src/geometry/Plane.ts"],"sourcesContent":["import { generateAABBFromVertices } from '@antv/g-webgpu-core';\nimport { vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { Geometry } from '.';\n\nexport interface IPlaneGeometryParams {\n  halfExtents: vec3;\n  widthSegments: number;\n  lengthSegments: number;\n}\n\n@injectable()\n/**\n * borrow from playcanvas\n */\nexport class Plane extends Geometry<Partial<IPlaneGeometryParams>> {\n  protected onEntityCreated() {\n    const {\n      halfExtents = [0.5, 0.5],\n      widthSegments = 5,\n      lengthSegments = 5,\n    } = this.config;\n\n    const positions: number[] = [];\n    const normals: number[] = [];\n    const uvs: number[] = [];\n    const indices: number[] = [];\n    let vcounter = 0;\n\n    for (let i = 0; i <= widthSegments; i++) {\n      for (let j = 0; j <= lengthSegments; j++) {\n        const x = -halfExtents[0] + (2.0 * halfExtents[0] * i) / widthSegments;\n        const y = 0.0;\n        const z = -(\n          -halfExtents[1] +\n          (2.0 * halfExtents[1] * j) / lengthSegments\n        );\n        const u = i / widthSegments;\n        const v = j / lengthSegments;\n\n        positions.push(x, y, z);\n        normals.push(0.0, 1.0, 0.0);\n        uvs.push(u, v);\n\n        if (i < widthSegments && j < lengthSegments) {\n          indices.push(vcounter + lengthSegments + 1, vcounter + 1, vcounter);\n          indices.push(\n            vcounter + lengthSegments + 1,\n            vcounter + lengthSegments + 2,\n            vcounter + 1,\n          );\n        }\n\n        vcounter++;\n      }\n    }\n\n    // generate AABB\n    const aabb = generateAABBFromVertices(positions);\n\n    const component = this.getComponent();\n    component.indices = Uint32Array.from(indices);\n    component.aabb = aabb;\n    component.vertexCount = vcounter;\n    component.attributes = [\n      {\n        dirty: true,\n        name: 'position',\n        data: Float32Array.from(positions),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'normal',\n        data: Float32Array.from(normals),\n        arrayStride: 4 * 3,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 1,\n            offset: 0,\n            format: 'float3',\n          },\n        ],\n      },\n      {\n        dirty: true,\n        name: 'uv',\n        data: Float32Array.from(uvs),\n        arrayStride: 4 * 2,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 2,\n            offset: 0,\n            format: 'float2',\n          },\n        ],\n      },\n    ];\n\n    // TODO: barycentric & tangent\n  }\n}\n"]},"metadata":{},"sourceType":"module"}