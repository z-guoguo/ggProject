{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-fed4f764\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"antx\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"container\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEACTC,oBAA0B,KAA1B,EAA0B;EAArBC,EAAE,EAAC;AAAkB,CAA1B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;oBAAAC;;uBADFC,oBAEM,KAFN,cAEMC,UAFN","names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antx/index.vue"],"sourcesContent":["<template>\n  <div class=\"antx\">\n    <div id=\"container\"></div>\n  </div>\n</template>\n<script>\nimport { defineComponent, onMounted } from \"vue\";\nimport { Graph, Shape, Addon } from '@antv/x6'\nimport insertCss from 'insert-css'\nexport default defineComponent({\n  name: \"antX\",\n  setup() {\n    onMounted(() => {\n      // 为了协助代码演示\n      preWork()\n\n      // #region 初始化画布\n      const graph = new Graph({\n        container: document.getElementById('graph-container'),\n        grid: true,\n        mousewheel: {\n          enabled: true,\n          zoomAtMousePosition: true,\n          modifiers: 'ctrl',\n          minScale: 0.5,\n          maxScale: 3,\n        },\n        connecting: {\n          router: {\n            name: 'manhattan',\n            args: {\n              padding: 1,\n            },\n          },\n          connector: {\n            name: 'rounded',\n            args: {\n              radius: 8,\n            },\n          },\n          anchor: 'center',\n          connectionPoint: 'anchor',\n          allowBlank: false,\n          snap: {\n            radius: 20,\n          },\n          createEdge() {\n            return new Shape.Edge({\n              attrs: {\n                line: {\n                  stroke: '#A2B1C3',\n                  strokeWidth: 2,\n                  targetMarker: {\n                    name: 'block',\n                    width: 12,\n                    height: 8,\n                  },\n                },\n              },\n              zIndex: 0,\n            })\n          },\n          validateConnection({ targetMagnet }) {\n            return !!targetMagnet\n          },\n        },\n        highlighting: {\n          magnetAdsorbed: {\n            name: 'stroke',\n            args: {\n              attrs: {\n                fill: '#5F95FF',\n                stroke: '#5F95FF',\n              },\n            },\n          },\n        },\n        resizing: true,\n        rotating: true,\n        selecting: {\n          enabled: true,\n          rubberband: true,\n          showNodeSelectionBox: true,\n        },\n        snapline: true,\n        keyboard: true,\n        clipboard: true,\n      })\n      // #endregion\n\n      // #region 初始化 stencil\n      const stencil = new Addon.Stencil({\n        title: '流程图',\n        target: graph,\n        stencilGraphWidth: 200,\n        stencilGraphHeight: 180,\n        collapsable: true,\n        groups: [\n          {\n            title: '基础流程图',\n            name: 'group1',\n          }\n        ],\n        layoutOptions: {\n          columns: 2,\n          columnWidth: 80,\n          rowHeight: 55,\n        },\n      })\n      document.getElementById('stencil').appendChild(stencil.container)\n      // #endregion\n\n      // #region 快捷键与事件\n      // copy cut paste\n      graph.bindKey(['meta+c', 'ctrl+c'], () => {\n        const cells = graph.getSelectedCells()\n        if (cells.length) {\n          graph.copy(cells)\n        }\n        return false\n      })\n      graph.bindKey(['meta+x', 'ctrl+x'], () => {\n        const cells = graph.getSelectedCells()\n        if (cells.length) {\n          graph.cut(cells)\n        }\n        return false\n      })\n      graph.bindKey(['meta+v', 'ctrl+v'], () => {\n        if (!graph.isClipboardEmpty()) {\n          const cells = graph.paste({ offset: 32 })\n          graph.cleanSelection()\n          graph.select(cells)\n        }\n        return false\n      })\n\n      //undo redo\n      graph.bindKey(['meta+z', 'ctrl+z'], () => {\n        if (graph.history.canUndo()) {\n          graph.history.undo()\n        }\n        return false\n      })\n      graph.bindKey(['meta+shift+z', 'ctrl+shift+z'], () => {\n        if (graph.history.canRedo()) {\n          graph.history.redo()\n        }\n        return false\n      })\n\n      // select all\n      graph.bindKey(['meta+a', 'ctrl+a'], () => {\n        const nodes = graph.getNodes()\n        if (nodes) {\n          graph.select(nodes)\n        }\n      })\n\n      //delete\n      graph.bindKey('backspace', () => {\n        const cells = graph.getSelectedCells()\n        if (cells.length) {\n          graph.removeCells(cells)\n        }\n      })\n\n      // zoom\n      graph.bindKey(['ctrl+1', 'meta+1'], () => {\n        const zoom = graph.zoom()\n        if (zoom < 1.5) {\n          graph.zoom(0.1)\n        }\n      })\n      graph.bindKey(['ctrl+2', 'meta+2'], () => {\n        const zoom = graph.zoom()\n        if (zoom > 0.5) {\n          graph.zoom(-0.1)\n        }\n      })\n      type NodeListOf = {};\n      // 控制连接桩显示/隐藏\n      const showPorts = (ports: NodeListOf<SVGElement>, show: boolean) => {\n        for (let i = 0, len = ports.length; i < len; i = i + 1) {\n          ports[i].style.visibility = show ? 'visible' : 'hidden'\n        }\n      }\n      graph.on('node:mouseenter', () => {\n        const container = document.getElementById('graph-container')\n        const ports = container.querySelectorAll(\n          '.x6-port-body',\n        ) as NodeListOf<SVGElement>\n        showPorts(ports, true)\n      })\n      graph.on('node:mouseleave', () => {\n        const container = document.getElementById('graph-container')\n        const ports = container.querySelectorAll(\n          '.x6-port-body',\n        ) as NodeListOf<SVGElement>\n        showPorts(ports, false)\n      })\n      // #endregion\n\n      // #region 初始化图形\n      const ports = {\n        groups: {\n          top: {\n            position: 'top',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden',\n                },\n              },\n            },\n          },\n          right: {\n            position: 'right',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden',\n                },\n              },\n            },\n          },\n          bottom: {\n            position: 'bottom',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden',\n                },\n              },\n            },\n          },\n          left: {\n            position: 'left',\n            attrs: {\n              circle: {\n                r: 4,\n                magnet: true,\n                stroke: '#5F95FF',\n                strokeWidth: 1,\n                fill: '#fff',\n                style: {\n                  visibility: 'hidden',\n                },\n              },\n            },\n          },\n        },\n        items: [\n          {\n            group: 'top',\n          },\n          {\n            group: 'right',\n          },\n          {\n            group: 'bottom',\n          },\n          {\n            group: 'left',\n          },\n        ],\n      }\n\n      Graph.registerNode(\n        'custom-rect',\n        {\n          inherit: 'rect',\n          width: 66,\n          height: 36,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#5F95FF',\n              fill: '#EFF4FF',\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626',\n            },\n          },\n          ports: { ...ports },\n        },\n        true,\n      )\n\n      Graph.registerNode(\n        'custom-polygon',\n        {\n          inherit: 'polygon',\n          width: 66,\n          height: 36,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#5F95FF',\n              fill: '#EFF4FF',\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626',\n            },\n          },\n          ports: {\n            ...ports,\n            items: [\n              {\n                group: 'top',\n              },\n              {\n                group: 'bottom',\n              },\n            ],\n          },\n        },\n        true,\n      )\n\n      Graph.registerNode(\n        'custom-circle',\n        {\n          inherit: 'circle',\n          width: 45,\n          height: 45,\n          attrs: {\n            body: {\n              strokeWidth: 1,\n              stroke: '#5F95FF',\n              fill: '#EFF4FF',\n            },\n            text: {\n              fontSize: 12,\n              fill: '#262626',\n            },\n          },\n          ports: { ...ports },\n        },\n        true,\n      )\n\n      Graph.registerNode(\n        'custom-image',\n        {\n          inherit: 'rect',\n          width: 52,\n          height: 52,\n          markup: [\n            {\n              tagName: 'rect',\n              selector: 'body',\n            },\n            {\n              tagName: 'image',\n            },\n            {\n              tagName: 'text',\n              selector: 'label',\n            },\n          ],\n          attrs: {\n            body: {\n              stroke: '#5F95FF',\n              fill: '#5F95FF',\n            },\n            image: {\n              width: 26,\n              height: 26,\n              refX: 13,\n              refY: 16,\n            },\n            label: {\n              refX: 3,\n              refY: 2,\n              textAnchor: 'left',\n              textVerticalAnchor: 'top',\n              fontSize: 12,\n              fill: '#fff',\n            },\n          },\n          ports: { ...ports },\n        },\n        true,\n      )\n\n      const r2 = graph.createNode({\n        shape: 'custom-rect',\n        label: '过程',\n      })\n      stencil.load([r2], 'group1')\n\n      const imageShapes = []\n      const imageNodes = imageShapes.map((item) =>\n        graph.createNode({\n          shape: 'custom-image',\n          label: item.label,\n          attrs: {\n            image: {\n              'xlink:href': item.image,\n            },\n          },\n        }),\n      )\n      stencil.load(imageNodes, 'group2')\n      // #endregion\n\n      function preWork() {\n        // 这里协助演示的代码，在实际项目中根据实际情况进行调整\n        const container = document.getElementById('container')\n        const stencilContainer = document.createElement('div')\n        stencilContainer.id = 'stencil'\n        const graphContainer = document.createElement('div')\n        graphContainer.id = 'graph-container'\n        container.appendChild(stencilContainer)\n        container.appendChild(graphContainer)\n        insertCss(`\n          #container {\n            display: flex;\n            border: 1px solid #dfe3e8;\n          }\n          #stencil {\n            width: 180px;\n            height: 100%;\n            position: relative;\n            border-right: 1px solid #dfe3e8;\n          }\n          #graph-container {\n            width: calc(100% - 180px);\n            height: 100%;\n          }\n          .x6-widget-stencil  {\n            background-color: #fff;\n          }\n          .x6-widget-stencil-title {\n            background-color: #fff;\n          }\n          .x6-widget-stencil-group-title {\n            background-color: #fff !important;\n          }\n          .x6-widget-transform {\n            margin: -1px 0 0 -1px;\n            padding: 0px;\n            border: 1px solid #239edd;\n          }\n          .x6-widget-transform > div {\n            border: 1px solid #239edd;\n          }\n          .x6-widget-transform > div:hover {\n            background-color: #3dafe4;\n          }\n          .x6-widget-transform-active-handle {\n            background-color: #3dafe4;\n          }\n          .x6-widget-transform-resize {\n            border-radius: 0;\n          }\n          .x6-widget-selection-inner {\n            border: 1px solid #239edd;\n          }\n          .x6-widget-selection-box {\n            opacity: 0;\n          }\n        `)\n      }\n\n\n    })\n  },\n});\n</script>\n<style lang=\"less\" scoped>\n.antx {\n  height: 100%;\n  // border: 1px solid #ddd;\n  border-radius: 6px;\n  #container {\n    height: 100%;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}