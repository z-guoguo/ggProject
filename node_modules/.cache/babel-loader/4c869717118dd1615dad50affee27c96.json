{"ast":null,"code":"import { round } from '../util';\n\nfunction rotate(x, y, rad) {\n  return {\n    x: x * Math.cos(rad) - y * Math.sin(rad),\n    y: x * Math.sin(rad) + y * Math.cos(rad)\n  };\n}\n\nfunction q2c(x1, y1, ax, ay, x2, y2) {\n  const v13 = 1 / 3;\n  const v23 = 2 / 3;\n  return [v13 * x1 + v23 * ax, v13 * y1 + v23 * ay, v13 * x2 + v23 * ax, v13 * y2 + v23 * ay, x2, y2];\n}\n\nfunction a2c(x1, y1, rx, ry, angle, largeArcFlag, sweepFlag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const v120 = Math.PI * 120 / 180;\n  const rad = Math.PI / 180 * (+angle || 0);\n  let res = [];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x; // eslint-disable-line\n\n    y1 = xy.y; // eslint-disable-line\n\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x; // eslint-disable-line\n\n    y2 = xy.y; // eslint-disable-line\n\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = x * x / (rx * rx) + y * y / (ry * ry);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx; // eslint-disable-line\n\n      ry = h * ry; // eslint-disable-line\n    }\n\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n    const k = (largeArcFlag === sweepFlag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = k * rx * y / ry + (x1 + x2) / 2;\n    cy = k * -ry * x / rx + (y1 + y2) / 2;\n    f1 = Math.asin((y1 - cy) / ry);\n    f2 = Math.asin((y2 - cy) / ry);\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n\n    if (!sweepFlag && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  let df = f2 - f1;\n\n  if (Math.abs(df) > v120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2); // eslint-disable-line\n\n    y2 = cy + ry * Math.sin(f2); // eslint-disable-line\n\n    res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = 4 / 3 * (rx * t);\n  const hy = 4 / 3 * (ry * t);\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n\n  {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    const newres = [];\n    const ii = res.length;\n\n    for (let i = 0; i < ii; i += 1) {\n      newres[i] = i % 2 ? rotate(+res[i - 1], +res[i], rad).y : rotate(+res[i], +res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\nfunction parse(pathData) {\n  if (!pathData) {\n    return null;\n  }\n\n  const spaces = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029'; // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n\n  const segmentReg = new RegExp(`([a-z])[${spaces},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${spaces}]*,?[${spaces}]*)+)`, // eslint-disable-line\n  'ig'); // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n\n  const commandParamReg = new RegExp( // eslint-disable-next-line\n  `(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${spaces}]*,?[${spaces}]*`, 'ig');\n  const paramsCount = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n  };\n  const segmetns = [];\n  pathData.replace(segmentReg, (input, cmd, args) => {\n    const params = [];\n    let command = cmd.toLowerCase();\n    args.replace(commandParamReg, (a, b) => {\n      if (b) {\n        params.push(+b);\n      }\n\n      return a;\n    });\n\n    if (command === 'm' && params.length > 2) {\n      segmetns.push([cmd, ...params.splice(0, 2)]);\n      command = 'l';\n      cmd = cmd === 'm' ? 'l' : 'L'; // eslint-disable-line\n    }\n\n    const count = paramsCount[command];\n\n    while (params.length >= count) {\n      segmetns.push([cmd, ...params.splice(0, count)]);\n\n      if (!count) {\n        break;\n      }\n    }\n\n    return input;\n  });\n  return segmetns;\n}\n\nfunction abs(pathString) {\n  const pathArray = parse(pathString); // if invalid string, return 'M 0 0'\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  const segments = [];\n\n  for (let i = 0, ii = pathArray.length; i < ii; i += 1) {\n    const r = [];\n    segments.push(r);\n    const segment = pathArray[i];\n    const command = segment[0];\n\n    if (command !== command.toUpperCase()) {\n      r[0] = command.toUpperCase();\n\n      switch (r[0]) {\n        case 'A':\n          r[1] = segment[1];\n          r[2] = segment[2];\n          r[3] = segment[3];\n          r[4] = segment[4];\n          r[5] = segment[5];\n          r[6] = +segment[6] + x;\n          r[7] = +segment[7] + y;\n          break;\n\n        case 'V':\n          r[1] = +segment[1] + y;\n          break;\n\n        case 'H':\n          r[1] = +segment[1] + x;\n          break;\n\n        case 'M':\n          mx = +segment[1] + x;\n          my = +segment[2] + y;\n\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n\n          break;\n\n        default:\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n\n          break;\n      }\n    } else {\n      for (let j = 0, jj = segment.length; j < jj; j += 1) {\n        r[j] = segment[j];\n      }\n    }\n\n    switch (r[0]) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n\n      case 'H':\n        x = r[1];\n        break;\n\n      case 'V':\n        y = r[1];\n        break;\n\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n    }\n  }\n\n  return segments;\n}\n\nfunction normalize(path) {\n  const pathArray = abs(path);\n  const attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n\n  function processPath(path, d, pcom) {\n    let nx;\n    let ny;\n\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n\n    if (!(path[0] in {\n      T: 1,\n      Q: 1\n    })) {\n      d.qx = null;\n      d.qy = null;\n    }\n\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n\n      case 'A':\n        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n          // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n          // \"If either rx or ry is 0, then this arc is treated as a\n          // straight line segment (a \"lineto\") joining the endpoints.\"\n          return ['L', path[6], path[7]];\n        }\n\n        return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In 'S' case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n\n        return ['C', nx, ny].concat(path.slice(1));\n\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In 'T' case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n          d.qy = d.y * 2 - d.qy; // to case 'S'.\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n\n        return ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        return ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\n      case 'H':\n        return ['L'].concat(path[1], d.y);\n\n      case 'V':\n        return ['L'].concat(d.x, path[1]);\n\n      case 'L':\n        break;\n\n      case 'Z':\n        break;\n\n      default:\n        break;\n    }\n\n    return path;\n  }\n\n  function fixArc(pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      const pi = pp[i];\n\n      while (pi.length) {\n        // if created multiple 'C's, their original seg is saved\n        commands[i] = 'A';\n        i += 1; // eslint-disable-line\n\n        pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n\n      pp.splice(i, 1);\n      ii = pathArray.length;\n    }\n  }\n\n  const commands = []; // path commands of original path p\n\n  let prevCommand = ''; // holder for previous path command of original path\n\n  let ii = pathArray.length;\n\n  for (let i = 0; i < ii; i += 1) {\n    let command = ''; // temporary holder for original path command\n\n    if (pathArray[i]) {\n      command = pathArray[i][0]; // save current path command\n    }\n\n    if (command !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      commands[i] = command; // Save current path command\n\n      if (i > 0) {\n        prevCommand = commands[i - 1]; // Get previous path command pcom\n      }\n    } // Previous path command is inputted to processPath\n\n\n    pathArray[i] = processPath(pathArray[i], attrs, prevCommand);\n\n    if (commands[i] !== 'A' && command === 'C') {\n      commands[i] = 'C'; // 'A' is the only command\n    } // which may produce multiple 'C's\n    // so we have to make sure that 'C' is also 'C' in original path\n\n\n    fixArc(pathArray, i); // fixArc adds also the right amount of 'A's to pcoms\n\n    const seg = pathArray[i];\n    const seglen = seg.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n  } // make sure normalized path data string starts with an M segment\n\n\n  if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n    pathArray.unshift(['M', 0, 0]);\n  }\n\n  return pathArray;\n}\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\n\n\nexport function normalizePathData(pathData) {\n  return normalize(pathData).map(segment => segment.map(item => typeof item === 'string' ? item : round(item, 2))).join(',').split(',').join(' ');\n}","map":{"version":3,"mappings":"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","names":["round","rotate","x","y","rad","Math","cos","sin","q2c","x1","y1","ax","ay","x2","y2","v13","v23","a2c","rx","ry","angle","largeArcFlag","sweepFlag","recursive","v120","PI","res","xy","f1","f2","cx","cy","h","sqrt","rx2","ry2","k","abs","asin","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","concat","join","split","newres","ii","length","i","parse","pathData","spaces","segmentReg","RegExp","commandParamReg","paramsCount","a","c","l","m","q","s","v","z","segmetns","replace","input","cmd","args","params","command","toLowerCase","b","push","splice","count","pathString","pathArray","mx","my","segments","r","segment","toUpperCase","j","jj","normalize","path","attrs","bx","by","X","Y","qx","qy","processPath","d","pcom","nx","ny","T","Q","parseFloat","apply","slice","fixArc","pp","shift","pi","commands","prevCommand","seg","seglen","unshift","normalizePathData","map","item"],"sourceRoot":"","sources":["../../../src/geometry/path/normalize.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}