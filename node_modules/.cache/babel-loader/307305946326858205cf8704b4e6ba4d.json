{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { edgeArgsToId, isFunction } from '../util';\nimport { GraphEnum } from './enum';\nimport { decrementOrRemoveEntry, edgeArgsToObj, edgeObjToId, incrementOrInitEntry } from '../util';\nimport { read, write } from './toJSON';\nvar defaultOption = {\n  compound: false,\n  multigraph: false,\n  directed: true\n};\n\nvar Graph = /*#__PURE__*/function () {\n  // Graph option or basic props\n\n  /**\n   * @description Label for this graph itself\n   * @description.zh-CN 图本身的标签（label）\n   * @default undefined\n   */\n\n  /**\n   * @description Number of nodes in the graph\n   * @description.zh-CN 节点的数量\n   * @default 0\n   */\n\n  /**\n   * @description Number of edges in the graph\n   * @description.zh-CN 节点的数量\n   * @default 0\n   */\n\n  /**\n   * @description return node label with its id\n   * @description.zh-CN 返回节点的默认的标签\n   */\n\n  /**\n   * @description return edge label with its id\n   * @description.zh-CN 返回边的默认的标签\n   */\n  function Graph() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Graph);\n\n    this.directed = true;\n    this.multigraph = false;\n    this.compound = false;\n    this.GRAPH_NODE = GraphEnum.GRAPH_NODE;\n    this.label = void 0;\n    this.nodeCountNum = 0;\n    this.edgeCountNum = 0;\n\n    this.defaultNodeLabelFn = function () {\n      return undefined;\n    };\n\n    this.defaultEdgeLabelFn = function () {\n      return undefined;\n    };\n\n    this.parentMap = void 0;\n    this.childrenMap = void 0;\n    this.nodesLabelMap = new Map();\n    this.inEdgesMap = new Map();\n    this.outEdgesMap = new Map();\n    this.predecessorsMap = new Map();\n    this.successorsMap = new Map();\n    this.edgesMap = new Map();\n    this.edgesLabelsMap = new Map();\n\n    this.isDirected = function () {\n      return _this.directed;\n    };\n\n    this.isMultigraph = function () {\n      return _this.multigraph;\n    };\n\n    this.isCompound = function () {\n      return _this.compound;\n    };\n\n    this.setGraph = function (label) {\n      _this.label = label;\n      return _this;\n    };\n\n    this.graph = function () {\n      return _this.label;\n    };\n\n    this.setDefaultNodeLabel = function (newDefault) {\n      if (isFunction(newDefault)) {\n        _this.defaultNodeLabelFn = newDefault;\n      } else {\n        _this.defaultNodeLabelFn = function () {\n          return newDefault;\n        };\n      }\n\n      return _this;\n    };\n\n    this.nodeCount = function () {\n      return _this.nodeCountNum;\n    };\n\n    this.node = function (n) {\n      return _this.nodesLabelMap.get(n);\n    };\n\n    this.nodes = function () {\n      return Array.from(_this.nodesLabelMap.keys());\n    };\n\n    this.sources = function () {\n      return _this.nodes().filter(function (n) {\n        var _this$inEdgesMap$get;\n\n        return !((_this$inEdgesMap$get = _this.inEdgesMap.get(n)) === null || _this$inEdgesMap$get === void 0 ? void 0 : _this$inEdgesMap$get.size);\n      });\n    };\n\n    this.sinks = function () {\n      return _this.nodes().filter(function (n) {\n        var _this$outEdgesMap$get;\n\n        return !((_this$outEdgesMap$get = _this.outEdgesMap.get(n)) === null || _this$outEdgesMap$get === void 0 ? void 0 : _this$outEdgesMap$get.size);\n      });\n    };\n\n    this.setNodes = function (nodes, value) {\n      nodes.map(function (node) {\n        return _this.setNode(node, value);\n      });\n      return _this;\n    };\n\n    this.hasNode = function (node) {\n      return _this.nodesLabelMap.has(node);\n    };\n\n    this.checkCompound = function () {\n      if (!_this.isCompound()) {\n        throw new Error('Cannot construct parent-children relations in a non-compound graph');\n      }\n    };\n\n    this.parent = function (node) {\n      if (_this.isCompound()) {\n        var _this$parentMap;\n\n        var parent = (_this$parentMap = _this.parentMap) === null || _this$parentMap === void 0 ? void 0 : _this$parentMap.get(node);\n\n        if (parent !== _this.GRAPH_NODE) {\n          return parent;\n        }\n      }\n    };\n\n    this.removeFromParentsChildList = function (node) {\n      var targetParent = _this.parentMap.get(node);\n\n      _this.childrenMap.get(targetParent).delete(node);\n    };\n\n    this.setParent = function (node, parent) {\n      var _this$parentMap2, _this$childrenMap;\n\n      _this.checkCompound();\n\n      var realParent = parent === undefined ? _this.GRAPH_NODE : parent;\n\n      var checkNode = _this.parent(realParent);\n\n      while (checkNode) {\n        if (node === checkNode) {\n          throw new Error('Setting ' + parent + ' as parent of ' + node + ' would create a cycle');\n        }\n\n        checkNode = _this.parent(checkNode);\n      }\n\n      if (parent) {\n        _this.setNode(parent);\n      }\n\n      _this.setNode(node);\n\n      _this.removeFromParentsChildList(node);\n\n      (_this$parentMap2 = _this.parentMap) === null || _this$parentMap2 === void 0 ? void 0 : _this$parentMap2.set(node, realParent);\n\n      var realParentChilren = _this.childrenMap.get(realParent);\n\n      realParentChilren.set(node, true);\n      (_this$childrenMap = _this.childrenMap) === null || _this$childrenMap === void 0 ? void 0 : _this$childrenMap.set(realParent, realParentChilren);\n      return _this;\n    };\n\n    this.children = function (node) {\n      var targetNode = node === undefined ? _this.GRAPH_NODE : node;\n\n      if (_this.isCompound()) {\n        var _this$childrenMap2;\n\n        var target = (_this$childrenMap2 = _this.childrenMap) === null || _this$childrenMap2 === void 0 ? void 0 : _this$childrenMap2.get(targetNode);\n\n        if (target) {\n          return Array.from(target.keys());\n        }\n\n        return undefined;\n      }\n\n      if (targetNode === _this.GRAPH_NODE) {\n        return _this.nodes();\n      }\n\n      if (node && _this.hasNode(node)) {\n        return [];\n      }\n    };\n\n    this.predecessors = function (node) {\n      var preds = _this.predecessorsMap.get(node);\n\n      return preds ? Array.from(preds.keys()) : undefined;\n    };\n\n    this.successors = function (node) {\n      var succs = _this.successorsMap.get(node);\n\n      return succs ? Array.from(succs.keys()) : undefined;\n    };\n\n    this.neighbors = function (node) {\n      var _this$predecessors;\n\n      if (!_this.hasNode(node)) {\n        return undefined;\n      }\n\n      return Array.from(new Set((_this$predecessors = _this.predecessors(node)) === null || _this$predecessors === void 0 ? void 0 : _this$predecessors.concat(_this.successors(node))));\n    };\n\n    this.isLeaf = function (node) {\n      var _this$neighbors;\n\n      if (_this.isDirected()) {\n        var _this$successors;\n\n        return !((_this$successors = _this.successors(node)) === null || _this$successors === void 0 ? void 0 : _this$successors.length);\n      }\n\n      return !((_this$neighbors = _this.neighbors(node)) === null || _this$neighbors === void 0 ? void 0 : _this$neighbors.length);\n    };\n\n    this.filterNodes = function (filter) {\n      var directed = _this.directed,\n          multigraph = _this.multigraph,\n          compound = _this.compound;\n      var copyGraph = new Graph({\n        directed: directed,\n        multigraph: multigraph,\n        compound: compound\n      });\n      copyGraph.setGraph(_this.graph());\n\n      _this.nodes().forEach(function (n) {\n        if (filter(n)) {\n          copyGraph.setNode(n, _this.node(n));\n        }\n      });\n\n      _this.edges().forEach(function (edgeObj) {\n        if (copyGraph.hasNode(edgeObj.v) && copyGraph.hasNode(edgeObj.w)) {\n          copyGraph.setEdgeObj(edgeObj, _this.edge(edgeObj));\n        }\n      });\n\n      if (compound) {\n        var findParent = function findParent(node) {\n          var parent = _this.parent(node);\n\n          while (parent !== undefined && !copyGraph.hasNode(parent)) {\n            parent = _this.parent(parent);\n          }\n\n          return parent;\n        };\n\n        copyGraph.nodes().forEach(function (node) {\n          copyGraph.setParent(node, findParent(node));\n        });\n      }\n\n      return copyGraph;\n    };\n\n    this.setDefaultEdgeLabel = function (newDefault) {\n      if (isFunction(newDefault)) {\n        _this.defaultEdgeLabelFn = newDefault;\n      } else {\n        _this.defaultEdgeLabelFn = function () {\n          return newDefault;\n        };\n      }\n\n      return _this;\n    };\n\n    this.edgeCount = function () {\n      return _this.edgeCountNum;\n    };\n\n    this.setEdgeObj = function (edgeObj, value) {\n      return _this.setEdge(edgeObj.v, edgeObj.w, value, edgeObj.name);\n    };\n\n    this.setPath = function (edges, value) {\n      edges.reduce(function (v, w) {\n        _this.setEdge(v, w, value);\n\n        return w;\n      });\n      return _this;\n    };\n\n    this.edgeFromArgs = function (v, w, name) {\n      return _this.edge({\n        v: v,\n        w: w,\n        name: name\n      });\n    };\n\n    this.edge = function (edgeObj) {\n      return _this.edgesLabelsMap.get(edgeObjToId(_this.isDirected(), edgeObj));\n    };\n\n    this.hasEdge = function (v, w, name) {\n      return _this.edgesLabelsMap.has(edgeObjToId(_this.isDirected(), {\n        v: v,\n        w: w,\n        name: name\n      }));\n    };\n\n    this.removeEdgeObj = function (_ref) {\n      var v = _ref.v,\n          w = _ref.w,\n          name = _ref.name;\n      return _this.removeEdge(v, w, name);\n    };\n\n    this.edges = function () {\n      return Array.from(_this.edgesMap.values());\n    };\n\n    this.inEdges = function (v, u) {\n      var inV = _this.inEdgesMap.get(v);\n\n      if (inV) {\n        return Array.from(inV.values()).filter(function (e) {\n          return !u || e.v === u;\n        });\n      }\n\n      return undefined;\n    };\n\n    this.outEdges = function (w, u) {\n      var outW = _this.outEdgesMap.get(w);\n\n      if (outW) {\n        return Array.from(outW.values()).filter(function (e) {\n          return !u || e.w === u;\n        });\n      }\n\n      return undefined;\n    };\n\n    this.nodeEdges = function (v, w) {\n      var _this$inEdges;\n\n      if (!_this.hasNode(v)) {\n        return undefined;\n      }\n\n      return (_this$inEdges = _this.inEdges(v, w)) === null || _this$inEdges === void 0 ? void 0 : _this$inEdges.concat(_this.outEdges(v, w));\n    };\n\n    this.toJSON = function () {\n      return write(_this);\n    };\n\n    this.nodeInDegree = function (node) {\n      var inEdges = _this.inEdgesMap.get(node);\n\n      if (inEdges) {\n        return inEdges.size;\n      }\n\n      return 0;\n    };\n\n    this.nodeOutDegree = function (node) {\n      var outEdges = _this.outEdgesMap.get(node);\n\n      if (outEdges) {\n        return outEdges.size;\n      }\n\n      return 0;\n    };\n\n    this.nodeDegree = function (node) {\n      return _this.nodeInDegree(node) + _this.nodeOutDegree(node);\n    };\n\n    this.source = function (edge) {\n      return edge.v;\n    };\n\n    this.target = function (edge) {\n      return edge.w;\n    };\n\n    var resultOptions = _objectSpread(_objectSpread({}, defaultOption), options);\n\n    this.compound = resultOptions.compound;\n    this.directed = resultOptions.directed;\n    this.multigraph = resultOptions.multigraph;\n\n    if (this.compound) {\n      this.parentMap = new Map();\n      this.childrenMap = new Map();\n    }\n  } // Map for graph\n\n  /**\n   * @description Map for parent relationship\n   * @description.zh-CN 父子关系的映射\n   */\n\n\n  _createClass(Graph, [{\n    key: \"setNode\",\n    value:\n    /**\n     * @description Set Node label in graph if node not in graph then create it\n     * @description.zh-CN 设置节点的label，如果这个节点不在图中，则在图中创建这个节点\n     * @param node\n     * @param value\n     * @returns\n     */\n    function setNode(node, value) {\n      var nodesLabelMap = this.nodesLabelMap,\n          defaultNodeLabelFn = this.defaultNodeLabelFn,\n          isCompound = this.isCompound,\n          parentMap = this.parentMap,\n          childrenMap = this.childrenMap,\n          inEdgesMap = this.inEdgesMap,\n          outEdgesMap = this.outEdgesMap,\n          predecessorsMap = this.predecessorsMap,\n          successorsMap = this.successorsMap; // 如果节点不在图中，则创建节点\n\n      if (nodesLabelMap.has(node)) {\n        if (value !== undefined) {\n          nodesLabelMap.set(node, value);\n        }\n\n        return this;\n      }\n\n      nodesLabelMap.set(node, value || defaultNodeLabelFn(node)); // 如果是复合图，则创建节点的子节点\n\n      if (isCompound()) {\n        var _childrenMap$get;\n\n        parentMap === null || parentMap === void 0 ? void 0 : parentMap.set(node, this.GRAPH_NODE);\n        childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.set(node, new Map());\n\n        if (!(childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.has(this.GRAPH_NODE))) {\n          childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.set(this.GRAPH_NODE, new Map());\n        }\n\n        childrenMap === null || childrenMap === void 0 ? void 0 : (_childrenMap$get = childrenMap.get(this.GRAPH_NODE)) === null || _childrenMap$get === void 0 ? void 0 : _childrenMap$get.set(node, true);\n      }\n\n      [inEdgesMap, outEdgesMap, predecessorsMap, successorsMap].forEach(function (map) {\n        return map.set(node, new Map());\n      });\n      this.nodeCountNum += 1;\n      return this;\n    }\n    /**\n     * @description Set nodes or add nodes in batch\n     * @description.zh-CN 批量设置或者创建节点\n     * @param nodes\n     * @param value\n     * @returns\n     */\n\n  }, {\n    key: \"removeNode\",\n    value:\n    /**\n     * @description Remove node from graph\n     * @description.zh-CN 将节点从图中移除\n     * @param node\n     * @returns\n     */\n    function removeNode(node) {\n      var _this2 = this;\n\n      if (this.hasNode(node)) {\n        var cleanEdge = function cleanEdge(edgeObj) {\n          _this2.removeEdge(edgeObj.v, edgeObj.w, edgeObj.name);\n        };\n\n        var inEdgesMap = this.inEdgesMap,\n            outEdgesMap = this.outEdgesMap,\n            predecessorsMap = this.predecessorsMap,\n            successorsMap = this.successorsMap,\n            nodesLabelMap = this.nodesLabelMap;\n\n        if (this.isCompound()) {\n          var _this$parentMap3, _this$children, _this$childrenMap3;\n\n          this.removeFromParentsChildList(node);\n          (_this$parentMap3 = this.parentMap) === null || _this$parentMap3 === void 0 ? void 0 : _this$parentMap3.delete(node);\n          (_this$children = this.children(node)) === null || _this$children === void 0 ? void 0 : _this$children.forEach(function (n) {\n            return _this2.setParent(n);\n          });\n          (_this$childrenMap3 = this.childrenMap) === null || _this$childrenMap3 === void 0 ? void 0 : _this$childrenMap3.delete(node);\n        }\n\n        var inE = inEdgesMap.get(node);\n        var outE = outEdgesMap.get(node);\n        Array.from(inE.values()).forEach(function (edge) {\n          return cleanEdge(edge);\n        });\n        Array.from(outE.values()).forEach(function (edge) {\n          return cleanEdge(edge);\n        });\n        nodesLabelMap.delete(node);\n        inEdgesMap.delete(node);\n        outEdgesMap.delete(node);\n        predecessorsMap.delete(node);\n        successorsMap.delete(node);\n        this.nodeCountNum -= 1;\n      }\n\n      return this;\n    }\n    /**\n     * @description Set function that generate default label for edge, if param is non-function value then default label will always be this value;\n     * @description.zh-CN 设置默认获取边Label的方法，如果传入不是函数的，那么默认label 的值只会是传入值\n     * @param newDefault\n     * @returns\n     */\n\n  }, {\n    key: \"setEdge\",\n    value:\n    /**\n     * @description set edge value, if nodes or edges not exsit then add to graph\n     * @description.zh-CN 设置边的属性，如果边或节点不存在，那么将他们加入这个图\n     * @param v\n     * @param w\n     * @param value\n     * @param name\n     * @returns\n     */\n    function setEdge(v_, w_, value, name) {\n      var _this$inEdgesMap$get2, _this$outEdgesMap$get2;\n\n      var edgeObj = edgeArgsToObj(this.isDirected(), v_, w_, name);\n      var edgeId = edgeObjToId(this.isDirected(), edgeObj);\n      var v = edgeObj.v,\n          w = edgeObj.w;\n\n      if (this.edgesLabelsMap.has(edgeId)) {\n        this.edgesLabelsMap.set(edgeId, value);\n        return this;\n      }\n\n      if (name !== undefined && !this.isMultigraph()) {\n        throw new Error('Cannot set a named edge when isMultigraph = false');\n      }\n\n      this.setNode(v);\n      this.setNode(w);\n      this.edgesLabelsMap.set(edgeId, value || this.defaultEdgeLabelFn(v, w, name));\n      Object.freeze(edgeObj);\n      this.edgesMap.set(edgeId, edgeObj);\n      var preds = this.predecessorsMap.get(w);\n      var succs = this.successorsMap.get(v);\n      incrementOrInitEntry(preds, v);\n      incrementOrInitEntry(succs, w);\n      (_this$inEdgesMap$get2 = this.inEdgesMap.get(w)) === null || _this$inEdgesMap$get2 === void 0 ? void 0 : _this$inEdgesMap$get2.set(edgeId, edgeObj);\n      (_this$outEdgesMap$get2 = this.outEdgesMap.get(v)) === null || _this$outEdgesMap$get2 === void 0 ? void 0 : _this$outEdgesMap$get2.set(edgeId, edgeObj);\n      this.edgeCountNum += 1;\n      return this;\n    }\n  }, {\n    key: \"removeEdge\",\n    value:\n    /**\n     * @description remove a specific edge\n     * @description.zh-CN 删除一条边\n     * @param v\n     * @param w\n     * @param name\n     * @returns\n     */\n    function removeEdge(v_, w_, name) {\n      var edgeId = edgeArgsToId(this.isDirected(), v_, w_, name);\n      var edgeObj = this.edgesMap.get(edgeId);\n\n      if (edgeObj) {\n        var _edgeArgsToObj = edgeArgsToObj(this.isDirected(), v_, w_, name),\n            v = _edgeArgsToObj.v,\n            w = _edgeArgsToObj.w;\n\n        this.edgesLabelsMap.delete(edgeId);\n        this.edgesMap.delete(edgeId);\n        var preds = this.predecessorsMap.get(w);\n        var succs = this.successorsMap.get(v);\n        decrementOrRemoveEntry(preds, v);\n        decrementOrRemoveEntry(succs, w);\n        this.inEdgesMap.get(w).delete(edgeId);\n        this.outEdgesMap.get(v).delete(edgeId);\n        this.edgeCountNum -= 1;\n      }\n\n      return this;\n    }\n    /**\n     * @description remove a specific edge by edge object\n     * @description.zh-CN 删除一条边\n     */\n\n  }]);\n\n  return Graph;\n}();\n\nGraph.fromJSON = read;\nexport { Graph as default };","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","edgeArgsToId","isFunction","GraphEnum","decrementOrRemoveEntry","edgeArgsToObj","edgeObjToId","incrementOrInitEntry","read","write","defaultOption","compound","multigraph","directed","Graph","_this","options","undefined","GRAPH_NODE","label","nodeCountNum","edgeCountNum","defaultNodeLabelFn","defaultEdgeLabelFn","parentMap","childrenMap","nodesLabelMap","Map","inEdgesMap","outEdgesMap","predecessorsMap","successorsMap","edgesMap","edgesLabelsMap","isDirected","isMultigraph","isCompound","setGraph","graph","setDefaultNodeLabel","newDefault","nodeCount","node","n","get","nodes","Array","from","sources","_this$inEdgesMap$get","size","sinks","_this$outEdgesMap$get","setNodes","map","setNode","hasNode","has","checkCompound","Error","parent","_this$parentMap","removeFromParentsChildList","targetParent","delete","setParent","_this$parentMap2","_this$childrenMap","realParent","checkNode","set","realParentChilren","children","targetNode","_this$childrenMap2","predecessors","preds","successors","succs","neighbors","_this$predecessors","Set","concat","isLeaf","_this$neighbors","_this$successors","filterNodes","copyGraph","edges","edgeObj","v","w","setEdgeObj","edge","findParent","setDefaultEdgeLabel","edgeCount","setEdge","name","setPath","reduce","edgeFromArgs","hasEdge","removeEdgeObj","_ref","removeEdge","values","inEdges","u","inV","e","outEdges","outW","nodeEdges","_this$inEdges","toJSON","nodeInDegree","nodeOutDegree","nodeDegree","resultOptions","_childrenMap$get","removeNode","_this2","cleanEdge","_this$parentMap3","_this$children","_this$childrenMap3","inE","outE","v_","w_","_this$inEdgesMap$get2","_this$outEdgesMap$get2","edgeId","freeze","_edgeArgsToObj","fromJSON","default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/graphlib/es/Graph/index.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { edgeArgsToId, isFunction } from '../util';\nimport { GraphEnum } from './enum';\nimport { decrementOrRemoveEntry, edgeArgsToObj, edgeObjToId, incrementOrInitEntry } from '../util';\nimport { read, write } from './toJSON';\nvar defaultOption = {\n  compound: false,\n  multigraph: false,\n  directed: true\n};\n\nvar Graph = /*#__PURE__*/function () {\n  // Graph option or basic props\n\n  /**\n   * @description Label for this graph itself\n   * @description.zh-CN 图本身的标签（label）\n   * @default undefined\n   */\n\n  /**\n   * @description Number of nodes in the graph\n   * @description.zh-CN 节点的数量\n   * @default 0\n   */\n\n  /**\n   * @description Number of edges in the graph\n   * @description.zh-CN 节点的数量\n   * @default 0\n   */\n\n  /**\n   * @description return node label with its id\n   * @description.zh-CN 返回节点的默认的标签\n   */\n\n  /**\n   * @description return edge label with its id\n   * @description.zh-CN 返回边的默认的标签\n   */\n  function Graph() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Graph);\n\n    this.directed = true;\n    this.multigraph = false;\n    this.compound = false;\n    this.GRAPH_NODE = GraphEnum.GRAPH_NODE;\n    this.label = void 0;\n    this.nodeCountNum = 0;\n    this.edgeCountNum = 0;\n\n    this.defaultNodeLabelFn = function () {\n      return undefined;\n    };\n\n    this.defaultEdgeLabelFn = function () {\n      return undefined;\n    };\n\n    this.parentMap = void 0;\n    this.childrenMap = void 0;\n    this.nodesLabelMap = new Map();\n    this.inEdgesMap = new Map();\n    this.outEdgesMap = new Map();\n    this.predecessorsMap = new Map();\n    this.successorsMap = new Map();\n    this.edgesMap = new Map();\n    this.edgesLabelsMap = new Map();\n\n    this.isDirected = function () {\n      return _this.directed;\n    };\n\n    this.isMultigraph = function () {\n      return _this.multigraph;\n    };\n\n    this.isCompound = function () {\n      return _this.compound;\n    };\n\n    this.setGraph = function (label) {\n      _this.label = label;\n      return _this;\n    };\n\n    this.graph = function () {\n      return _this.label;\n    };\n\n    this.setDefaultNodeLabel = function (newDefault) {\n      if (isFunction(newDefault)) {\n        _this.defaultNodeLabelFn = newDefault;\n      } else {\n        _this.defaultNodeLabelFn = function () {\n          return newDefault;\n        };\n      }\n\n      return _this;\n    };\n\n    this.nodeCount = function () {\n      return _this.nodeCountNum;\n    };\n\n    this.node = function (n) {\n      return _this.nodesLabelMap.get(n);\n    };\n\n    this.nodes = function () {\n      return Array.from(_this.nodesLabelMap.keys());\n    };\n\n    this.sources = function () {\n      return _this.nodes().filter(function (n) {\n        var _this$inEdgesMap$get;\n\n        return !((_this$inEdgesMap$get = _this.inEdgesMap.get(n)) === null || _this$inEdgesMap$get === void 0 ? void 0 : _this$inEdgesMap$get.size);\n      });\n    };\n\n    this.sinks = function () {\n      return _this.nodes().filter(function (n) {\n        var _this$outEdgesMap$get;\n\n        return !((_this$outEdgesMap$get = _this.outEdgesMap.get(n)) === null || _this$outEdgesMap$get === void 0 ? void 0 : _this$outEdgesMap$get.size);\n      });\n    };\n\n    this.setNodes = function (nodes, value) {\n      nodes.map(function (node) {\n        return _this.setNode(node, value);\n      });\n      return _this;\n    };\n\n    this.hasNode = function (node) {\n      return _this.nodesLabelMap.has(node);\n    };\n\n    this.checkCompound = function () {\n      if (!_this.isCompound()) {\n        throw new Error('Cannot construct parent-children relations in a non-compound graph');\n      }\n    };\n\n    this.parent = function (node) {\n      if (_this.isCompound()) {\n        var _this$parentMap;\n\n        var parent = (_this$parentMap = _this.parentMap) === null || _this$parentMap === void 0 ? void 0 : _this$parentMap.get(node);\n\n        if (parent !== _this.GRAPH_NODE) {\n          return parent;\n        }\n      }\n    };\n\n    this.removeFromParentsChildList = function (node) {\n      var targetParent = _this.parentMap.get(node);\n\n      _this.childrenMap.get(targetParent).delete(node);\n    };\n\n    this.setParent = function (node, parent) {\n      var _this$parentMap2, _this$childrenMap;\n\n      _this.checkCompound();\n\n      var realParent = parent === undefined ? _this.GRAPH_NODE : parent;\n\n      var checkNode = _this.parent(realParent);\n\n      while (checkNode) {\n        if (node === checkNode) {\n          throw new Error('Setting ' + parent + ' as parent of ' + node + ' would create a cycle');\n        }\n\n        checkNode = _this.parent(checkNode);\n      }\n\n      if (parent) {\n        _this.setNode(parent);\n      }\n\n      _this.setNode(node);\n\n      _this.removeFromParentsChildList(node);\n\n      (_this$parentMap2 = _this.parentMap) === null || _this$parentMap2 === void 0 ? void 0 : _this$parentMap2.set(node, realParent);\n\n      var realParentChilren = _this.childrenMap.get(realParent);\n\n      realParentChilren.set(node, true);\n      (_this$childrenMap = _this.childrenMap) === null || _this$childrenMap === void 0 ? void 0 : _this$childrenMap.set(realParent, realParentChilren);\n      return _this;\n    };\n\n    this.children = function (node) {\n      var targetNode = node === undefined ? _this.GRAPH_NODE : node;\n\n      if (_this.isCompound()) {\n        var _this$childrenMap2;\n\n        var target = (_this$childrenMap2 = _this.childrenMap) === null || _this$childrenMap2 === void 0 ? void 0 : _this$childrenMap2.get(targetNode);\n\n        if (target) {\n          return Array.from(target.keys());\n        }\n\n        return undefined;\n      }\n\n      if (targetNode === _this.GRAPH_NODE) {\n        return _this.nodes();\n      }\n\n      if (node && _this.hasNode(node)) {\n        return [];\n      }\n    };\n\n    this.predecessors = function (node) {\n      var preds = _this.predecessorsMap.get(node);\n\n      return preds ? Array.from(preds.keys()) : undefined;\n    };\n\n    this.successors = function (node) {\n      var succs = _this.successorsMap.get(node);\n\n      return succs ? Array.from(succs.keys()) : undefined;\n    };\n\n    this.neighbors = function (node) {\n      var _this$predecessors;\n\n      if (!_this.hasNode(node)) {\n        return undefined;\n      }\n\n      return Array.from(new Set((_this$predecessors = _this.predecessors(node)) === null || _this$predecessors === void 0 ? void 0 : _this$predecessors.concat(_this.successors(node))));\n    };\n\n    this.isLeaf = function (node) {\n      var _this$neighbors;\n\n      if (_this.isDirected()) {\n        var _this$successors;\n\n        return !((_this$successors = _this.successors(node)) === null || _this$successors === void 0 ? void 0 : _this$successors.length);\n      }\n\n      return !((_this$neighbors = _this.neighbors(node)) === null || _this$neighbors === void 0 ? void 0 : _this$neighbors.length);\n    };\n\n    this.filterNodes = function (filter) {\n      var directed = _this.directed,\n          multigraph = _this.multigraph,\n          compound = _this.compound;\n      var copyGraph = new Graph({\n        directed: directed,\n        multigraph: multigraph,\n        compound: compound\n      });\n      copyGraph.setGraph(_this.graph());\n\n      _this.nodes().forEach(function (n) {\n        if (filter(n)) {\n          copyGraph.setNode(n, _this.node(n));\n        }\n      });\n\n      _this.edges().forEach(function (edgeObj) {\n        if (copyGraph.hasNode(edgeObj.v) && copyGraph.hasNode(edgeObj.w)) {\n          copyGraph.setEdgeObj(edgeObj, _this.edge(edgeObj));\n        }\n      });\n\n      if (compound) {\n        var findParent = function findParent(node) {\n          var parent = _this.parent(node);\n\n          while (parent !== undefined && !copyGraph.hasNode(parent)) {\n            parent = _this.parent(parent);\n          }\n\n          return parent;\n        };\n\n        copyGraph.nodes().forEach(function (node) {\n          copyGraph.setParent(node, findParent(node));\n        });\n      }\n\n      return copyGraph;\n    };\n\n    this.setDefaultEdgeLabel = function (newDefault) {\n      if (isFunction(newDefault)) {\n        _this.defaultEdgeLabelFn = newDefault;\n      } else {\n        _this.defaultEdgeLabelFn = function () {\n          return newDefault;\n        };\n      }\n\n      return _this;\n    };\n\n    this.edgeCount = function () {\n      return _this.edgeCountNum;\n    };\n\n    this.setEdgeObj = function (edgeObj, value) {\n      return _this.setEdge(edgeObj.v, edgeObj.w, value, edgeObj.name);\n    };\n\n    this.setPath = function (edges, value) {\n      edges.reduce(function (v, w) {\n        _this.setEdge(v, w, value);\n\n        return w;\n      });\n      return _this;\n    };\n\n    this.edgeFromArgs = function (v, w, name) {\n      return _this.edge({\n        v: v,\n        w: w,\n        name: name\n      });\n    };\n\n    this.edge = function (edgeObj) {\n      return _this.edgesLabelsMap.get(edgeObjToId(_this.isDirected(), edgeObj));\n    };\n\n    this.hasEdge = function (v, w, name) {\n      return _this.edgesLabelsMap.has(edgeObjToId(_this.isDirected(), {\n        v: v,\n        w: w,\n        name: name\n      }));\n    };\n\n    this.removeEdgeObj = function (_ref) {\n      var v = _ref.v,\n          w = _ref.w,\n          name = _ref.name;\n      return _this.removeEdge(v, w, name);\n    };\n\n    this.edges = function () {\n      return Array.from(_this.edgesMap.values());\n    };\n\n    this.inEdges = function (v, u) {\n      var inV = _this.inEdgesMap.get(v);\n\n      if (inV) {\n        return Array.from(inV.values()).filter(function (e) {\n          return !u || e.v === u;\n        });\n      }\n\n      return undefined;\n    };\n\n    this.outEdges = function (w, u) {\n      var outW = _this.outEdgesMap.get(w);\n\n      if (outW) {\n        return Array.from(outW.values()).filter(function (e) {\n          return !u || e.w === u;\n        });\n      }\n\n      return undefined;\n    };\n\n    this.nodeEdges = function (v, w) {\n      var _this$inEdges;\n\n      if (!_this.hasNode(v)) {\n        return undefined;\n      }\n\n      return (_this$inEdges = _this.inEdges(v, w)) === null || _this$inEdges === void 0 ? void 0 : _this$inEdges.concat(_this.outEdges(v, w));\n    };\n\n    this.toJSON = function () {\n      return write(_this);\n    };\n\n    this.nodeInDegree = function (node) {\n      var inEdges = _this.inEdgesMap.get(node);\n\n      if (inEdges) {\n        return inEdges.size;\n      }\n\n      return 0;\n    };\n\n    this.nodeOutDegree = function (node) {\n      var outEdges = _this.outEdgesMap.get(node);\n\n      if (outEdges) {\n        return outEdges.size;\n      }\n\n      return 0;\n    };\n\n    this.nodeDegree = function (node) {\n      return _this.nodeInDegree(node) + _this.nodeOutDegree(node);\n    };\n\n    this.source = function (edge) {\n      return edge.v;\n    };\n\n    this.target = function (edge) {\n      return edge.w;\n    };\n\n    var resultOptions = _objectSpread(_objectSpread({}, defaultOption), options);\n\n    this.compound = resultOptions.compound;\n    this.directed = resultOptions.directed;\n    this.multigraph = resultOptions.multigraph;\n\n    if (this.compound) {\n      this.parentMap = new Map();\n      this.childrenMap = new Map();\n    }\n  } // Map for graph\n\n  /**\n   * @description Map for parent relationship\n   * @description.zh-CN 父子关系的映射\n   */\n\n\n  _createClass(Graph, [{\n    key: \"setNode\",\n    value:\n    /**\n     * @description Set Node label in graph if node not in graph then create it\n     * @description.zh-CN 设置节点的label，如果这个节点不在图中，则在图中创建这个节点\n     * @param node\n     * @param value\n     * @returns\n     */\n    function setNode(node, value) {\n      var nodesLabelMap = this.nodesLabelMap,\n          defaultNodeLabelFn = this.defaultNodeLabelFn,\n          isCompound = this.isCompound,\n          parentMap = this.parentMap,\n          childrenMap = this.childrenMap,\n          inEdgesMap = this.inEdgesMap,\n          outEdgesMap = this.outEdgesMap,\n          predecessorsMap = this.predecessorsMap,\n          successorsMap = this.successorsMap; // 如果节点不在图中，则创建节点\n\n      if (nodesLabelMap.has(node)) {\n        if (value !== undefined) {\n          nodesLabelMap.set(node, value);\n        }\n\n        return this;\n      }\n\n      nodesLabelMap.set(node, value || defaultNodeLabelFn(node)); // 如果是复合图，则创建节点的子节点\n\n      if (isCompound()) {\n        var _childrenMap$get;\n\n        parentMap === null || parentMap === void 0 ? void 0 : parentMap.set(node, this.GRAPH_NODE);\n        childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.set(node, new Map());\n\n        if (!(childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.has(this.GRAPH_NODE))) {\n          childrenMap === null || childrenMap === void 0 ? void 0 : childrenMap.set(this.GRAPH_NODE, new Map());\n        }\n\n        childrenMap === null || childrenMap === void 0 ? void 0 : (_childrenMap$get = childrenMap.get(this.GRAPH_NODE)) === null || _childrenMap$get === void 0 ? void 0 : _childrenMap$get.set(node, true);\n      }\n\n      [inEdgesMap, outEdgesMap, predecessorsMap, successorsMap].forEach(function (map) {\n        return map.set(node, new Map());\n      });\n      this.nodeCountNum += 1;\n      return this;\n    }\n    /**\n     * @description Set nodes or add nodes in batch\n     * @description.zh-CN 批量设置或者创建节点\n     * @param nodes\n     * @param value\n     * @returns\n     */\n\n  }, {\n    key: \"removeNode\",\n    value:\n    /**\n     * @description Remove node from graph\n     * @description.zh-CN 将节点从图中移除\n     * @param node\n     * @returns\n     */\n    function removeNode(node) {\n      var _this2 = this;\n\n      if (this.hasNode(node)) {\n        var cleanEdge = function cleanEdge(edgeObj) {\n          _this2.removeEdge(edgeObj.v, edgeObj.w, edgeObj.name);\n        };\n\n        var inEdgesMap = this.inEdgesMap,\n            outEdgesMap = this.outEdgesMap,\n            predecessorsMap = this.predecessorsMap,\n            successorsMap = this.successorsMap,\n            nodesLabelMap = this.nodesLabelMap;\n\n        if (this.isCompound()) {\n          var _this$parentMap3, _this$children, _this$childrenMap3;\n\n          this.removeFromParentsChildList(node);\n          (_this$parentMap3 = this.parentMap) === null || _this$parentMap3 === void 0 ? void 0 : _this$parentMap3.delete(node);\n          (_this$children = this.children(node)) === null || _this$children === void 0 ? void 0 : _this$children.forEach(function (n) {\n            return _this2.setParent(n);\n          });\n          (_this$childrenMap3 = this.childrenMap) === null || _this$childrenMap3 === void 0 ? void 0 : _this$childrenMap3.delete(node);\n        }\n\n        var inE = inEdgesMap.get(node);\n        var outE = outEdgesMap.get(node);\n        Array.from(inE.values()).forEach(function (edge) {\n          return cleanEdge(edge);\n        });\n        Array.from(outE.values()).forEach(function (edge) {\n          return cleanEdge(edge);\n        });\n        nodesLabelMap.delete(node);\n        inEdgesMap.delete(node);\n        outEdgesMap.delete(node);\n        predecessorsMap.delete(node);\n        successorsMap.delete(node);\n        this.nodeCountNum -= 1;\n      }\n\n      return this;\n    }\n    /**\n     * @description Set function that generate default label for edge, if param is non-function value then default label will always be this value;\n     * @description.zh-CN 设置默认获取边Label的方法，如果传入不是函数的，那么默认label 的值只会是传入值\n     * @param newDefault\n     * @returns\n     */\n\n  }, {\n    key: \"setEdge\",\n    value:\n    /**\n     * @description set edge value, if nodes or edges not exsit then add to graph\n     * @description.zh-CN 设置边的属性，如果边或节点不存在，那么将他们加入这个图\n     * @param v\n     * @param w\n     * @param value\n     * @param name\n     * @returns\n     */\n    function setEdge(v_, w_, value, name) {\n      var _this$inEdgesMap$get2, _this$outEdgesMap$get2;\n\n      var edgeObj = edgeArgsToObj(this.isDirected(), v_, w_, name);\n      var edgeId = edgeObjToId(this.isDirected(), edgeObj);\n      var v = edgeObj.v,\n          w = edgeObj.w;\n\n      if (this.edgesLabelsMap.has(edgeId)) {\n        this.edgesLabelsMap.set(edgeId, value);\n        return this;\n      }\n\n      if (name !== undefined && !this.isMultigraph()) {\n        throw new Error('Cannot set a named edge when isMultigraph = false');\n      }\n\n      this.setNode(v);\n      this.setNode(w);\n      this.edgesLabelsMap.set(edgeId, value || this.defaultEdgeLabelFn(v, w, name));\n      Object.freeze(edgeObj);\n      this.edgesMap.set(edgeId, edgeObj);\n      var preds = this.predecessorsMap.get(w);\n      var succs = this.successorsMap.get(v);\n      incrementOrInitEntry(preds, v);\n      incrementOrInitEntry(succs, w);\n      (_this$inEdgesMap$get2 = this.inEdgesMap.get(w)) === null || _this$inEdgesMap$get2 === void 0 ? void 0 : _this$inEdgesMap$get2.set(edgeId, edgeObj);\n      (_this$outEdgesMap$get2 = this.outEdgesMap.get(v)) === null || _this$outEdgesMap$get2 === void 0 ? void 0 : _this$outEdgesMap$get2.set(edgeId, edgeObj);\n      this.edgeCountNum += 1;\n      return this;\n    }\n  }, {\n    key: \"removeEdge\",\n    value:\n    /**\n     * @description remove a specific edge\n     * @description.zh-CN 删除一条边\n     * @param v\n     * @param w\n     * @param name\n     * @returns\n     */\n    function removeEdge(v_, w_, name) {\n      var edgeId = edgeArgsToId(this.isDirected(), v_, w_, name);\n      var edgeObj = this.edgesMap.get(edgeId);\n\n      if (edgeObj) {\n        var _edgeArgsToObj = edgeArgsToObj(this.isDirected(), v_, w_, name),\n            v = _edgeArgsToObj.v,\n            w = _edgeArgsToObj.w;\n\n        this.edgesLabelsMap.delete(edgeId);\n        this.edgesMap.delete(edgeId);\n        var preds = this.predecessorsMap.get(w);\n        var succs = this.successorsMap.get(v);\n        decrementOrRemoveEntry(preds, v);\n        decrementOrRemoveEntry(succs, w);\n        this.inEdgesMap.get(w).delete(edgeId);\n        this.outEdgesMap.get(v).delete(edgeId);\n        this.edgeCountNum -= 1;\n      }\n\n      return this;\n    }\n    /**\n     * @description remove a specific edge by edge object\n     * @description.zh-CN 删除一条边\n     */\n\n  }]);\n\n  return Graph;\n}();\n\nGraph.fromJSON = read;\nexport { Graph as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}