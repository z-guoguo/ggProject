{"ast":null,"code":"import { Point } from '../../geometry';\nimport { attr } from './attr';\nimport { getBBox, getTransformToElement } from './geom';\nimport { createSVGTransform, parseTransformString, transformStringToMatrix, matrixToTransformString } from './matrix';\nexport function transform(elem, matrix, options = {}) {\n  if (matrix == null) {\n    return transformStringToMatrix(attr(elem, 'transform'));\n  }\n\n  if (options.absolute) {\n    elem.setAttribute('transform', matrixToTransformString(matrix));\n    return;\n  }\n\n  const transformList = elem.transform;\n  const svgTransform = createSVGTransform(matrix);\n  transformList.baseVal.appendItem(svgTransform);\n}\nexport function translate(elem, tx, ty = 0, options = {}) {\n  let transformAttr = attr(elem, 'transform');\n  const transform = parseTransformString(transformAttr);\n\n  if (tx == null) {\n    return transform.translation;\n  }\n\n  transformAttr = transform.raw;\n  transformAttr = transformAttr.replace(/translate\\([^)]*\\)/g, '').trim();\n  const newTx = options.absolute ? tx : transform.translation.tx + tx;\n  const newTy = options.absolute ? ty : transform.translation.ty + ty;\n  const newTranslate = `translate(${newTx},${newTy})`; // Note that `translate()` is always the first transformation. This is\n  // usually the desired case.\n\n  elem.setAttribute('transform', `${newTranslate} ${transformAttr}`.trim());\n}\nexport function rotate(elem, angle, cx, cy, options = {}) {\n  let transformAttr = attr(elem, 'transform');\n  const transform = parseTransformString(transformAttr);\n\n  if (angle == null) {\n    return transform.rotation;\n  }\n\n  transformAttr = transform.raw;\n  transformAttr = transformAttr.replace(/rotate\\([^)]*\\)/g, '').trim();\n  angle %= 360; // eslint-disable-line\n\n  const newAngle = options.absolute ? angle : transform.rotation.angle + angle;\n  const newOrigin = cx != null && cy != null ? `,${cx},${cy}` : '';\n  const newRotate = `rotate(${newAngle}${newOrigin})`;\n  elem.setAttribute('transform', `${transformAttr} ${newRotate}`.trim());\n}\nexport function scale(elem, sx, sy) {\n  let transformAttr = attr(elem, 'transform');\n  const transform = parseTransformString(transformAttr);\n\n  if (sx == null) {\n    return transform.scale;\n  }\n\n  sy = sy == null ? sx : sy; // eslint-disable-line\n\n  transformAttr = transform.raw;\n  transformAttr = transformAttr.replace(/scale\\([^)]*\\)/g, '').trim();\n  const newScale = `scale(${sx},${sy})`;\n  elem.setAttribute('transform', `${transformAttr} ${newScale}`.trim());\n}\nexport function translateAndAutoOrient(elem, position, reference, target) {\n  const pos = Point.create(position);\n  const ref = Point.create(reference);\n\n  if (!target) {\n    const svg = elem instanceof SVGSVGElement ? elem : elem.ownerSVGElement;\n    target = svg; // eslint-disable-line\n  } // Clean-up previously set transformations except the scale.\n  // If we didn't clean up the previous transformations then they'd\n  // add up with the old ones. Scale is an exception as it doesn't\n  // add up, consider: `this.scale(2).scale(2).scale(2)`. The result\n  // is that the element is scaled by the factor 2, not 8.\n\n\n  const s = scale(elem);\n  elem.setAttribute('transform', '');\n  const bbox = getBBox(elem, {\n    target\n  }).scale(s.sx, s.sy); // 1. Translate to origin.\n\n  const translateToOrigin = createSVGTransform();\n  translateToOrigin.setTranslate(-bbox.x - bbox.width / 2, -bbox.y - bbox.height / 2); // 2. Rotate around origin.\n\n  const rotateAroundOrigin = createSVGTransform();\n  const angle = pos.angleBetween(ref, pos.clone().translate(1, 0));\n  if (angle) rotateAroundOrigin.setRotate(angle, 0, 0); // 3. Translate to the `position` + the offset (half my width)\n  //    towards the `reference` point.\n\n  const translateFromOrigin = createSVGTransform();\n  const finalPosition = pos.clone().move(ref, bbox.width / 2);\n  translateFromOrigin.setTranslate(2 * pos.x - finalPosition.x, 2 * pos.y - finalPosition.y); // 4. Get the current transformation matrix of this node\n\n  const ctm = getTransformToElement(elem, target); // 5. Apply transformations and the scale\n\n  const transform = createSVGTransform();\n  transform.setMatrix(translateFromOrigin.matrix.multiply(rotateAroundOrigin.matrix.multiply(translateToOrigin.matrix.multiply(ctm.scale(s.sx, s.sy)))));\n  elem.setAttribute('transform', matrixToTransformString(transform.matrix));\n}","map":{"version":3,"mappings":"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","names":["Point","attr","getBBox","getTransformToElement","createSVGTransform","parseTransformString","transformStringToMatrix","matrixToTransformString","transform","elem","matrix","options","absolute","setAttribute","transformList","svgTransform","baseVal","appendItem","translate","tx","ty","transformAttr","translation","raw","replace","trim","newTx","newTy","newTranslate","rotate","angle","cx","cy","rotation","newAngle","newOrigin","newRotate","scale","sx","sy","newScale","translateAndAutoOrient","position","reference","target","pos","create","ref","svg","SVGSVGElement","ownerSVGElement","s","bbox","translateToOrigin","setTranslate","x","width","y","height","rotateAroundOrigin","angleBetween","clone","setRotate","translateFromOrigin","finalPosition","move","ctm","setMatrix","multiply"],"sourceRoot":"","sources":["../../../src/util/dom/transform.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}