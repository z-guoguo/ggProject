{"ast":null,"code":"/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\nimport { Container } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { ComponentManager } from './ComponentManager';\nimport { ResourcePool } from './components/framegraph/ResourcePool';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System'; // import { InteractionSystem } from './components/interaction/System';\n\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { CopyPass } from './components/renderer/passes/CopyPass';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RenderPass } from './components/renderer/passes/RenderPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { NameComponent } from './components/scenegraph/NameComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { IDENTIFIER } from './identifier';\nimport { ConfigService } from './services/config/ConfigService';\nimport { InteractorService } from './services/interactor/IteractorService';\nimport ShaderModuleService from './services/shader-module/ShaderModuleService'; // @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\n\nexport var container = new Container(); // @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\n// decorate(injectable(), EventEmitter);\n// container.bind(IDENTIFIER.IEventEmitter).to(EventEmitter);\n// 支持使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\n\nvar DECORATORS = getDecorators(container, false); // Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\n\nexport var lazyInject = function lazyInject(serviceIdentifier) {\n  var original = DECORATORS.lazyInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key); // return link to proto, so own value wont be 'undefined' after component's creation\n\n    if (descriptor) {\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\nexport var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {\n  var original = DECORATORS.lazyMultiInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key);\n\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\n/** global services */\n\ncontainer.bind(IDENTIFIER.ShaderModuleService).to(ShaderModuleService).inSingletonScope();\n/**\n * bind global component managers in root container\n */\n\ncontainer.bind(IDENTIFIER.NameComponentManager).toConstantValue(new ComponentManager(NameComponent));\ncontainer.bind(IDENTIFIER.HierarchyComponentManager).toConstantValue(new ComponentManager(HierarchyComponent));\ncontainer.bind(IDENTIFIER.TransformComponentManager).toConstantValue(new ComponentManager(TransformComponent));\ncontainer.bind(IDENTIFIER.MeshComponentManager).toConstantValue(new ComponentManager(MeshComponent));\ncontainer.bind(IDENTIFIER.CullableComponentManager).toConstantValue(new ComponentManager(CullableComponent));\ncontainer.bind(IDENTIFIER.GeometryComponentManager).toConstantValue(new ComponentManager(GeometryComponent));\ncontainer.bind(IDENTIFIER.MaterialComponentManager).toConstantValue(new ComponentManager(MaterialComponent)); // https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\n\nexport function createWorldContainer() {\n  var worldContainer = new Container();\n  worldContainer.parent = container;\n  /**\n   * bind systems\n   */\n\n  worldContainer.bind(IDENTIFIER.Systems).to(SceneGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.SceneGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(FrameGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.FrameGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MeshSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MeshSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(GeometrySystem).inSingletonScope().whenTargetNamed(IDENTIFIER.GeometrySystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MaterialSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MaterialSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(RendererSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.RendererSystem); // 资源池\n\n  worldContainer.bind(IDENTIFIER.ResourcePool).to(ResourcePool).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.ConfigService).to(ConfigService).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.InteractorService).to(InteractorService).inSingletonScope();\n  /**\n   * bind render passes\n   */\n\n  worldContainer.bind(IDENTIFIER.RenderPass).to(RenderPass).inSingletonScope().whenTargetNamed(RenderPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(CopyPass).inSingletonScope().whenTargetNamed(CopyPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(PixelPickingPass).inSingletonScope().whenTargetNamed(PixelPickingPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPassFactory).toFactory(function (context) {\n    return function (name) {\n      return context.container.getNamed(IDENTIFIER.RenderPass, name);\n    };\n  });\n  return worldContainer;\n}","map":{"version":3,"mappings":"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","names":["Container","getDecorators","ComponentManager","ResourcePool","FrameGraphSystem","GeometryComponent","GeometrySystem","MaterialComponent","MaterialSystem","CullableComponent","MeshComponent","MeshSystem","CopyPass","PixelPickingPass","RenderPass","RendererSystem","HierarchyComponent","NameComponent","SceneGraphSystem","TransformComponent","IDENTIFIER","ConfigService","InteractorService","ShaderModuleService","container","DECORATORS","lazyInject","serviceIdentifier","original","proto","key","descriptor","call","initializer","lazyMultiInject","bind","to","inSingletonScope","NameComponentManager","toConstantValue","HierarchyComponentManager","TransformComponentManager","MeshComponentManager","CullableComponentManager","GeometryComponentManager","MaterialComponentManager","createWorldContainer","worldContainer","parent","Systems","whenTargetNamed","RenderPassFactory","toFactory","context","name","getNamed"],"sources":["../src/inversify.config.ts"],"sourcesContent":["/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\n\nimport { EventEmitter } from 'eventemitter3';\nimport {\n  Container,\n  ContainerModule,\n  decorate,\n  injectable,\n  interfaces,\n} from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { ISystem } from '.';\nimport { ComponentManager } from './ComponentManager';\nimport { ResourcePool } from './components/framegraph/ResourcePool';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System';\n// import { InteractionSystem } from './components/interaction/System';\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { CopyPass } from './components/renderer/passes/CopyPass';\nimport { IRenderPass } from './components/renderer/passes/IRenderPass';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RenderPass } from './components/renderer/passes/RenderPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { NameComponent } from './components/scenegraph/NameComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { IDENTIFIER } from './identifier';\nimport { ConfigService } from './services/config/ConfigService';\nimport { InteractorService } from './services/interactor/IteractorService';\nimport ShaderModuleService from './services/shader-module/ShaderModuleService';\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\nexport const container = new Container();\n\n// @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\n// decorate(injectable(), EventEmitter);\n// container.bind(IDENTIFIER.IEventEmitter).to(EventEmitter);\n// 支持使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\nconst DECORATORS = getDecorators(container, false);\n\ninterface IBabelPropertyDescriptor extends PropertyDescriptor {\n  initializer(): any;\n}\n// Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\nexport const lazyInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    // return link to proto, so own value wont be 'undefined' after component's creation\n    if (descriptor) {\n      descriptor.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\nexport const lazyMultiInject = (\n  serviceIdentifier: interfaces.ServiceIdentifier<any>,\n) => {\n  const original = DECORATORS.lazyMultiInject(serviceIdentifier);\n  // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n  return function(\n    this: any,\n    proto: any,\n    key: string,\n    descriptor?: IBabelPropertyDescriptor,\n  ): void {\n    // make it work as usual\n    original.call(this, proto, key);\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor!.initializer = () => {\n        return proto[key];\n      };\n    }\n  };\n};\n\n/** global services */\ncontainer\n  .bind(IDENTIFIER.ShaderModuleService)\n  .to(ShaderModuleService)\n  .inSingletonScope();\n\n/**\n * bind global component managers in root container\n */\ncontainer\n  .bind<ComponentManager<NameComponent>>(IDENTIFIER.NameComponentManager)\n  .toConstantValue(new ComponentManager(NameComponent));\ncontainer\n  .bind<ComponentManager<HierarchyComponent>>(\n    IDENTIFIER.HierarchyComponentManager,\n  )\n  .toConstantValue(new ComponentManager(HierarchyComponent));\ncontainer\n  .bind<ComponentManager<TransformComponent>>(\n    IDENTIFIER.TransformComponentManager,\n  )\n  .toConstantValue(new ComponentManager(TransformComponent));\ncontainer\n  .bind<ComponentManager<MeshComponent>>(IDENTIFIER.MeshComponentManager)\n  .toConstantValue(new ComponentManager(MeshComponent));\ncontainer\n  .bind<ComponentManager<CullableComponent>>(\n    IDENTIFIER.CullableComponentManager,\n  )\n  .toConstantValue(new ComponentManager(CullableComponent));\ncontainer\n  .bind<ComponentManager<GeometryComponent>>(\n    IDENTIFIER.GeometryComponentManager,\n  )\n  .toConstantValue(new ComponentManager(GeometryComponent));\ncontainer\n  .bind<ComponentManager<MaterialComponent>>(\n    IDENTIFIER.MaterialComponentManager,\n  )\n  .toConstantValue(new ComponentManager(MaterialComponent));\n\n// https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\nexport function createWorldContainer() {\n  const worldContainer = new Container();\n  worldContainer.parent = container;\n\n  /**\n   * bind systems\n   */\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(SceneGraphSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.SceneGraphSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(FrameGraphSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.FrameGraphSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(MeshSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.MeshSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(GeometrySystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.GeometrySystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(MaterialSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.MaterialSystem);\n\n  worldContainer\n    .bind<ISystem>(IDENTIFIER.Systems)\n    .to(RendererSystem)\n    .inSingletonScope()\n    .whenTargetNamed(IDENTIFIER.RendererSystem);\n\n  // 资源池\n  worldContainer\n    .bind(IDENTIFIER.ResourcePool)\n    .to(ResourcePool)\n    .inSingletonScope();\n  worldContainer\n    .bind(IDENTIFIER.ConfigService)\n    .to(ConfigService)\n    .inSingletonScope();\n  worldContainer\n    .bind(IDENTIFIER.InteractorService)\n    .to(InteractorService)\n    .inSingletonScope();\n\n  /**\n   * bind render passes\n   */\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(RenderPass)\n    .inSingletonScope()\n    .whenTargetNamed(RenderPass.IDENTIFIER);\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(CopyPass)\n    .inSingletonScope()\n    .whenTargetNamed(CopyPass.IDENTIFIER);\n  worldContainer\n    .bind<IRenderPass<any>>(IDENTIFIER.RenderPass)\n    .to(PixelPickingPass)\n    .inSingletonScope()\n    .whenTargetNamed(PixelPickingPass.IDENTIFIER);\n\n  worldContainer\n    .bind<interfaces.Factory<IRenderPass<any>>>(IDENTIFIER.RenderPassFactory)\n    .toFactory<IRenderPass<any>>((context: interfaces.Context) => {\n      return (name: string) => {\n        return context.container.getNamed(IDENTIFIER.RenderPass, name);\n      };\n    });\n\n  return worldContainer;\n}\n"]},"metadata":{},"sourceType":"module"}