{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@antv/util\");\n\nvar _struct = require(\"./struct\");\n\nvar DFSedge =\n/** @class */\nfunction () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || _struct.VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || _struct.VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || _struct.VACANT_NODE_LABEL\n    };\n  }\n\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n\n  return DFSedge;\n}(); // DFScode 是 DESedge 的数组\n\n\nvar DFScode =\n/** @class */\nfunction () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n\n    return true;\n  };\n\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n\n\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n\n\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = _struct.VACANT_GRAPH_ID;\n    }\n\n    if (directed === void 0) {\n      directed = false;\n    }\n\n    var graph = new _struct.Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== _struct.VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== _struct.VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== _struct.VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  }; // 建立 rightmost path\n\n\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n\n    return this.rmpath;\n  };\n\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n\n  return DFScode;\n}();\n\nvar History =\n/** @class */\nfunction () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    } // 倒序\n\n\n    this.edges = this.edges.reverse();\n  }\n\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n\n  return History;\n}();\n\nvar GSpan =\n/** @class */\nfunction () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n        _b = _a.minSupport,\n        minSupport = _b === void 0 ? 2 : _b,\n        _c = _a.minNodeNum,\n        minNodeNum = _c === void 0 ? 1 : _c,\n        _d = _a.maxNodeNum,\n        maxNodeNum = _d === void 0 ? 4 : _d,\n        _e = _a.top,\n        top = _e === void 0 ? 10 : _e,\n        _f = _a.directed,\n        directed = _f === void 0 ? false : _f,\n        _g = _a.verbose,\n        verbose = _g === void 0 ? false : _g; // -------- 第零步，初始化-------\n\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0; // TODO? timestamp = {}\n\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  } // Line 352\n\n\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(_struct.VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(otherNode.label);\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    }); // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n\n    var minLabel = this.findMinLabel(root); // line 419\n\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2)); // line 423\n\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n\n      var backwardRoot = {};\n      var flag = false,\n          newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\"; // line 435\n\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n\n        if (state_1 === \"break\") break;\n      }\n\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, _struct.VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, _struct.VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n\n        if (state_2 === \"break\") break;\n      }\n\n      if (!flag) return true;\n\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, _struct.VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[\"\".concat(forwardMinEdgeNodeLabel.edgeLabel, \"-\").concat(forwardMinEdgeNodeLabel.nodeLabel2)].projected);\n    };\n\n    var key = \"\".concat(minLabel.nodeLabel1, \"-\").concat(minLabel.edgeLabel, \"-\").concat(minLabel.nodeLabel2);\n    return projectIsMin(root[key].projected);\n  };\n\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push((0, _util.clone)(graph));\n  };\n\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p); // backward Line 526\n\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n        if (backwardEdge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(backwardEdge.label);\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      } // pure forward\n\n\n      if (nodeNum >= _this.maxNodeNum) return;\n\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n      forwardPureEdges.forEach(function (edge) {\n        var key = \"\".concat(maxToC, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      }; // rmpath forward\n\n\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    }); // backward\n\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n          toNodeId = _a.toNodeId,\n          edgeLabel = _a.edgeLabel;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n\n      _this.subGraphMining(backwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    }); // forward\n\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n          fromNodeId = _a.fromNodeId,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, _struct.VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(forwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n        nodeEdgeNodeCounter = {}; // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n\n    var nodeLableCounted = {}; // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap; // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = \"\".concat(key, \"-\").concat(nodeLabel);\n\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        }; // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = \"\".concat(key, \"-\").concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          var nodeEdgeNodeKey = \"\".concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    }); // 计算频繁的节点\n\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g); // if (minNodeNum <= 1) reportSize1 TODO\n    });\n    return frequentSize1Subgraphs;\n  };\n\n  GSpan.prototype.run = function () {\n    var _this = this; // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n\n\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed; // PDFS 数组的 map Line 304\n\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap; // Line 306\n\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node); // Line 308\n\n\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(toNode.label);\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    }); // Line 313\n\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n          projected = _a.projected,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  return GSpan;\n}();\n\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new _struct.Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\n\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n\n      graphData.nodes.push((_a = {\n        id: \"\".concat(node.id)\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n\n      graphData.edges.push((_a = {\n        source: \"\".concat(edge.from),\n        target: \"\".concat(edge.to)\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\n\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\n\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n      _a = params.directed,\n      directed = _a === void 0 ? false : _a,\n      _b = params.nodeLabelProp,\n      nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n      _c = params.edgeLabelProp,\n      edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n      maxNodeNum = params.maxNodeNum,\n      minNodeNum = params.minNodeNum,\n      verbose = params.verbose,\n      top = params.top; // ------- 初始化与执行算法 -------\n\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\n\nvar _default = gSpan;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_util","require","_struct","DFSedge","fromNode","toNode","fromNodeLabel","edgeLabel","toNodeLabel","nodeEdgeNodeLabel","nodeLabel1","VACANT_NODE_LABEL","VACANT_EDGE_LABEL","nodeLabel2","prototype","equalTo","other","formNode","notEqualTo","DFScode","rmpath","dfsEdgeList","aLength","length","bLength","i","pushBack","push","toGraph","graphId","directed","VACANT_GRAPH_ID","graph","Graph","forEach","dfsEdge","fromNodeId","toNodeId","_a","addNode","addEdge","undefined","buildRmpath","oldFrom","selfLength","fromNodeIdx","toNodeIdx","getNodeNum","nodeMap","keys","History","pdfs","his","nodesUsed","edgesUsed","edges","e","edge","from","to","id","preNode","reverse","hasNode","node","hasEdge","GSpan","graphs","_b","minSupport","_c","minNodeNum","_d","maxNodeNum","_e","top","_f","_g","verbose","dfsCode","support","frequentSize1Subgraphs","frequentSubgraphs","counter","reportDF","findForwardRootEdges","_this","result","label","findBackwardEdge","edge1","edge2","history","edge2To","edge2ToEdges","edgeLength","findForwardPureEdges","rightmostEdge","minNodeLabel","rightmostEdgeToId","findForwardRmpathEdges","newToNodeLabel","getSupport","projected","graphMap","pro","findMinLabel","obj","minLabel","isMin","console","log","dfsCodeMin","root","nodes","forwardEdges","otherNode","concat","projectIsMin","maxToC","backwardRoot","flag","newTo","end","_loop_1","p","backwardEdge","state_1","minBackwardEdgeLabel","idx_1","forwardRoot","newFrom","forwardPureEdges","key","pathLength","_loop_2","forwardRmpathEdges","state_2","forwardMinEdgeNodeLabel","idx","report","clone","subGraphMining","nodeNum","_loop_3","pop","generate1EdgeFrequentSubGraphs","nodeLabelCounter","nodeEdgeNodeCounter","nodeLableCounted","nodeEdgeNodeLabelCounted","nodeLabel","graphNodeKey","graphKey","tmp","graphNodeEdgeNodeKey","nodeEdgeNodeKey","count","g","run","forwardRootEdges","formatGraphs","nodeLabelProp","edgeLabelProp","fGraph","nodeIdxMap","j","k","sourceIdx","source","targetIdx","target","toGraphDatas","graphData","DEFAULT_LABEL_NAME","gSpan","params","formattedGraphs","algoParams","calculator","_default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/lib/gSpan/gSpan.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@antv/util\");\n\nvar _struct = require(\"./struct\");\n\nvar DFSedge =\n/** @class */\nfunction () {\n  function DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.fromNode = fromNode;\n    this.toNode = toNode;\n    this.nodeEdgeNodeLabel = {\n      nodeLabel1: fromNodeLabel || _struct.VACANT_NODE_LABEL,\n      edgeLabel: edgeLabel || _struct.VACANT_EDGE_LABEL,\n      nodeLabel2: toNodeLabel || _struct.VACANT_NODE_LABEL\n    };\n  }\n\n  DFSedge.prototype.equalTo = function (other) {\n    return this.fromNode === other.formNode && this.toNode === other.toNode && this.nodeEdgeNodeLabel === other.nodeEdgeNodeLabel;\n  };\n\n  DFSedge.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n\n  return DFSedge;\n}(); // DFScode 是 DESedge 的数组\n\n\nvar DFScode =\n/** @class */\nfunction () {\n  function DFScode() {\n    this.rmpath = [];\n    this.dfsEdgeList = [];\n  }\n\n  DFScode.prototype.equalTo = function (other) {\n    var aLength = this.dfsEdgeList.length;\n    var bLength = other.length;\n    if (aLength !== bLength) return false;\n\n    for (var i = 0; i < aLength; i++) {\n      if (this.dfsEdgeList[i] !== other[i]) return false;\n    }\n\n    return true;\n  };\n\n  DFScode.prototype.notEqualTo = function (other) {\n    return !this.equalTo(other);\n  };\n  /** 增加一条 edge 到 DFScode */\n\n\n  DFScode.prototype.pushBack = function (fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel) {\n    this.dfsEdgeList.push(new DFSedge(fromNode, toNode, fromNodeLabel, edgeLabel, toNodeLabel));\n    return this.dfsEdgeList;\n  };\n  /** 根据 dfs 构建图 */\n\n\n  DFScode.prototype.toGraph = function (graphId, directed) {\n    if (graphId === void 0) {\n      graphId = _struct.VACANT_GRAPH_ID;\n    }\n\n    if (directed === void 0) {\n      directed = false;\n    }\n\n    var graph = new _struct.Graph(graphId, true, directed);\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      var fromNodeId = dfsEdge.fromNode;\n      var toNodeId = dfsEdge.toNode;\n      var _a = dfsEdge.nodeEdgeNodeLabel,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n      if (nodeLabel1 !== _struct.VACANT_NODE_LABEL) graph.addNode(fromNodeId, nodeLabel1);\n      if (nodeLabel2 !== _struct.VACANT_NODE_LABEL) graph.addNode(toNodeId, nodeLabel2);\n      if (nodeLabel1 !== _struct.VACANT_NODE_LABEL && nodeLabel2 !== nodeLabel1) graph.addEdge(undefined, fromNodeId, toNodeId, edgeLabel);\n    });\n    return graph;\n  }; // 建立 rightmost path\n\n\n  DFScode.prototype.buildRmpath = function () {\n    this.rmpath = [];\n    var oldFrom = undefined;\n    var selfLength = this.dfsEdgeList.length;\n\n    for (var i = selfLength - 1; i >= 0; i--) {\n      var dfsEdge = this.dfsEdgeList[i];\n      var fromNodeIdx = dfsEdge.fromNode;\n      var toNodeIdx = dfsEdge.toNode;\n\n      if (fromNodeIdx < toNodeIdx && (oldFrom === undefined || toNodeIdx === oldFrom)) {\n        this.rmpath.push(i);\n        oldFrom = fromNodeIdx;\n      }\n    }\n\n    return this.rmpath;\n  };\n\n  DFScode.prototype.getNodeNum = function () {\n    var nodeMap = {};\n    this.dfsEdgeList.forEach(function (dfsEdge) {\n      if (!nodeMap[dfsEdge.fromNode]) nodeMap[dfsEdge.fromNode] = true;\n      if (!nodeMap[dfsEdge.toNode]) nodeMap[dfsEdge.toNode] = true;\n    });\n    return Object.keys(nodeMap).length;\n  };\n\n  return DFScode;\n}();\n\nvar History =\n/** @class */\nfunction () {\n  function History(pdfs) {\n    this.his = {};\n    this.nodesUsed = {};\n    this.edgesUsed = {};\n    this.edges = [];\n    if (!pdfs) return;\n\n    while (pdfs) {\n      var e = pdfs.edge;\n      this.edges.push(e);\n      this.nodesUsed[e.from] = 1;\n      this.nodesUsed[e.to] = 1;\n      this.edgesUsed[e.id] = 1;\n      pdfs = pdfs.preNode;\n    } // 倒序\n\n\n    this.edges = this.edges.reverse();\n  }\n\n  History.prototype.hasNode = function (node) {\n    return this.nodesUsed[node.id] === 1;\n  };\n\n  History.prototype.hasEdge = function (edge) {\n    return this.edgesUsed[edge.id] === 1;\n  };\n\n  return History;\n}();\n\nvar GSpan =\n/** @class */\nfunction () {\n  function GSpan(_a) {\n    var graphs = _a.graphs,\n        _b = _a.minSupport,\n        minSupport = _b === void 0 ? 2 : _b,\n        _c = _a.minNodeNum,\n        minNodeNum = _c === void 0 ? 1 : _c,\n        _d = _a.maxNodeNum,\n        maxNodeNum = _d === void 0 ? 4 : _d,\n        _e = _a.top,\n        top = _e === void 0 ? 10 : _e,\n        _f = _a.directed,\n        directed = _f === void 0 ? false : _f,\n        _g = _a.verbose,\n        verbose = _g === void 0 ? false : _g; // -------- 第零步，初始化-------\n\n    this.graphs = graphs;\n    this.dfsCode = new DFScode();\n    this.support = 0;\n    this.frequentSize1Subgraphs = [];\n    this.frequentSubgraphs = [];\n    this.minSupport = minSupport;\n    this.top = top;\n    this.directed = directed;\n    this.counter = 0; // TODO? timestamp = {}\n\n    this.maxNodeNum = maxNodeNum;\n    this.minNodeNum = minNodeNum;\n    this.verbose = verbose;\n    if (this.maxNodeNum < this.minNodeNum) this.maxNodeNum = this.minNodeNum;\n    this.reportDF = []; // matrix\n  } // Line 352\n\n\n  GSpan.prototype.findForwardRootEdges = function (graph, fromNode) {\n    var _this = this;\n\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    fromNode.edges.forEach(function (edge) {\n      if (_this.directed || fromNode.label <= nodeMap[edge.to].label) result.push(edge);\n    });\n    return result;\n  };\n\n  GSpan.prototype.findBackwardEdge = function (graph, edge1, edge2, history) {\n    if (!this.directed && edge1 === edge2) return null;\n    var nodeMap = graph.nodeMap;\n    var edge2To = nodeMap[edge2.to];\n    var edge2ToEdges = edge2To.edges;\n    var edgeLength = edge2ToEdges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edge2ToEdges[i];\n      if (history.hasEdge(edge) || edge.to !== edge1.from) continue;\n\n      if (!this.directed) {\n        if (edge1.label < edge.label || edge1.label === edge.label && nodeMap[edge1.to].label <= nodeMap[edge2.to].label) {\n          return edge;\n        }\n      } else {\n        if (nodeMap[edge1.from].label < nodeMap[edge2.to].label || nodeMap[edge1.from].label === nodeMap[edge2.to].label && edge1.label <= edge.label) {\n          return edge;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  GSpan.prototype.findForwardPureEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var rightmostEdgeToId = rightmostEdge.to;\n    var edges = graph.nodeMap[rightmostEdgeToId].edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var toNode = graph.nodeMap[edge.to];\n\n      if (minNodeLabel <= toNode.label && !history.hasNode(toNode)) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.findForwardRmpathEdges = function (graph, rightmostEdge, minNodeLabel, history) {\n    var result = [];\n    var nodeMap = graph.nodeMap;\n    var toNodeLabel = nodeMap[rightmostEdge.to].label;\n    var fromNode = nodeMap[rightmostEdge.from];\n    var edges = fromNode.edges;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      var newToNodeLabel = nodeMap[edge.to].label;\n\n      if (rightmostEdge.to === edge.to || minNodeLabel > newToNodeLabel || history.hasNode(nodeMap[edge.to])) {\n        continue;\n      }\n\n      if (rightmostEdge.label < edge.label || rightmostEdge.label === edge.label && toNodeLabel <= newToNodeLabel) {\n        result.push(edge);\n      }\n    }\n\n    return result;\n  };\n\n  GSpan.prototype.getSupport = function (projected) {\n    var graphMap = {};\n    projected.forEach(function (pro) {\n      if (!graphMap[pro.graphId]) graphMap[pro.graphId] = true;\n    });\n    return Object.keys(graphMap).length;\n  };\n\n  GSpan.prototype.findMinLabel = function (obj) {\n    var minLabel = undefined;\n    Object.keys(obj).forEach(function (nodeEdgeNodeLabel) {\n      var _a = obj[nodeEdgeNodeLabel],\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      if (!minLabel) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n        return;\n      }\n\n      if (nodeLabel1 < minLabel.nodeLabel1 || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel < minLabel.edgeLabel || nodeLabel1 === minLabel.nodeLabel1 && edgeLabel === minLabel.edgeLabel && nodeLabel2 < minLabel.nodeLabel2) {\n        minLabel = {\n          nodeLabel1: nodeLabel1,\n          edgeLabel: edgeLabel,\n          nodeLabel2: nodeLabel2\n        };\n      }\n    });\n    return minLabel;\n  };\n\n  GSpan.prototype.isMin = function () {\n    var _this = this;\n\n    var dfsCode = this.dfsCode;\n    if (this.verbose) console.log(\"isMin checking\", dfsCode);\n    if (dfsCode.dfsEdgeList.length === 1) return true;\n    var directed = this.directed;\n    var graph = dfsCode.toGraph(_struct.VACANT_GRAPH_ID, directed);\n    var nodeMap = graph.nodeMap;\n    var dfsCodeMin = new DFScode();\n    var root = {};\n    graph.nodes.forEach(function (node) {\n      var forwardEdges = _this.findForwardRootEdges(graph, node);\n\n      forwardEdges.forEach(function (edge) {\n        var otherNode = nodeMap[edge.to];\n        var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(otherNode.label);\n        if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n          projected: [],\n          nodeLabel1: node.label,\n          edgeLabel: edge.label,\n          nodeLabel2: otherNode.label\n        };\n        var pdfs = {\n          graphId: graph.id,\n          edge: edge,\n          preNode: null\n        };\n        root[nodeEdgeNodeLabel].projected.push(pdfs);\n      });\n    }); // 比较 root 中每一项的 nodeEdgeNodeLabel 大小，按照 nodeLabel1、edgeLabe、nodeLabel2 的顺序比较\n\n    var minLabel = this.findMinLabel(root); // line 419\n\n    if (!minLabel) return;\n    dfsCodeMin.dfsEdgeList.push(new DFSedge(0, 1, minLabel.nodeLabel1, minLabel.edgeLabel, minLabel.nodeLabel2)); // line 423\n\n    var projectIsMin = function projectIsMin(projected) {\n      // right most path\n      var rmpath = dfsCodeMin.buildRmpath();\n      var minNodeLabel = dfsCodeMin.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n      var maxToC = dfsCodeMin.dfsEdgeList[rmpath[0]].toNode; // node id\n\n      var backwardRoot = {};\n      var flag = false,\n          newTo = 0;\n      var end = directed ? -1 : 0; // 遍历到 1 还是到 0\n\n      var _loop_1 = function _loop_1(i) {\n        if (flag) return \"break\"; // line 435\n\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n          if (backwardEdge) {\n            // Line 441\n            if (!backwardRoot[backwardEdge.label]) {\n              backwardRoot[backwardEdge.label] = {\n                projected: [],\n                edgeLabel: backwardEdge.label\n              };\n            }\n\n            backwardRoot[backwardEdge.label].projected.push({\n              graphId: graph.id,\n              edge: backwardRoot,\n              preNode: p\n            });\n            newTo = dfsCodeMin.dfsEdgeList[rmpath[i]].fromNode;\n            flag = true;\n          }\n        });\n      };\n\n      for (var i = rmpath.length - 1; i > end; i--) {\n        var state_1 = _loop_1(i);\n\n        if (state_1 === \"break\") break;\n      }\n\n      if (flag) {\n        var minBackwardEdgeLabel = _this.findMinLabel(backwardRoot);\n\n        dfsCodeMin.dfsEdgeList.push(new DFSedge(maxToC, newTo, _struct.VACANT_NODE_LABEL, minBackwardEdgeLabel.edgeLabel, _struct.VACANT_NODE_LABEL));\n        var idx_1 = dfsCodeMin.dfsEdgeList.length - 1;\n        if (_this.dfsCode.dfsEdgeList[idx_1] !== dfsCodeMin.dfsEdgeList[idx_1]) return false;\n        return projectIsMin(backwardRoot[minBackwardEdgeLabel.edgeLabel].projected);\n      }\n\n      var forwardRoot = {};\n      flag = false;\n      var newFrom = 0;\n      projected.forEach(function (p) {\n        var history = new History(p);\n\n        var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n        if (forwardPureEdges.length > 0) {\n          flag = true;\n          newFrom = maxToC;\n          forwardPureEdges.forEach(function (edge) {\n            var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n            if (!forwardRoot[key]) forwardRoot[key] = {\n              projected: [],\n              edgeLabel: edge.label,\n              nodeLabel2: nodeMap[edge.to].label\n            };\n            forwardRoot[key].projected.push({\n              graphId: graph.id,\n              edge: edge,\n              preNode: p\n            });\n          });\n        }\n      });\n      var pathLength = rmpath.length;\n\n      var _loop_2 = function _loop_2(i) {\n        if (flag) return \"break\";\n        var value = rmpath[i];\n        projected.forEach(function (p) {\n          var history = new History(p);\n\n          var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[value], minNodeLabel, history);\n\n          if (forwardRmpathEdges.length > 0) {\n            flag = true;\n            newFrom = dfsCodeMin.dfsEdgeList[value].fromNode;\n            forwardRmpathEdges.forEach(function (edge) {\n              var key = \"\".concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n              if (!forwardRoot[key]) forwardRoot[key] = {\n                projected: [],\n                edgeLabel: edge.label,\n                nodeLabel2: nodeMap[edge.to].label\n              };\n              forwardRoot[key].projected.push({\n                graphId: graph.id,\n                edge: edge,\n                preNode: p\n              });\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < pathLength; i++) {\n        var state_2 = _loop_2(i);\n\n        if (state_2 === \"break\") break;\n      }\n\n      if (!flag) return true;\n\n      var forwardMinEdgeNodeLabel = _this.findMinLabel(forwardRoot);\n\n      dfsCodeMin.dfsEdgeList.push(new DFSedge(newFrom, maxToC + 1, _struct.VACANT_NODE_LABEL, forwardMinEdgeNodeLabel.edgeLabel, forwardMinEdgeNodeLabel.nodeLabel2));\n      var idx = dfsCodeMin.dfsEdgeList.length - 1;\n      if (dfsCode.dfsEdgeList[idx] !== dfsCodeMin.dfsEdgeList[idx]) return false;\n      return projectIsMin(forwardRoot[\"\".concat(forwardMinEdgeNodeLabel.edgeLabel, \"-\").concat(forwardMinEdgeNodeLabel.nodeLabel2)].projected);\n    };\n\n    var key = \"\".concat(minLabel.nodeLabel1, \"-\").concat(minLabel.edgeLabel, \"-\").concat(minLabel.nodeLabel2);\n    return projectIsMin(root[key].projected);\n  };\n\n  GSpan.prototype.report = function () {\n    if (this.dfsCode.getNodeNum() < this.minNodeNum) return;\n    this.counter++;\n    var graph = this.dfsCode.toGraph(this.counter, this.directed);\n    this.frequentSubgraphs.push((0, _util.clone)(graph));\n  };\n\n  GSpan.prototype.subGraphMining = function (projected) {\n    var _this = this;\n\n    var support = this.getSupport(projected);\n    if (support < this.minSupport) return;\n    if (!this.isMin()) return;\n    this.report();\n    var nodeNum = this.dfsCode.getNodeNum();\n    var rmpath = this.dfsCode.buildRmpath();\n    var maxToC = this.dfsCode.dfsEdgeList[rmpath[0]].toNode;\n    var minNodeLabel = this.dfsCode.dfsEdgeList[0].nodeEdgeNodeLabel.nodeLabel1;\n    var forwardRoot = {};\n    var backwardRoot = {};\n    projected.forEach(function (p) {\n      var graph = _this.graphs[p.graphId];\n      var nodeMap = graph.nodeMap;\n      var history = new History(p); // backward Line 526\n\n      for (var i = rmpath.length - 1; i >= 0; i--) {\n        var backwardEdge = _this.findBackwardEdge(graph, history.edges[rmpath[i]], history.edges[rmpath[0]], history);\n\n        if (backwardEdge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(backwardEdge.label);\n          if (!backwardRoot[key]) backwardRoot[key] = {\n            projected: [],\n            toNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: backwardEdge.label\n          };\n          backwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: backwardEdge,\n            preNode: p\n          });\n        }\n      } // pure forward\n\n\n      if (nodeNum >= _this.maxNodeNum) return;\n\n      var forwardPureEdges = _this.findForwardPureEdges(graph, history.edges[rmpath[0]], minNodeLabel, history);\n\n      forwardPureEdges.forEach(function (edge) {\n        var key = \"\".concat(maxToC, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n        if (!forwardRoot[key]) forwardRoot[key] = {\n          projected: [],\n          fromNodeId: maxToC,\n          edgeLabel: edge.label,\n          nodeLabel2: nodeMap[edge.to].label\n        };\n        forwardRoot[key].projected.push({\n          graphId: p.graphId,\n          edge: edge,\n          preNode: p\n        });\n      });\n\n      var _loop_3 = function _loop_3(i) {\n        var forwardRmpathEdges = _this.findForwardRmpathEdges(graph, history.edges[rmpath[i]], minNodeLabel, history);\n\n        forwardRmpathEdges.forEach(function (edge) {\n          var key = \"\".concat(_this.dfsCode.dfsEdgeList[rmpath[i]].fromNode, \"-\").concat(edge.label, \"-\").concat(nodeMap[edge.to].label);\n          if (!forwardRoot[key]) forwardRoot[key] = {\n            projected: [],\n            fromNodeId: _this.dfsCode.dfsEdgeList[rmpath[i]].fromNode,\n            edgeLabel: edge.label,\n            nodeLabel2: nodeMap[edge.to].label\n          };\n          forwardRoot[key].projected.push({\n            graphId: p.graphId,\n            edge: edge,\n            preNode: p\n          });\n        });\n      }; // rmpath forward\n\n\n      for (var i = 0; i < rmpath.length; i++) {\n        _loop_3(i);\n      }\n    }); // backward\n\n    Object.keys(backwardRoot).forEach(function (key) {\n      var _a = backwardRoot[key],\n          toNodeId = _a.toNodeId,\n          edgeLabel = _a.edgeLabel;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(maxToC, toNodeId, \"-1\", edgeLabel, \"-1\"));\n\n      _this.subGraphMining(backwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    }); // forward\n\n    Object.keys(forwardRoot).forEach(function (key) {\n      var _a = forwardRoot[key],\n          fromNodeId = _a.fromNodeId,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(fromNodeId, maxToC + 1, _struct.VACANT_NODE_LABEL, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(forwardRoot[key].projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  GSpan.prototype.generate1EdgeFrequentSubGraphs = function () {\n    var graphs = this.graphs;\n    var directed = this.directed;\n    var minSupport = this.minSupport;\n    var frequentSize1Subgraphs = this.frequentSize1Subgraphs;\n    var nodeLabelCounter = {},\n        nodeEdgeNodeCounter = {}; // 保存各个图和各自节点的关系 map，key 格式为 graphKey-node类型\n\n    var nodeLableCounted = {}; // 保存各个图和各自边的关系 map，key 格式为 graphKey-fromNode类型-edge类型-toNode类型\n\n    var nodeEdgeNodeLabelCounted = {};\n    Object.keys(graphs).forEach(function (key) {\n      // Line 271\n      var graph = graphs[key];\n      var nodeMap = graph.nodeMap; // 遍历节点，记录对应图 与 每个节点的 label 到 nodeLableCounted\n\n      graph.nodes.forEach(function (node, i) {\n        // Line 272\n        var nodeLabel = node.label;\n        var graphNodeKey = \"\".concat(key, \"-\").concat(nodeLabel);\n\n        if (!nodeLableCounted[graphNodeKey]) {\n          var counter = nodeLabelCounter[nodeLabel] || 0;\n          counter++;\n          nodeLabelCounter[nodeLabel] = counter;\n        }\n\n        nodeLableCounted[graphNodeKey] = {\n          graphKey: key,\n          label: nodeLabel\n        }; // 遍历该节点的所有边，记录各个图和各自边的关系到 nodeEdgeNodeLabelCounted. Line 276\n\n        node.edges.forEach(function (edge) {\n          var nodeLabel1 = nodeLabel;\n          var nodeLabel2 = nodeMap[edge.to].label;\n\n          if (!directed && nodeLabel1 > nodeLabel2) {\n            var tmp = nodeLabel2;\n            nodeLabel2 = nodeLabel1;\n            nodeLabel1 = tmp;\n          }\n\n          var edgeLabel = edge.label;\n          var graphNodeEdgeNodeKey = \"\".concat(key, \"-\").concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n          var nodeEdgeNodeKey = \"\".concat(nodeLabel1, \"-\").concat(edgeLabel, \"-\").concat(nodeLabel2);\n\n          if (!nodeEdgeNodeCounter[nodeEdgeNodeKey]) {\n            var counter = nodeEdgeNodeCounter[nodeEdgeNodeKey] || 0;\n            counter++;\n            nodeEdgeNodeCounter[nodeEdgeNodeKey] = counter; // Line281\n          }\n\n          nodeEdgeNodeLabelCounted[graphNodeEdgeNodeKey] = {\n            graphId: key,\n            nodeLabel1: nodeLabel1,\n            edgeLabel: edgeLabel,\n            nodeLabel2: nodeLabel2\n          };\n        });\n      });\n    }); // 计算频繁的节点\n\n    Object.keys(nodeLabelCounter).forEach(function (label) {\n      var count = nodeLabelCounter[label];\n      if (count < minSupport) return;\n      var g = {\n        nodes: [],\n        edges: []\n      };\n      g.nodes.push({\n        id: \"0\",\n        label: label\n      });\n      frequentSize1Subgraphs.push(g); // if (minNodeNum <= 1) reportSize1 TODO\n    });\n    return frequentSize1Subgraphs;\n  };\n\n  GSpan.prototype.run = function () {\n    var _this = this; // -------- 第一步, _generate_1edge_frequent_subgraphs：频繁的单个节点-------\n\n\n    this.frequentSize1Subgraphs = this.generate1EdgeFrequentSubGraphs();\n    if (this.maxNodeNum < 2) return;\n    var graphs = this.graphs;\n    var directed = this.directed; // PDFS 数组的 map Line 304\n\n    var root = {};\n    Object.keys(graphs).forEach(function (graphId) {\n      var graph = graphs[graphId];\n      var nodeMap = graph.nodeMap; // Line 306\n\n      graph.nodes.forEach(function (node) {\n        var forwardRootEdges = _this.findForwardRootEdges(graph, node); // Line 308\n\n\n        forwardRootEdges.forEach(function (edge) {\n          var toNode = nodeMap[edge.to];\n          var nodeEdgeNodeLabel = \"\".concat(node.label, \"-\").concat(edge.label, \"-\").concat(toNode.label);\n          if (!root[nodeEdgeNodeLabel]) root[nodeEdgeNodeLabel] = {\n            projected: [],\n            nodeLabel1: node.label,\n            edgeLabel: edge.label,\n            nodeLabel2: toNode.label\n          };\n          var pdfs = {\n            graphId: graphId,\n            edge: edge,\n            preNode: null\n          };\n          root[nodeEdgeNodeLabel].projected.push(pdfs);\n        });\n      });\n    }); // Line 313\n\n    Object.keys(root).forEach(function (nodeEdgeNodeLabel) {\n      var _a = root[nodeEdgeNodeLabel],\n          projected = _a.projected,\n          nodeLabel1 = _a.nodeLabel1,\n          edgeLabel = _a.edgeLabel,\n          nodeLabel2 = _a.nodeLabel2;\n\n      _this.dfsCode.dfsEdgeList.push(new DFSedge(0, 1, nodeLabel1, edgeLabel, nodeLabel2));\n\n      _this.subGraphMining(projected);\n\n      _this.dfsCode.dfsEdgeList.pop();\n    });\n  };\n\n  return GSpan;\n}();\n\nvar formatGraphs = function formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp) {\n  var result = {};\n  Object.keys(graphs).forEach(function (key, i) {\n    var graph = graphs[key];\n    var fGraph = new _struct.Graph(i, true, directed);\n    var nodeIdxMap = {};\n    graph.nodes.forEach(function (node, j) {\n      fGraph.addNode(j, node[nodeLabelProp]);\n      nodeIdxMap[node.id] = j;\n    });\n    graph.edges.forEach(function (edge, k) {\n      var sourceIdx = nodeIdxMap[edge.source];\n      var targetIdx = nodeIdxMap[edge.target];\n      fGraph.addEdge(-1, sourceIdx, targetIdx, edge[edgeLabelProp]);\n    });\n    if (fGraph && fGraph.getNodeNum()) result[fGraph.id] = fGraph;\n  });\n  return result;\n};\n\nvar toGraphDatas = function toGraphDatas(graphs, nodeLabelProp, edgeLabelProp) {\n  var result = [];\n  graphs.forEach(function (graph) {\n    var graphData = {\n      nodes: [],\n      edges: []\n    };\n    graph.nodes.forEach(function (node) {\n      var _a;\n\n      graphData.nodes.push((_a = {\n        id: \"\".concat(node.id)\n      }, _a[nodeLabelProp] = node.label, _a));\n    });\n    graph.edges.forEach(function (edge) {\n      var _a;\n\n      graphData.edges.push((_a = {\n        source: \"\".concat(edge.from),\n        target: \"\".concat(edge.to)\n      }, _a[edgeLabelProp] = edge.label, _a));\n    });\n    result.push(graphData);\n  });\n  return result;\n};\n\nvar DEFAULT_LABEL_NAME = \"cluster\";\n/**\n * gSpan 频繁子图计算算法（frequent graph mining）\n * @param params 参数\n */\n\nvar gSpan = function gSpan(params) {\n  // ------- 将图数据 GraphData 的 map 转换为格式 -------\n  var graphs = params.graphs,\n      _a = params.directed,\n      directed = _a === void 0 ? false : _a,\n      _b = params.nodeLabelProp,\n      nodeLabelProp = _b === void 0 ? DEFAULT_LABEL_NAME : _b,\n      _c = params.edgeLabelProp,\n      edgeLabelProp = _c === void 0 ? DEFAULT_LABEL_NAME : _c;\n  var formattedGraphs = formatGraphs(graphs, directed, nodeLabelProp, edgeLabelProp);\n  var minSupport = params.minSupport,\n      maxNodeNum = params.maxNodeNum,\n      minNodeNum = params.minNodeNum,\n      verbose = params.verbose,\n      top = params.top; // ------- 初始化与执行算法 -------\n\n  var algoParams = {\n    graphs: formattedGraphs,\n    minSupport: minSupport,\n    maxNodeNum: maxNodeNum,\n    minNodeNum: minNodeNum,\n    top: top,\n    verbose: verbose,\n    directed: directed\n  };\n  var calculator = new GSpan(algoParams);\n  calculator.run();\n  var result = toGraphDatas(calculator.frequentSubgraphs, nodeLabelProp, edgeLabelProp);\n  return result;\n};\n\nvar _default = gSpan;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}