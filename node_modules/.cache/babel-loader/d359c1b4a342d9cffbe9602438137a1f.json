{"ast":null,"code":"/* eslint-disable no-control-regex */\nimport { NumberExt } from '../number';\nimport { Text } from '../text';\nimport { attr } from './attr';\nimport { Vector } from '../vector';\nimport { createSvgElement, empty, remove } from './elem';\nimport { Platform } from '../platform';\n\nfunction createTextPathNode(attrs, elem) {\n  const vel = Vector.create(elem);\n  const textPath = Vector.create('textPath');\n  const d = attrs.d;\n\n  if (d && attrs['xlink:href'] === undefined) {\n    const path = Vector.create('path').attr('d', d).appendTo(vel.defs());\n    textPath.attr('xlink:href', `#${path.id}`);\n  }\n\n  if (typeof attrs === 'object') {\n    textPath.attr(attrs);\n  }\n\n  return textPath.node;\n}\n\nfunction annotateTextLine(lineNode, lineAnnotations, options) {\n  const eol = options.eol;\n  const baseSize = options.baseSize;\n  const lineHeight = options.lineHeight;\n  let maxFontSize = 0;\n  let tspanNode;\n  const fontMetrics = {};\n  const lastJ = lineAnnotations.length - 1;\n\n  for (let j = 0; j <= lastJ; j += 1) {\n    let annotation = lineAnnotations[j];\n    let fontSize = null;\n\n    if (typeof annotation === 'object') {\n      const annotationAttrs = annotation.attrs;\n      const vTSpan = Vector.create('tspan', annotationAttrs);\n      tspanNode = vTSpan.node;\n      let t = annotation.t;\n\n      if (eol && j === lastJ) {\n        t += eol;\n      }\n\n      tspanNode.textContent = t; // Per annotation className\n\n      const annotationClass = annotationAttrs.class;\n\n      if (annotationClass) {\n        vTSpan.addClass(annotationClass);\n      } // set the list of indices of all the applied annotations\n      // in the `annotations` attribute. This list is a comma\n      // separated list of indices.\n\n\n      if (options.includeAnnotationIndices) {\n        vTSpan.attr('annotations', annotation.annotations.join(','));\n      } // Check for max font size\n\n\n      fontSize = parseFloat(annotationAttrs['font-size']);\n      if (fontSize === undefined) fontSize = baseSize;\n      if (fontSize && fontSize > maxFontSize) maxFontSize = fontSize;\n    } else {\n      if (eol && j === lastJ) {\n        annotation += eol;\n      }\n\n      tspanNode = document.createTextNode(annotation || ' ');\n\n      if (baseSize && baseSize > maxFontSize) {\n        maxFontSize = baseSize;\n      }\n    }\n\n    lineNode.appendChild(tspanNode);\n  }\n\n  if (maxFontSize) {\n    fontMetrics.maxFontSize = maxFontSize;\n  }\n\n  if (lineHeight) {\n    fontMetrics.lineHeight = lineHeight;\n  } else if (maxFontSize) {\n    fontMetrics.lineHeight = maxFontSize * 1.2;\n  }\n\n  return fontMetrics;\n}\n\nconst emRegex = /em$/;\n\nfunction emToPx(em, fontSize) {\n  const numerical = parseFloat(em);\n\n  if (emRegex.test(em)) {\n    return numerical * fontSize;\n  }\n\n  return numerical;\n}\n\nfunction calculateDY(alignment, linesMetrics, baseSizePx, lineHeight) {\n  if (!Array.isArray(linesMetrics)) {\n    return 0;\n  }\n\n  const n = linesMetrics.length;\n  if (!n) return 0;\n  let lineMetrics = linesMetrics[0];\n  const flMaxFont = emToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;\n  let rLineHeights = 0;\n  const lineHeightPx = emToPx(lineHeight, baseSizePx);\n\n  for (let i = 1; i < n; i += 1) {\n    lineMetrics = linesMetrics[i];\n    const iLineHeight = emToPx(lineMetrics.lineHeight, baseSizePx) || lineHeightPx;\n    rLineHeights += iLineHeight;\n  }\n\n  const llMaxFont = emToPx(lineMetrics.maxFontSize, baseSizePx) || baseSizePx;\n  let dy;\n\n  switch (alignment) {\n    case 'middle':\n      dy = flMaxFont / 2 - 0.15 * llMaxFont - rLineHeights / 2;\n      break;\n\n    case 'bottom':\n      dy = -(0.25 * llMaxFont) - rLineHeights;\n      break;\n\n    default:\n    case 'top':\n      dy = 0.8 * flMaxFont;\n      break;\n  }\n\n  return dy;\n}\n\nexport function text(elem, content, options = {}) {\n  content = Text.sanitize(content); // eslint-disable-line\n\n  const eol = options.eol;\n  let textPath = options.textPath;\n  const verticalAnchor = options.textVerticalAnchor;\n  const namedVerticalAnchor = verticalAnchor === 'middle' || verticalAnchor === 'bottom' || verticalAnchor === 'top'; // Horizontal shift applied to all the lines but the first.\n\n  let x = options.x;\n\n  if (x === undefined) {\n    x = elem.getAttribute('x') || 0;\n  } // Annotations\n\n\n  const iai = options.includeAnnotationIndices;\n  let annotations = options.annotations;\n\n  if (annotations && !Array.isArray(annotations)) {\n    annotations = [annotations];\n  } // Shift all the <tspan> but first by one line (`1em`)\n\n\n  const defaultLineHeight = options.lineHeight;\n  const autoLineHeight = defaultLineHeight === 'auto';\n  const lineHeight = autoLineHeight ? '1.5em' : defaultLineHeight || '1em';\n  empty(elem);\n  attr(elem, {\n    // Preserve spaces, do not consecutive spaces to get collapsed to one.\n    'xml:space': 'preserve',\n    // An empty text gets rendered into the DOM in webkit-based browsers.\n    // In order to unify this behaviour across all browsers\n    // we rather hide the text element when it's empty.\n    display: content || options.displayEmpty ? null : 'none'\n  }); // Set default font-size if none\n\n  const strFontSize = attr(elem, 'font-size');\n  let fontSize = parseFloat(strFontSize);\n\n  if (!fontSize) {\n    fontSize = 16;\n\n    if ((namedVerticalAnchor || annotations) && !strFontSize) {\n      attr(elem, 'font-size', `${fontSize}`);\n    }\n  }\n\n  let containerNode;\n\n  if (textPath) {\n    // Now all the `<tspan>`s will be inside the `<textPath>`.\n    if (typeof textPath === 'string') {\n      textPath = {\n        d: textPath\n      };\n    }\n\n    containerNode = createTextPathNode(textPath, elem);\n  } else {\n    containerNode = document.createDocumentFragment();\n  }\n\n  let dy;\n  let offset = 0;\n  let annotatedY;\n  const lines = content.split('\\n');\n  const linesMetrics = [];\n  const lastI = lines.length - 1;\n\n  for (let i = 0; i <= lastI; i += 1) {\n    dy = lineHeight;\n    let lineClassName = 'v-line';\n    const lineNode = createSvgElement('tspan');\n    let lineMetrics;\n    let line = lines[i];\n\n    if (line) {\n      if (annotations) {\n        // Find the *compacted* annotations for this line.\n        const lineAnnotations = Text.annotate(line, annotations, {\n          offset: -offset,\n          includeAnnotationIndices: iai\n        });\n        lineMetrics = annotateTextLine(lineNode, lineAnnotations, {\n          eol: i !== lastI && eol,\n          baseSize: fontSize,\n          lineHeight: autoLineHeight ? null : lineHeight,\n          includeAnnotationIndices: iai\n        }); // Get the line height based on the biggest font size\n        // in the annotations for this line.\n\n        const iLineHeight = lineMetrics.lineHeight;\n\n        if (iLineHeight && autoLineHeight && i !== 0) {\n          dy = iLineHeight;\n        }\n\n        if (i === 0) {\n          annotatedY = lineMetrics.maxFontSize * 0.8;\n        }\n      } else {\n        if (eol && i !== lastI) {\n          line += eol;\n        }\n\n        lineNode.textContent = line;\n      }\n    } else {\n      // Make sure the textContent is never empty. If it is, add a dummy\n      // character and make it invisible, making the following lines correctly\n      // relatively positioned. `dy=1em` won't work with empty lines otherwise.\n      lineNode.textContent = '-';\n      lineClassName += ' v-empty-line';\n      const lineNodeStyle = lineNode.style;\n      lineNodeStyle.fillOpacity = 0;\n      lineNodeStyle.strokeOpacity = 0;\n\n      if (annotations) {\n        lineMetrics = {};\n      }\n    }\n\n    if (lineMetrics) {\n      linesMetrics.push(lineMetrics);\n    }\n\n    if (i > 0) {\n      lineNode.setAttribute('dy', dy);\n    } // Firefox requires 'x' to be set on the first line\n\n\n    if (i > 0 || textPath) {\n      lineNode.setAttribute('x', x);\n    }\n\n    lineNode.className.baseVal = lineClassName;\n    containerNode.appendChild(lineNode);\n    offset += line.length + 1; // + 1 = newline character.\n  } // Y Alignment calculation\n\n\n  if (namedVerticalAnchor) {\n    if (annotations) {\n      dy = calculateDY(verticalAnchor, linesMetrics, fontSize, lineHeight);\n    } else if (verticalAnchor === 'top') {\n      // A shortcut for top alignment. It does not depend on font-size nor line-height\n      dy = '0.8em';\n    } else {\n      let rh; // remaining height\n\n      if (lastI > 0) {\n        rh = parseFloat(lineHeight) || 1;\n        rh *= lastI;\n        if (!emRegex.test(lineHeight)) rh /= fontSize;\n      } else {\n        // Single-line text\n        rh = 0;\n      }\n\n      switch (verticalAnchor) {\n        case 'middle':\n          dy = `${0.3 - rh / 2}em`;\n          break;\n\n        case 'bottom':\n          dy = `${-rh - 0.3}em`;\n          break;\n\n        default:\n          break;\n      }\n    }\n  } else if (verticalAnchor === 0) {\n    dy = '0em';\n  } else if (verticalAnchor) {\n    dy = verticalAnchor;\n  } else {\n    // No vertical anchor is defined\n    dy = 0; // Backwards compatibility - we change the `y` attribute instead of `dy`.\n\n    if (elem.getAttribute('y') == null) {\n      elem.setAttribute('y', `${annotatedY || '0.8em'}`);\n    }\n  }\n\n  const firstLine = containerNode.firstChild;\n  firstLine.setAttribute('dy', dy);\n  elem.appendChild(containerNode);\n}\n\nfunction splitText(text, separator, eol, hyphen) {\n  const words = [];\n  const separators = [];\n\n  if (separator != null) {\n    const parts = text.split(separator);\n    words.push(...parts);\n\n    if (typeof separator === 'string') {\n      for (let i = 0, l = parts.length - 1; i < l; i += 1) {\n        separators.push(separator);\n      }\n    } else {\n      const seps = text.match(new RegExp(separator, 'g'));\n\n      for (let i = 0, l = parts.length - 1; i < l; i += 1) {\n        separators.push(seps ? seps[i] : '');\n      }\n    }\n  } else {\n    let word = '';\n\n    for (let i = 0, l = text.length; i < l; i += 1) {\n      const char = text[i];\n\n      if (char === ' ') {\n        words.push(word);\n        separators.push(' ');\n        word = '';\n      } else if (char.match(/[^\\x00-\\xff]/)) {\n        // split double byte character\n        if (word.length) {\n          words.push(word);\n          separators.push('');\n        }\n\n        words.push(char);\n        separators.push('');\n        word = '';\n      } else {\n        word += char;\n      }\n    }\n\n    if (word.length) {\n      words.push(word);\n    }\n  } // end-of-line\n\n\n  for (let i = 0; i < words.length; i += 1) {\n    const word = words[i];\n\n    if (word.indexOf(eol) >= 0 && word.length > 1) {\n      const parts = word.split(eol);\n\n      for (let j = 0, k = parts.length - 1; j < k; j += 1) {\n        parts.splice(2 * j + 1, 0, eol);\n      }\n\n      const valids = parts.filter(part => part !== '');\n      words.splice(i, 1, ...valids);\n      const seps = valids.map(() => '');\n      seps.pop();\n      separators.splice(i, 0, ...seps);\n    }\n  } // hyphen\n\n\n  for (let i = 0; i < words.length; i += 1) {\n    const word = words[i];\n    const index = word.search(hyphen);\n\n    if (index > 0 && index < word.length - 1) {\n      words.splice(i, 1, word.substring(0, index + 1), word.substring(index + 1));\n      separators.splice(i, 0, '');\n    }\n  }\n\n  return {\n    words,\n    separators\n  };\n}\n\nexport function breakText(text, size, styles = {}, options = {}) {\n  const width = size.width;\n  const height = size.height;\n  const svgDocument = options.svgDocument || createSvgElement('svg');\n  const telem = createSvgElement('text');\n  const tspan = createSvgElement('tspan');\n  const tnode = document.createTextNode('');\n  attr(telem, styles);\n  telem.appendChild(tspan); // Prevent flickering\n\n  telem.style.opacity = '0'; // Prevent FF from throwing an uncaught exception when `getBBox()`\n  // called on element that is not in the render tree (is not measurable).\n  // <tspan>.getComputedTextLength() returns always 0 in this case.\n  // Note that the `textElement` resp. `textSpan` can become hidden\n  // when it's appended to the DOM and a `display: none` CSS stylesheet\n  // rule gets applied.\n\n  telem.style.display = 'block';\n  tspan.style.display = 'block';\n  tspan.appendChild(tnode);\n  svgDocument.appendChild(telem);\n  const shouldAppend = svgDocument.parentNode == null;\n\n  if (shouldAppend) {\n    document.body.appendChild(svgDocument);\n  }\n\n  const eol = options.eol || '\\n';\n  const separator = options.separator || ' ';\n  const hyphen = options.hyphen ? new RegExp(options.hyphen) : /[^\\w\\d]/;\n  const breakWord = options.breakWord !== false;\n  const full = [];\n  const lineSeprators = {};\n  let lines = [];\n  let partIndex; // let hyphenIndex\n\n  let lineHeight;\n  let currentSeparator;\n  const {\n    words,\n    separators\n  } = splitText(text, options.separator, eol, hyphen);\n\n  for (let wordIndex = 0, lineIndex = 0, wordCount = words.length; wordIndex < wordCount; wordIndex += 1) {\n    const word = words[wordIndex]; // empty word\n\n    if (!word) {\n      continue;\n    } // end of line\n\n\n    if (word === eol) {\n      full[lineIndex] = true; // start a new line\n\n      lineIndex += 1;\n      lines[lineIndex] = '';\n      continue;\n    }\n\n    if (lines[lineIndex] != null) {\n      currentSeparator = separators[wordIndex - 1] || '';\n      tnode.data = `${lines[lineIndex]}${currentSeparator}${word}`;\n    } else {\n      tnode.data = word;\n    }\n\n    if (tspan.getComputedTextLength() <= width) {\n      // update line\n      lines[lineIndex] = tnode.data;\n      lineSeprators[lineIndex] = separators[wordIndex]; // when is partitioning, put rest of the word onto next line\n\n      if (partIndex) {\n        full[lineIndex] = true;\n        lineIndex += 1;\n        partIndex = 0;\n      }\n    } else {\n      if (breakWord) {\n        // word is too long to put in one line or is partitioning\n        if (!lines[lineIndex] || partIndex) {\n          const isPartition = !!partIndex;\n          const isCharacter = word.length === 1;\n          partIndex = word.length - 1;\n\n          if (isPartition || isCharacter) {\n            // word has only one character.\n            if (isCharacter) {\n              if (!lines[lineIndex]) {\n                // can't fit this text within our rect\n                lines = [];\n                break;\n              } // partitioning didn't help on the non-empty line\n              // try again, but this time start with a new line\n              // cancel partitions created\n\n\n              words.splice(wordIndex, 2, word + words[wordIndex + 1]);\n              separators.splice(wordIndex + 1, 1);\n              full[lineIndex] = true;\n              lineIndex += 1;\n              wordCount -= 1;\n              wordIndex -= 1;\n              continue;\n            } // update the partitioning words\n\n\n            words[wordIndex] = word.substring(0, partIndex);\n            words[wordIndex + 1] = word.substring(partIndex) + words[wordIndex + 1];\n          } else {\n            // partitioning the long word into two words\n            words.splice(wordIndex, 1, word.substring(0, partIndex), word.substring(partIndex));\n            separators.splice(wordIndex, 0, '');\n            wordCount += 1; // if the previous line is not full\n\n            if (lineIndex && !full[lineIndex - 1]) {\n              lineIndex -= 1;\n            }\n          }\n\n          wordIndex -= 1;\n          continue;\n        }\n      } else if (!lines[lineIndex]) {\n        lines[lineIndex] = word;\n        full[lineIndex] = true;\n        lineIndex += 1;\n        continue;\n      }\n\n      lineIndex += 1;\n      wordIndex -= 1;\n    } // check whether the height of the entire text exceeds the rect height\n\n\n    if (height != null) {\n      // ensure line height\n      if (lineHeight == null) {\n        let heightValue; // use the same defaults as in V.prototype.text\n\n        if (styles.lineHeight === 'auto') {\n          heightValue = {\n            value: 1.5,\n            unit: 'em'\n          };\n        } else {\n          heightValue = NumberExt.parseCssNumeric(styles.lineHeight, ['em']) || {\n            value: 1,\n            unit: 'em'\n          };\n        }\n\n        lineHeight = heightValue.value;\n\n        if (heightValue.unit === 'em') {\n          if (Platform.IS_FIREFOX) {\n            lineHeight *= tspan.getBBox().height;\n          } else {\n            lineHeight *= telem.getBBox().height;\n          }\n        }\n      }\n\n      if (lineHeight * lines.length > height) {\n        // remove overflowing lines\n        const lastLineIndex = Math.floor(height / lineHeight) - 1;\n        const lastLine = lines[lastLineIndex];\n        const overflowLine = lines[lastLineIndex + 1];\n        lines.splice(lastLineIndex + 1);\n\n        if (lastLine == null) {\n          break;\n        } // add ellipsis\n\n\n        let ellipsis = options.ellipsis;\n\n        if (!ellipsis) {\n          break;\n        }\n\n        if (typeof ellipsis !== 'string') {\n          ellipsis = '\\u2026';\n        }\n\n        let fullLastLine = lastLine;\n\n        if (overflowLine && breakWord) {\n          fullLastLine += currentSeparator + overflowLine;\n        }\n\n        let lastCharIndex = fullLastLine.length;\n        let fixedLastLine;\n        let lastChar;\n\n        do {\n          lastChar = fullLastLine[lastCharIndex];\n          fixedLastLine = fullLastLine.substring(0, lastCharIndex);\n\n          if (!lastChar) {\n            fixedLastLine += lineSeprators[lastLineIndex];\n          } else if (lastChar.match(separator)) {\n            fixedLastLine += lastChar;\n          }\n\n          fixedLastLine += ellipsis;\n          tnode.data = fixedLastLine;\n\n          if (tspan.getComputedTextLength() <= width) {\n            lines[lastLineIndex] = fixedLastLine;\n            break;\n          }\n\n          lastCharIndex -= 1;\n        } while (lastCharIndex >= 0);\n\n        break;\n      }\n    }\n  }\n\n  if (shouldAppend) {\n    remove(svgDocument);\n  } else {\n    remove(telem);\n  }\n\n  return lines.join(eol);\n}","map":{"version":3,"mappings":"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","names":["NumberExt","Text","attr","Vector","createSvgElement","empty","remove","Platform","createTextPathNode","attrs","elem","vel","create","textPath","d","undefined","path","appendTo","defs","id","node","annotateTextLine","lineNode","lineAnnotations","options","eol","baseSize","lineHeight","maxFontSize","tspanNode","fontMetrics","lastJ","length","j","annotation","fontSize","annotationAttrs","vTSpan","t","textContent","annotationClass","class","addClass","includeAnnotationIndices","annotations","join","parseFloat","document","createTextNode","appendChild","emRegex","emToPx","em","numerical","test","calculateDY","alignment","linesMetrics","baseSizePx","Array","isArray","n","lineMetrics","flMaxFont","rLineHeights","lineHeightPx","i","iLineHeight","llMaxFont","dy","text","content","sanitize","verticalAnchor","textVerticalAnchor","namedVerticalAnchor","x","getAttribute","iai","defaultLineHeight","autoLineHeight","display","displayEmpty","strFontSize","containerNode","createDocumentFragment","offset","annotatedY","lines","split","lastI","lineClassName","line","annotate","lineNodeStyle","style","fillOpacity","strokeOpacity","push","setAttribute","className","baseVal","rh","firstLine","firstChild","splitText","separator","hyphen","words","separators","parts","l","seps","match","RegExp","word","char","indexOf","k","splice","valids","filter","part","map","pop","index","search","substring","breakText","size","styles","width","height","svgDocument","telem","tspan","tnode","opacity","shouldAppend","parentNode","body","breakWord","full","lineSeprators","partIndex","currentSeparator","wordIndex","lineIndex","wordCount","data","getComputedTextLength","isPartition","isCharacter","heightValue","value","unit","parseCssNumeric","IS_FIREFOX","getBBox","lastLineIndex","Math","floor","lastLine","overflowLine","ellipsis","fullLastLine","lastCharIndex","fixedLastLine","lastChar"],"sourceRoot":"","sources":["../../../src/util/dom/text.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}