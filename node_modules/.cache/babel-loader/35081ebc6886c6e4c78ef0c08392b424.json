{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { vec3 } from 'gl-matrix';\nimport { isNumber } from './is-number';\nexport function getAngle(angle) {\n  if (angle === undefined) {\n    return 0;\n  } else if (angle > 360 || angle < -360) {\n    return angle % 360;\n  }\n\n  return angle;\n}\nexport function createVec3(x, y, z) {\n  if (isNumber(x)) {\n    return vec3.fromValues(x, y, z);\n  }\n\n  if (x.length === 3) {\n    return vec3.clone(x);\n  } // @ts-ignore\n\n\n  return vec3.fromValues(x[0], x[1], x[2]);\n}\nexport function getRotationScale(matrix, result) {\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n}\nexport function decodePickingColor(color) {\n  var _color = _slicedToArray(color, 3),\n      i1 = _color[0],\n      i2 = _color[1],\n      i3 = _color[2]; // 1 was added to seperate from no selection\n\n\n  var index = i1 + i2 * 256 + i3 * 65536 - 1;\n  return index;\n}\nexport function encodePickingColor(featureIdx) {\n  return [featureIdx + 1 & 255, featureIdx + 1 >> 8 & 255, featureIdx + 1 >> 8 >> 8 & 255];\n}","map":{"version":3,"mappings":";AAAA,SAAqBA,IAArB,QAAuC,WAAvC;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAA6C;EAClD,IAAIA,KAAK,KAAKC,SAAd,EAAyB;IACvB,OAAO,CAAP;EADF,OAEO,IAAID,KAAK,GAAG,GAARA,IAAeA,KAAK,GAAG,CAAC,GAA5B,EAAiC;IACtC,OAAOA,KAAK,GAAG,GAAf;EACD;;EACD,OAAOA,KAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,CAApB,EAA6CC,CAA7C,EAAyDC,CAAzD,EAAqE;EAC1E,IAAIP,QAAQ,CAACK,CAAD,CAAZ,EAAiB;IACf,OAAON,IAAI,CAACS,UAALT,CAAgBM,CAAhBN,EAA6BO,CAA7BP,EAA0CQ,CAA1CR,CAAP;EACD;;EAED,IAAKM,CAAD,CAAYI,MAAXJ,KAAsB,CAA3B,EAA8B;IAC5B,OAAON,IAAI,CAACW,KAALX,CAAWM,CAAXN,CAAP;EANwE,EAS1E;;;EACA,OAAOA,IAAI,CAACS,UAALT,CAAgBM,CAAC,CAAC,CAAD,CAAjBN,EAAsBM,CAAC,CAAC,CAAD,CAAvBN,EAA4BM,CAAC,CAAC,CAAD,CAA7BN,CAAP;AACD;AAED,OAAO,SAASY,gBAAT,CAA0BC,MAA1B,EAAwCC,MAAxC,EAAsD;EAC3DA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,CAAD,CAAlBC;EACAA,MAAM,CAAC,CAAD,CAANA,GAAYD,MAAM,CAAC,EAAD,CAAlBC;EACA,OAAOA,MAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAuD;EAAA,4BACvCA,KADuC;EAAA,IACrDC,EADqD;EAAA,IACjDC,EADiD;EAAA,IAC7CC,EAD6C,cAE5D;;;EACA,IAAMC,KAAK,GAAGH,EAAE,GAAGC,EAAE,GAAG,GAAVD,GAAgBE,EAAE,GAAG,KAArBF,GAA6B,CAA3C;EACA,OAAOG,KAAP;AACD;AAED,OAAO,SAASC,kBAAT,CACLC,UADK,EAEqB;EAC1B,OAAO,CACJA,UAAU,GAAG,CAAbA,GAAkB,GADd,EAEHA,UAAU,GAAG,CAAbA,IAAmB,CAAnBA,GAAwB,GAFrB,EAGFA,UAAU,GAAG,CAAbA,IAAmB,CAAnBA,IAAyB,CAAzBA,GAA8B,GAH5B,CAAP;AAKD","names":["vec3","isNumber","getAngle","angle","undefined","createVec3","x","y","z","fromValues","length","clone","getRotationScale","matrix","result","decodePickingColor","color","i1","i2","i3","index","encodePickingColor","featureIdx"],"sources":["../../src/utils/math.ts"],"sourcesContent":["import { mat3, mat4, vec3, vec4 } from 'gl-matrix';\nimport { isNumber } from './is-number';\n\nexport function getAngle(angle: number | undefined) {\n  if (angle === undefined) {\n    return 0;\n  } else if (angle > 360 || angle < -360) {\n    return angle % 360;\n  }\n  return angle;\n}\n\nexport function createVec3(x: number | vec3 | vec4, y?: number, z?: number) {\n  if (isNumber(x)) {\n    return vec3.fromValues(x as number, y as number, z as number);\n  }\n\n  if ((x as vec3).length === 3) {\n    return vec3.clone(x as vec3);\n  }\n\n  // @ts-ignore\n  return vec3.fromValues(x[0], x[1], x[2]);\n}\n\nexport function getRotationScale(matrix: mat4, result: mat3) {\n  result[0] = matrix[0];\n  result[1] = matrix[1];\n  result[2] = matrix[2];\n  result[3] = matrix[4];\n  result[4] = matrix[5];\n  result[5] = matrix[6];\n  result[6] = matrix[8];\n  result[7] = matrix[9];\n  result[8] = matrix[10];\n  return result;\n}\n\nexport function decodePickingColor(color: Uint8Array): number {\n  const [i1, i2, i3] = color;\n  // 1 was added to seperate from no selection\n  const index = i1 + i2 * 256 + i3 * 65536 - 1;\n  return index;\n}\n\nexport function encodePickingColor(\n  featureIdx: number,\n): [number, number, number] {\n  return [\n    (featureIdx + 1) & 255,\n    ((featureIdx + 1) >> 8) & 255,\n    (((featureIdx + 1) >> 8) >> 8) & 255,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}