{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport var DataUri;\n\n(function (DataUri) {\n  function isDataUrl(url) {\n    const prefix = 'data:';\n    return url.substr(0, prefix.length) === prefix;\n  }\n\n  DataUri.isDataUrl = isDataUrl;\n  /**\n   * Converts an image at `url` to base64-encoded data uri.\n   * The mime type of the image is inferred from the `url` file extension.\n   */\n\n  function imageToDataUri(url, callback) {\n    // No need to convert to data uri if it is already in data uri.\n    if (!url || isDataUrl(url)) {\n      // Keep the async nature of the function.\n      setTimeout(() => callback(null, url));\n      return;\n    }\n\n    const onError = () => {\n      callback(new Error(`Failed to load image: ${url}`));\n    };\n\n    const onLoad = window.FileReader ? // chrome, IE10+\n    xhr => {\n      if (xhr.status === 200) {\n        const reader = new FileReader();\n\n        reader.onload = evt => {\n          const dataUri = evt.target.result;\n          callback(null, dataUri);\n        };\n\n        reader.onerror = onError;\n        reader.readAsDataURL(xhr.response);\n      } else {\n        onError();\n      }\n    } : xhr => {\n      const toString = u8a => {\n        const CHUNK_SZ = 0x8000;\n        const c = [];\n\n        for (let i = 0; i < u8a.length; i += CHUNK_SZ) {\n          c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));\n        }\n\n        return c.join('');\n      };\n\n      if (xhr.status === 200) {\n        let suffix = url.split('.').pop() || 'png';\n\n        if (suffix === 'svg') {\n          suffix = 'svg+xml';\n        }\n\n        const meta = `data:image/${suffix};base64,`;\n        const bytes = new Uint8Array(xhr.response);\n        const base64 = meta + btoa(toString(bytes));\n        callback(null, base64);\n      } else {\n        onError();\n      }\n    };\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = window.FileReader ? 'blob' : 'arraybuffer';\n    xhr.open('GET', url, true);\n    xhr.addEventListener('error', onError);\n    xhr.addEventListener('load', () => onLoad(xhr));\n    xhr.send();\n  }\n\n  DataUri.imageToDataUri = imageToDataUri;\n\n  function dataUriToBlob(dataUrl) {\n    let uri = dataUrl.replace(/\\s/g, '');\n    uri = decodeURIComponent(uri);\n    const index = uri.indexOf(',');\n    const dataType = uri.slice(0, index); // e.g. 'data:image/jpeg;base64'\n\n    const mime = dataType.split(':')[1].split(';')[0]; // e.g. 'image/jpeg'\n\n    const data = uri.slice(index + 1);\n    let decodedString;\n\n    if (dataType.indexOf('base64') >= 0) {\n      // data may be encoded in base64\n      decodedString = atob(data);\n    } else {\n      // convert the decoded string to UTF-8\n      decodedString = unescape(encodeURIComponent(data));\n    } // write the bytes of the string to a typed array\n\n\n    const ia = new Uint8Array(decodedString.length);\n\n    for (let i = 0; i < decodedString.length; i += 1) {\n      ia[i] = decodedString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {\n      type: mime\n    });\n  }\n\n  DataUri.dataUriToBlob = dataUriToBlob;\n\n  function downloadBlob(blob, fileName) {\n    const msSaveBlob = window.navigator.msSaveBlob;\n\n    if (msSaveBlob) {\n      // requires IE 10+\n      // pulls up a save dialog\n      msSaveBlob(blob, fileName);\n    } else {\n      // other browsers\n      // downloads directly in Chrome and Safari\n      // presents a save/open dialog in Firefox\n      // Firefox bug: `from` field in save dialog always shows `from:blob:`\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1053327\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link); // mark the url for garbage collection\n\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  DataUri.downloadBlob = downloadBlob;\n\n  function downloadDataUri(dataUrl, fileName) {\n    const blob = dataUriToBlob(dataUrl);\n    downloadBlob(blob, fileName);\n  }\n\n  DataUri.downloadDataUri = downloadDataUri;\n\n  function parseViewBox(svg) {\n    const matches = svg.match(/<svg[^>]*viewBox\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n\n    if (matches && matches[2]) {\n      return matches[2].replace(/\\s+/, ' ').split(' ');\n    }\n\n    return null;\n  }\n\n  function getNumber(str) {\n    const ret = parseFloat(str);\n    return Number.isNaN(ret) ? null : ret;\n  }\n\n  function svgToDataUrl(svg, options = {}) {\n    let viewBox = null;\n\n    const getNumberFromViewBox = index => {\n      if (viewBox == null) {\n        viewBox = parseViewBox(svg);\n      }\n\n      if (viewBox != null) {\n        return getNumber(viewBox[index]);\n      }\n\n      return null;\n    };\n\n    const getNumberFromMatches = reg => {\n      const matches = svg.match(reg);\n\n      if (matches && matches[2]) {\n        return getNumber(matches[2]);\n      }\n\n      return null;\n    };\n\n    let w = options.width;\n\n    if (w == null) {\n      w = getNumberFromMatches(/<svg[^>]*width\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n    }\n\n    if (w == null) {\n      w = getNumberFromViewBox(2);\n    }\n\n    if (w == null) {\n      throw new Error('Can not parse width from svg string');\n    }\n\n    let h = options.height;\n\n    if (h == null) {\n      h = getNumberFromMatches(/<svg[^>]*height\\s*=\\s*([\"']?)(.+?)\\1[^>]*>/i);\n    }\n\n    if (h == null) {\n      h = getNumberFromViewBox(3);\n    }\n\n    if (h == null) {\n      throw new Error('Can not parse height from svg string');\n    }\n\n    const decoded = encodeURIComponent(svg).replace(/'/g, '%27').replace(/\"/g, '%22');\n    const header = 'data:image/svg+xml';\n    const dataUrl = `${header},${decoded}`;\n    return dataUrl;\n  }\n\n  DataUri.svgToDataUrl = svgToDataUrl;\n})(DataUri || (DataUri = {}));","map":{"version":3,"mappings":"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","names":["DataUri","isDataUrl","url","prefix","substr","length","imageToDataUri","callback","setTimeout","onError","Error","onLoad","window","FileReader","xhr","status","reader","onload","evt","dataUri","target","result","onerror","readAsDataURL","response","toString","u8a","CHUNK_SZ","c","i","push","String","fromCharCode","apply","subarray","join","suffix","split","pop","meta","bytes","Uint8Array","base64","btoa","XMLHttpRequest","responseType","open","addEventListener","send","dataUriToBlob","dataUrl","uri","replace","decodeURIComponent","index","indexOf","dataType","slice","mime","data","decodedString","atob","unescape","encodeURIComponent","ia","charCodeAt","Blob","type","downloadBlob","blob","fileName","msSaveBlob","navigator","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","downloadDataUri","parseViewBox","svg","matches","match","getNumber","str","ret","parseFloat","Number","isNaN","svgToDataUrl","options","viewBox","getNumberFromViewBox","getNumberFromMatches","reg","w","width","h","height","decoded","header"],"sourceRoot":"","sources":["../../../src/util/datauri/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}