{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Base } from '../base';\nconst CYLINDER_TILT = 10;\nexport const Cylinder = Base.define({\n  shape: 'cylinder',\n  overwrite: true,\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'ellipse',\n    selector: 'top'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  attrs: {\n    body: Object.assign(Object.assign({}, Base.bodyAttr), {\n      lateral: CYLINDER_TILT\n    }),\n    top: Object.assign(Object.assign({}, Base.bodyAttr), {\n      refCx: '50%',\n      refRx: '50%',\n      cy: CYLINDER_TILT,\n      ry: CYLINDER_TILT\n    })\n  },\n  attrHooks: {\n    lateral: {\n      set(t, {\n        refBBox\n      }) {\n        const isPercentage = NumberExt.isPercentage(t);\n\n        if (isPercentage) {\n          // eslint-disable-next-line\n          t = parseFloat(t) / 100;\n        }\n\n        const x = refBBox.x;\n        const y = refBBox.y;\n        const w = refBBox.width;\n        const h = refBBox.height; // curve control point variables\n\n        const rx = w / 2;\n        const ry = isPercentage ? h * t : t;\n        const kappa = 0.551784;\n        const cx = kappa * rx;\n        const cy = kappa * ry; // shape variables\n\n        const xLeft = x;\n        const xCenter = x + w / 2;\n        const xRight = x + w;\n        const ySideTop = y + ry;\n        const yCurveTop = ySideTop - ry;\n        const ySideBottom = y + h - ry;\n        const yCurveBottom = y + h; // return calculated shape\n\n        const data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];\n        return {\n          d: data.join(' ')\n        };\n      }\n\n    }\n  },\n  knob: {\n    enabled: true,\n\n    position({\n      node\n    }) {\n      const lateral = node.attr('body/lateral');\n      return {\n        x: 0,\n        y: lateral\n      };\n    },\n\n    onMouseMove({\n      node,\n      data,\n      deltaY\n    }) {\n      if (deltaY !== 0) {\n        const bbox = node.getBBox();\n        const previous = node.attr('body/lateral');\n\n        if (data.round == null) {\n          data.round = previous;\n        }\n\n        const min = 0;\n        const max = bbox.height / 2;\n        const current = NumberExt.clamp(data.round + deltaY, min, max);\n\n        if (current !== previous) {\n          node.attr({\n            body: {\n              lateral: current\n            },\n            top: {\n              cy: current,\n              ry: current\n            }\n          });\n        }\n      }\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["NumberExt","Base","CYLINDER_TILT","Cylinder","define","shape","overwrite","markup","tagName","selector","attrs","body","bodyAttr","lateral","top","refCx","refRx","cy","ry","attrHooks","set","t","refBBox","isPercentage","parseFloat","x","y","w","width","h","height","rx","kappa","cx","xLeft","xCenter","xRight","ySideTop","yCurveTop","ySideBottom","yCurveBottom","data","d","join","knob","enabled","position","node","attr","onMouseMove","deltaY","bbox","getBBox","previous","round","min","max","current","clamp"],"sourceRoot":"","sources":["../../../src/shape/standard/cylinder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}