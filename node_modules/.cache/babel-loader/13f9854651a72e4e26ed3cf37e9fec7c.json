{"ast":null,"code":"import * as util from './util';\nimport { Angle } from './angle';\nimport { Line } from './line';\nimport { Point } from './point';\nimport { Geometry } from './geometry';\nexport class Rectangle extends Geometry {\n  constructor(x, y, width, height) {\n    super();\n    this.x = x == null ? 0 : x;\n    this.y = y == null ? 0 : y;\n    this.width = width == null ? 0 : width;\n    this.height = height == null ? 0 : height;\n  }\n\n  get [Symbol.toStringTag]() {\n    return Rectangle.toStringTag;\n  }\n\n  get left() {\n    return this.x;\n  }\n\n  get top() {\n    return this.y;\n  }\n\n  get right() {\n    return this.x + this.width;\n  }\n\n  get bottom() {\n    return this.y + this.height;\n  }\n\n  get origin() {\n    return new Point(this.x, this.y);\n  }\n\n  get topLeft() {\n    return new Point(this.x, this.y);\n  }\n\n  get topCenter() {\n    return new Point(this.x + this.width / 2, this.y);\n  }\n\n  get topRight() {\n    return new Point(this.x + this.width, this.y);\n  }\n\n  get center() {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  get bottomLeft() {\n    return new Point(this.x, this.y + this.height);\n  }\n\n  get bottomCenter() {\n    return new Point(this.x + this.width / 2, this.y + this.height);\n  }\n\n  get bottomRight() {\n    return new Point(this.x + this.width, this.y + this.height);\n  }\n\n  get corner() {\n    return new Point(this.x + this.width, this.y + this.height);\n  }\n\n  get rightMiddle() {\n    return new Point(this.x + this.width, this.y + this.height / 2);\n  }\n\n  get leftMiddle() {\n    return new Point(this.x, this.y + this.height / 2);\n  }\n\n  get topLine() {\n    return new Line(this.topLeft, this.topRight);\n  }\n\n  get rightLine() {\n    return new Line(this.topRight, this.bottomRight);\n  }\n\n  get bottomLine() {\n    return new Line(this.bottomLeft, this.bottomRight);\n  }\n\n  get leftLine() {\n    return new Line(this.topLeft, this.bottomLeft);\n  }\n\n  getOrigin() {\n    return this.origin;\n  }\n\n  getTopLeft() {\n    return this.topLeft;\n  }\n\n  getTopCenter() {\n    return this.topCenter;\n  }\n\n  getTopRight() {\n    return this.topRight;\n  }\n\n  getCenter() {\n    return this.center;\n  }\n\n  getCenterX() {\n    return this.x + this.width / 2;\n  }\n\n  getCenterY() {\n    return this.y + this.height / 2;\n  }\n\n  getBottomLeft() {\n    return this.bottomLeft;\n  }\n\n  getBottomCenter() {\n    return this.bottomCenter;\n  }\n\n  getBottomRight() {\n    return this.bottomRight;\n  }\n\n  getCorner() {\n    return this.corner;\n  }\n\n  getRightMiddle() {\n    return this.rightMiddle;\n  }\n\n  getLeftMiddle() {\n    return this.leftMiddle;\n  }\n\n  getTopLine() {\n    return this.topLine;\n  }\n\n  getRightLine() {\n    return this.rightLine;\n  }\n\n  getBottomLine() {\n    return this.bottomLine;\n  }\n\n  getLeftLine() {\n    return this.leftLine;\n  }\n  /**\n   * Returns a rectangle that is the bounding box of the rectangle.\n   *\n   * If `angle` is specified, the bounding box calculation will take into\n   * account the rotation of the rectangle by angle degrees around its center.\n   */\n\n\n  bbox(angle) {\n    if (!angle) {\n      return this.clone();\n    }\n\n    const rad = Angle.toRad(angle);\n    const st = Math.abs(Math.sin(rad));\n    const ct = Math.abs(Math.cos(rad));\n    const w = this.width * ct + this.height * st;\n    const h = this.width * st + this.height * ct;\n    return new Rectangle(this.x + (this.width - w) / 2, this.y + (this.height - h) / 2, w, h);\n  }\n\n  round(precision = 0) {\n    this.x = util.round(this.x, precision);\n    this.y = util.round(this.y, precision);\n    this.width = util.round(this.width, precision);\n    this.height = util.round(this.height, precision);\n    return this;\n  }\n\n  add(x, y, width, height) {\n    const rect = Rectangle.create(x, y, width, height);\n    const minX = Math.min(this.x, rect.x);\n    const minY = Math.min(this.y, rect.y);\n    const maxX = Math.max(this.x + this.width, rect.x + rect.width);\n    const maxY = Math.max(this.y + this.height, rect.y + rect.height);\n    this.x = minX;\n    this.y = minY;\n    this.width = maxX - minX;\n    this.height = maxY - minY;\n    return this;\n  }\n\n  update(x, y, width, height) {\n    const rect = Rectangle.create(x, y, width, height);\n    this.x = rect.x;\n    this.y = rect.y;\n    this.width = rect.width;\n    this.height = rect.height;\n    return this;\n  }\n\n  inflate(dx, dy) {\n    const w = dx;\n    const h = dy != null ? dy : dx;\n    this.x -= w;\n    this.y -= h;\n    this.width += 2 * w;\n    this.height += 2 * h;\n    return this;\n  }\n\n  snapToGrid(gx, gy) {\n    const origin = this.origin.snapToGrid(gx, gy);\n    const corner = this.corner.snapToGrid(gx, gy);\n    this.x = origin.x;\n    this.y = origin.y;\n    this.width = corner.x - origin.x;\n    this.height = corner.y - origin.y;\n    return this;\n  }\n\n  translate(tx, ty) {\n    const p = Point.create(tx, ty);\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  }\n\n  scale(sx, sy, origin = new Point()) {\n    const pos = this.origin.scale(sx, sy, origin);\n    this.x = pos.x;\n    this.y = pos.y;\n    this.width *= sx;\n    this.height *= sy;\n    return this;\n  }\n\n  rotate(degree, center = this.getCenter()) {\n    if (degree !== 0) {\n      const rad = Angle.toRad(degree);\n      const cos = Math.cos(rad);\n      const sin = Math.sin(rad);\n      let p1 = this.getOrigin();\n      let p2 = this.getTopRight();\n      let p3 = this.getBottomRight();\n      let p4 = this.getBottomLeft();\n      p1 = Point.rotateEx(p1, cos, sin, center);\n      p2 = Point.rotateEx(p2, cos, sin, center);\n      p3 = Point.rotateEx(p3, cos, sin, center);\n      p4 = Point.rotateEx(p4, cos, sin, center);\n      const rect = new Rectangle(p1.x, p1.y, 0, 0);\n      rect.add(p2.x, p2.y, 0, 0);\n      rect.add(p3.x, p3.y, 0, 0);\n      rect.add(p4.x, p4.y, 0, 0);\n      this.update(rect);\n    }\n\n    return this;\n  }\n\n  rotate90() {\n    const t = (this.width - this.height) / 2;\n    this.x += t;\n    this.y -= t;\n    const tmp = this.width;\n    this.width = this.height;\n    this.height = tmp;\n    return this;\n  }\n  /**\n   * Translates the rectangle by `rect.x` and `rect.y` and expand it by\n   * `rect.width` and `rect.height`.\n   */\n\n\n  moveAndExpand(rect) {\n    const ref = Rectangle.clone(rect);\n    this.x += ref.x || 0;\n    this.y += ref.y || 0;\n    this.width += ref.width || 0;\n    this.height += ref.height || 0;\n    return this;\n  }\n  /**\n   * Returns an object where `sx` and `sy` give the maximum scaling that can be\n   * applied to the rectangle so that it would still fit into `limit`. If\n   * `origin` is specified, the rectangle is scaled around it; otherwise, it is\n   * scaled around its center.\n   */\n\n\n  getMaxScaleToFit(limit, origin = this.center) {\n    const rect = Rectangle.clone(limit);\n    const ox = origin.x;\n    const oy = origin.y; // Find the maximal possible scale for all corners, so when the scale\n    // is applied the point is still inside the rectangle.\n\n    let sx1 = Infinity;\n    let sx2 = Infinity;\n    let sx3 = Infinity;\n    let sx4 = Infinity;\n    let sy1 = Infinity;\n    let sy2 = Infinity;\n    let sy3 = Infinity;\n    let sy4 = Infinity; // Top Left\n\n    const p1 = rect.topLeft;\n\n    if (p1.x < ox) {\n      sx1 = (this.x - ox) / (p1.x - ox);\n    }\n\n    if (p1.y < oy) {\n      sy1 = (this.y - oy) / (p1.y - oy);\n    } // Bottom Right\n\n\n    const p2 = rect.bottomRight;\n\n    if (p2.x > ox) {\n      sx2 = (this.x + this.width - ox) / (p2.x - ox);\n    }\n\n    if (p2.y > oy) {\n      sy2 = (this.y + this.height - oy) / (p2.y - oy);\n    } // Top Right\n\n\n    const p3 = rect.topRight;\n\n    if (p3.x > ox) {\n      sx3 = (this.x + this.width - ox) / (p3.x - ox);\n    }\n\n    if (p3.y < oy) {\n      sy3 = (this.y - oy) / (p3.y - oy);\n    } // Bottom Left\n\n\n    const p4 = rect.bottomLeft;\n\n    if (p4.x < ox) {\n      sx4 = (this.x - ox) / (p4.x - ox);\n    }\n\n    if (p4.y > oy) {\n      sy4 = (this.y + this.height - oy) / (p4.y - oy);\n    }\n\n    return {\n      sx: Math.min(sx1, sx2, sx3, sx4),\n      sy: Math.min(sy1, sy2, sy3, sy4)\n    };\n  }\n  /**\n   * Returns a number that specifies the maximum scaling that can be applied to\n   * the rectangle along both axes so that it would still fit into `limit`. If\n   * `origin` is specified, the rectangle is scaled around it; otherwise, it is\n   * scaled around its center.\n   */\n\n\n  getMaxUniformScaleToFit(limit, origin = this.center) {\n    const scale = this.getMaxScaleToFit(limit, origin);\n    return Math.min(scale.sx, scale.sy);\n  }\n\n  containsPoint(x, y) {\n    return util.containsPoint(this, Point.create(x, y));\n  }\n\n  containsRect(x, y, width, height) {\n    const b = Rectangle.create(x, y, width, height);\n    const x1 = this.x;\n    const y1 = this.y;\n    const w1 = this.width;\n    const h1 = this.height;\n    const x2 = b.x;\n    const y2 = b.y;\n    const w2 = b.width;\n    const h2 = b.height; // one of the dimensions is 0\n\n    if (w1 === 0 || h1 === 0 || w2 === 0 || h2 === 0) {\n      return false;\n    }\n\n    return x2 >= x1 && y2 >= y1 && x2 + w2 <= x1 + w1 && y2 + h2 <= y1 + h1;\n  }\n  /**\n   * Returns an array of the intersection points of the rectangle and the line.\n   * Return `null` if no intersection exists.\n   */\n\n\n  intersectsWithLine(line) {\n    const rectLines = [this.topLine, this.rightLine, this.bottomLine, this.leftLine];\n    const points = [];\n    const dedupeArr = [];\n    rectLines.forEach(l => {\n      const p = line.intersectsWithLine(l);\n\n      if (p !== null && dedupeArr.indexOf(p.toString()) < 0) {\n        points.push(p);\n        dedupeArr.push(p.toString());\n      }\n    });\n    return points.length > 0 ? points : null;\n  }\n  /**\n   * Returns the point on the boundary of the rectangle that is the intersection\n   * of the rectangle with a line starting in the center the rectangle ending in\n   * the point `p`.\n   *\n   * If `angle` is specified, the intersection will take into account the\n   * rotation of the rectangle by `angle` degrees around its center.\n   */\n\n\n  intersectsWithLineFromCenterToPoint(p, angle) {\n    const ref = Point.clone(p);\n    const center = this.center;\n    let result = null;\n\n    if (angle != null && angle !== 0) {\n      ref.rotate(angle, center);\n    }\n\n    const sides = [this.topLine, this.rightLine, this.bottomLine, this.leftLine];\n    const connector = new Line(center, ref);\n\n    for (let i = sides.length - 1; i >= 0; i -= 1) {\n      const intersection = sides[i].intersectsWithLine(connector);\n\n      if (intersection !== null) {\n        result = intersection;\n        break;\n      }\n    }\n\n    if (result && angle != null && angle !== 0) {\n      result.rotate(-angle, center);\n    }\n\n    return result;\n  }\n\n  intersectsWithRect(x, y, width, height) {\n    const ref = Rectangle.create(x, y, width, height); // no intersection\n\n    if (!this.isIntersectWithRect(ref)) {\n      return null;\n    }\n\n    const myOrigin = this.origin;\n    const myCorner = this.corner;\n    const rOrigin = ref.origin;\n    const rCorner = ref.corner;\n    const xx = Math.max(myOrigin.x, rOrigin.x);\n    const yy = Math.max(myOrigin.y, rOrigin.y);\n    return new Rectangle(xx, yy, Math.min(myCorner.x, rCorner.x) - xx, Math.min(myCorner.y, rCorner.y) - yy);\n  }\n\n  isIntersectWithRect(x, y, width, height) {\n    const ref = Rectangle.create(x, y, width, height);\n    const myOrigin = this.origin;\n    const myCorner = this.corner;\n    const rOrigin = ref.origin;\n    const rCorner = ref.corner;\n\n    if (rCorner.x <= myOrigin.x || rCorner.y <= myOrigin.y || rOrigin.x >= myCorner.x || rOrigin.y >= myCorner.y) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Normalize the rectangle, i.e. make it so that it has non-negative\n   * width and height. If width is less than `0`, the function swaps left and\n   * right corners and if height is less than `0`, the top and bottom corners\n   * are swapped.\n   */\n\n\n  normalize() {\n    let newx = this.x;\n    let newy = this.y;\n    let newwidth = this.width;\n    let newheight = this.height;\n\n    if (this.width < 0) {\n      newx = this.x + this.width;\n      newwidth = -this.width;\n    }\n\n    if (this.height < 0) {\n      newy = this.y + this.height;\n      newheight = -this.height;\n    }\n\n    this.x = newx;\n    this.y = newy;\n    this.width = newwidth;\n    this.height = newheight;\n    return this;\n  }\n  /**\n   * Returns a rectangle that is a union of this rectangle and rectangle `rect`.\n   */\n\n\n  union(rect) {\n    const ref = Rectangle.clone(rect);\n    const myOrigin = this.origin;\n    const myCorner = this.corner;\n    const rOrigin = ref.origin;\n    const rCorner = ref.corner;\n    const originX = Math.min(myOrigin.x, rOrigin.x);\n    const originY = Math.min(myOrigin.y, rOrigin.y);\n    const cornerX = Math.max(myCorner.x, rCorner.x);\n    const cornerY = Math.max(myCorner.y, rCorner.y);\n    return new Rectangle(originX, originY, cornerX - originX, cornerY - originY);\n  }\n  /**\n   * Returns a string (\"top\", \"left\", \"right\" or \"bottom\") denoting the side of\n   * the rectangle which is nearest to the point `p`.\n   */\n\n\n  getNearestSideToPoint(p) {\n    const ref = Point.clone(p);\n    const distLeft = ref.x - this.x;\n    const distRight = this.x + this.width - ref.x;\n    const distTop = ref.y - this.y;\n    const distBottom = this.y + this.height - ref.y;\n    let closest = distLeft;\n    let side = 'left';\n\n    if (distRight < closest) {\n      closest = distRight;\n      side = 'right';\n    }\n\n    if (distTop < closest) {\n      closest = distTop;\n      side = 'top';\n    }\n\n    if (distBottom < closest) {\n      side = 'bottom';\n    }\n\n    return side;\n  }\n  /**\n   * Returns a point on the boundary of the rectangle nearest to the point `p`.\n   */\n\n\n  getNearestPointToPoint(p) {\n    const ref = Point.clone(p);\n\n    if (this.containsPoint(ref)) {\n      const side = this.getNearestSideToPoint(ref);\n\n      switch (side) {\n        case 'right':\n          return new Point(this.x + this.width, ref.y);\n\n        case 'left':\n          return new Point(this.x, ref.y);\n\n        case 'bottom':\n          return new Point(ref.x, this.y + this.height);\n\n        case 'top':\n          return new Point(ref.x, this.y);\n\n        default:\n          break;\n      }\n    }\n\n    return ref.adhereToRect(this);\n  }\n\n  equals(rect) {\n    return rect != null && rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n  }\n\n  clone() {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  }\n\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height\n    };\n  }\n\n  serialize() {\n    return `${this.x} ${this.y} ${this.width} ${this.height}`;\n  }\n\n}\n\n(function (Rectangle) {\n  Rectangle.toStringTag = `X6.Geometry.${Rectangle.name}`;\n\n  function isRectangle(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Rectangle) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const rect = instance;\n\n    if ((tag == null || tag === Rectangle.toStringTag) && typeof rect.x === 'number' && typeof rect.y === 'number' && typeof rect.width === 'number' && typeof rect.height === 'number' && typeof rect.inflate === 'function' && typeof rect.moveAndExpand === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  Rectangle.isRectangle = isRectangle;\n})(Rectangle || (Rectangle = {}));\n\n(function (Rectangle) {\n  function isRectangleLike(o) {\n    return o != null && typeof o === 'object' && typeof o.x === 'number' && typeof o.y === 'number' && typeof o.width === 'number' && typeof o.height === 'number';\n  }\n\n  Rectangle.isRectangleLike = isRectangleLike;\n})(Rectangle || (Rectangle = {}));\n\n(function (Rectangle) {\n  function create(x, y, width, height) {\n    if (x == null || typeof x === 'number') {\n      return new Rectangle(x, y, width, height);\n    }\n\n    return clone(x);\n  }\n\n  Rectangle.create = create;\n\n  function clone(rect) {\n    if (Rectangle.isRectangle(rect)) {\n      return rect.clone();\n    }\n\n    if (Array.isArray(rect)) {\n      return new Rectangle(rect[0], rect[1], rect[2], rect[3]);\n    }\n\n    return new Rectangle(rect.x, rect.y, rect.width, rect.height);\n  }\n\n  Rectangle.clone = clone;\n\n  function fromSize(size) {\n    return new Rectangle(0, 0, size.width, size.height);\n  }\n\n  Rectangle.fromSize = fromSize;\n\n  function fromPositionAndSize(pos, size) {\n    return new Rectangle(pos.x, pos.y, size.width, size.height);\n  }\n\n  Rectangle.fromPositionAndSize = fromPositionAndSize;\n  /**\n   * Returns a new rectangle from the given ellipse.\n   */\n\n  function fromEllipse(ellipse) {\n    return new Rectangle(ellipse.x - ellipse.a, ellipse.y - ellipse.b, 2 * ellipse.a, 2 * ellipse.b);\n  }\n\n  Rectangle.fromEllipse = fromEllipse;\n})(Rectangle || (Rectangle = {}));","map":{"version":3,"mappings":"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","names":["util","Angle","Line","Point","Geometry","Rectangle","constructor","x","y","width","height","Symbol","toStringTag","left","top","right","bottom","origin","topLeft","topCenter","topRight","center","bottomLeft","bottomCenter","bottomRight","corner","rightMiddle","leftMiddle","topLine","rightLine","bottomLine","leftLine","getOrigin","getTopLeft","getTopCenter","getTopRight","getCenter","getCenterX","getCenterY","getBottomLeft","getBottomCenter","getBottomRight","getCorner","getRightMiddle","getLeftMiddle","getTopLine","getRightLine","getBottomLine","getLeftLine","bbox","angle","clone","rad","toRad","st","Math","abs","sin","ct","cos","w","h","round","precision","add","rect","create","minX","min","minY","maxX","max","maxY","update","inflate","dx","dy","snapToGrid","gx","gy","translate","tx","ty","p","scale","sx","sy","pos","rotate","degree","p1","p2","p3","p4","rotateEx","rotate90","t","tmp","moveAndExpand","ref","getMaxScaleToFit","limit","ox","oy","sx1","Infinity","sx2","sx3","sx4","sy1","sy2","sy3","sy4","getMaxUniformScaleToFit","containsPoint","containsRect","b","x1","y1","w1","h1","x2","y2","w2","h2","intersectsWithLine","line","rectLines","points","dedupeArr","forEach","l","indexOf","toString","push","length","intersectsWithLineFromCenterToPoint","result","sides","connector","i","intersection","intersectsWithRect","isIntersectWithRect","myOrigin","myCorner","rOrigin","rCorner","xx","yy","normalize","newx","newy","newwidth","newheight","union","originX","originY","cornerX","cornerY","getNearestSideToPoint","distLeft","distRight","distTop","distBottom","closest","side","getNearestPointToPoint","adhereToRect","equals","toJSON","serialize","name","isRectangle","instance","tag","isRectangleLike","o","Array","isArray","fromSize","size","fromPositionAndSize","fromEllipse","ellipse","a"],"sourceRoot":"","sources":["../../src/geometry/rectangle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}