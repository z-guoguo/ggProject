{"ast":null,"code":"function decasteljau(points, t) {\n  var left = [];\n  var right = [];\n\n  function recurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var middlePoints = [];\n\n      for (var i = 0; i < points.length - 1; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n\n        if (i === points.length - 2) {\n          right.push(points[i + 1]);\n        }\n\n        middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n\n      recurse(middlePoints, t);\n    }\n  }\n\n  if (points.length) {\n    recurse(points, t);\n  }\n\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\n\nfunction splitCurve(start, end, count) {\n  var points = [[start[1], start[2]]];\n  count = count || 2;\n  var segments = [];\n\n  if (end[0] === 'A') {\n    points.push(end[6]);\n    points.push(end[7]);\n  } else if (end[0] === 'C') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n    points.push([end[5], end[6]]);\n  } else if (end[0] === 'S' || end[0] === 'Q') {\n    points.push([end[1], end[2]]);\n    points.push([end[3], end[4]]);\n  } else {\n    points.push([end[1], end[2]]);\n  }\n\n  var leftSegments = points;\n  var t = 1 / count;\n\n  for (var i = 0; i < count - 1; i++) {\n    var rt = t / (1 - t * i);\n    var split = decasteljau(leftSegments, rt);\n    segments.push(split.left);\n    leftSegments = split.right;\n  }\n\n  segments.push(leftSegments);\n  var result = segments.map(function (segment) {\n    var cmd = [];\n\n    if (segment.length === 4) {\n      cmd.push('C');\n      cmd = cmd.concat(segment[2]);\n    }\n\n    if (segment.length >= 3) {\n      if (segment.length === 3) {\n        cmd.push('Q');\n      }\n\n      cmd = cmd.concat(segment[1]);\n    }\n\n    if (segment.length === 2) {\n      cmd.push('L');\n    }\n\n    cmd = cmd.concat(segment[segment.length - 1]);\n    return cmd;\n  });\n  return result;\n}\n\nfunction splitSegment(start, end, count) {\n  if (count === 1) {\n    return [[].concat(start)];\n  }\n\n  var segments = [];\n\n  if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n    segments = segments.concat(splitCurve(start, end, count));\n  } else {\n    var temp = [].concat(start);\n\n    if (temp[0] === 'M') {\n      temp[0] = 'L';\n    }\n\n    for (var i = 0; i <= count - 1; i++) {\n      segments.push(temp);\n    }\n  }\n\n  return segments;\n}\n\nexport default function fillPath(source, target) {\n  if (source.length === 1) {\n    return source;\n  }\n\n  var sourceLen = source.length - 1;\n  var targetLen = target.length - 1;\n  var ratio = sourceLen / targetLen;\n  var segmentsToFill = [];\n\n  if (source.length === 1 && source[0][0] === 'M') {\n    for (var i = 0; i < targetLen - sourceLen; i++) {\n      source.push(source[0]);\n    }\n\n    return source;\n  }\n\n  for (var i = 0; i < targetLen; i++) {\n    var index = Math.floor(ratio * i);\n    segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n  }\n\n  var filled = segmentsToFill.reduce(function (filled, count, i) {\n    if (i === sourceLen) {\n      return filled.concat(source[sourceLen]);\n    }\n\n    return filled.concat(splitSegment(source[i], source[i + 1], count));\n  }, []);\n  filled.unshift(source[0]);\n\n  if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n    filled.push('Z');\n  }\n\n  return filled;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,CAAqBC,MAArB,EAA6BC,CAA7B,EAA8B;EAC5B,IAAMC,IAAI,GAAG,EAAb;EACA,IAAMC,KAAK,GAAG,EAAd;;EAEA,SAASC,OAAT,CAAiBJ,MAAjB,EAAyBC,CAAzB,EAA0B;IACxB,IAAID,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;MACvBH,IAAI,CAACI,IAAL,CAAUN,MAAM,CAAC,CAAD,CAAhB;MACAG,KAAK,CAACG,IAAN,CAAWN,MAAM,CAAC,CAAD,CAAjB;IACD,CAHD,MAGO;MACL,IAAMO,YAAY,GAAG,EAArB;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACK,MAAP,GAAgB,CAApC,EAAuCG,CAAC,EAAxC,EAA4C;QAC1C,IAAIA,CAAC,KAAK,CAAV,EAAa;UACXN,IAAI,CAACI,IAAL,CAAUN,MAAM,CAAC,CAAD,CAAhB;QACD;;QACD,IAAIQ,CAAC,KAAKR,MAAM,CAACK,MAAP,GAAgB,CAA1B,EAA6B;UAC3BF,KAAK,CAACG,IAAN,CAAWN,MAAM,CAACQ,CAAC,GAAG,CAAL,CAAjB;QACD;;QACDD,YAAY,CAACC,CAAD,CAAZ,GAAkB,CAAE,CAAC,IAAIP,CAAL,IAAUD,MAAM,CAACQ,CAAD,CAAN,CAAU,CAAV,CAAV,GAAyBP,CAAC,GAAGD,MAAM,CAACQ,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA/B,EAAiD,CAAC,IAAIP,CAAL,IAAUD,MAAM,CAACQ,CAAD,CAAN,CAAU,CAAV,CAAV,GAAyBP,CAAC,GAAGD,MAAM,CAACQ,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA9E,CAAlB;MACD;;MACDJ,OAAO,CAACG,YAAD,EAAeN,CAAf,CAAP;IACD;EACF;;EACD,IAAID,MAAM,CAACK,MAAX,EAAmB;IACjBD,OAAO,CAACJ,MAAD,EAASC,CAAT,CAAP;EACD;;EACD,OAAO;IAAEC,IAAI,MAAN;IAAQC,KAAK,EAAEA,KAAK,CAACM,OAAN;EAAf,CAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,KAAhC,EAAqC;EACnC,IAAMb,MAAM,GAAG,CAAE,CAAEW,KAAK,CAAC,CAAD,CAAP,EAAYA,KAAK,CAAC,CAAD,CAAjB,CAAF,CAAf;EACAE,KAAK,GAAGA,KAAK,IAAI,CAAjB;EACA,IAAMC,QAAQ,GAAG,EAAjB;;EACA,IAAIF,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAClBZ,MAAM,CAACM,IAAP,CAAYM,GAAG,CAAC,CAAD,CAAf;IACAZ,MAAM,CAACM,IAAP,CAAYM,GAAG,CAAC,CAAD,CAAf;EACD,CAHD,MAGO,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;IACzBZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;IACAZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;IACAZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;EACD,CAJM,MAIA,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAjC,EAAsC;IAC3CZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;IACAZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;EACD,CAHM,MAGA;IACLZ,MAAM,CAACM,IAAP,CAAY,CAAEM,GAAG,CAAC,CAAD,CAAL,EAAUA,GAAG,CAAC,CAAD,CAAb,CAAZ;EACD;;EAED,IAAIG,YAAY,GAAGf,MAAnB;EACA,IAAMC,CAAC,GAAG,IAAIY,KAAd;;EAEA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,KAAK,GAAG,CAA5B,EAA+BL,CAAC,EAAhC,EAAoC;IAClC,IAAMQ,EAAE,GAAGf,CAAC,IAAI,IAAIA,CAAC,GAAGO,CAAZ,CAAZ;IACA,IAAMS,KAAK,GAAGlB,WAAW,CAACgB,YAAD,EAAeC,EAAf,CAAzB;IACAF,QAAQ,CAACR,IAAT,CAAcW,KAAK,CAACf,IAApB;IACAa,YAAY,GAAGE,KAAK,CAACd,KAArB;EACD;;EACDW,QAAQ,CAACR,IAAT,CAAcS,YAAd;EACA,IAAMG,MAAM,GAAGJ,QAAQ,CAACK,GAAT,CAAa,UAACC,OAAD,EAAQ;IAClC,IAAIC,GAAG,GAAG,EAAV;;IACA,IAAID,OAAO,CAACf,MAAR,KAAmB,CAAvB,EAA0B;MACxBgB,GAAG,CAACf,IAAJ,CAAS,GAAT;MACAe,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAWF,OAAO,CAAC,CAAD,CAAlB,CAAN;IACD;;IACD,IAAIA,OAAO,CAACf,MAAR,IAAkB,CAAtB,EAAyB;MACvB,IAAIe,OAAO,CAACf,MAAR,KAAmB,CAAvB,EAA0B;QACxBgB,GAAG,CAACf,IAAJ,CAAS,GAAT;MACD;;MACDe,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAWF,OAAO,CAAC,CAAD,CAAlB,CAAN;IACD;;IACD,IAAIA,OAAO,CAACf,MAAR,KAAmB,CAAvB,EAA0B;MACxBgB,GAAG,CAACf,IAAJ,CAAS,GAAT;IACD;;IACDe,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAWF,OAAO,CAACA,OAAO,CAACf,MAAR,GAAiB,CAAlB,CAAlB,CAAN;IACA,OAAOgB,GAAP;EACD,CAjBc,CAAf;EAkBA,OAAOH,MAAP;AACD;;AAED,SAASK,YAAT,CAAsBZ,KAAtB,EAA6BC,GAA7B,EAAkCC,KAAlC,EAAuC;EACrC,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACf,OAAO,CAAE,GAAGS,MAAH,CAAUX,KAAV,CAAF,CAAP;EACD;;EACD,IAAIG,QAAQ,GAAG,EAAf;;EACA,IAAIF,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAA7B,IAAoCA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAnD,EAAwD;IACtDE,QAAQ,GAAGA,QAAQ,CAACQ,MAAT,CAAgBZ,UAAU,CAACC,KAAD,EAAQC,GAAR,EAAaC,KAAb,CAA1B,CAAX;EACD,CAFD,MAEO;IACL,IAAMW,IAAI,GAAG,GAAGF,MAAH,CAAUX,KAAV,CAAb;;IACA,IAAIa,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;MACnBA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAV;IACD;;IACD,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIK,KAAK,GAAG,CAA7B,EAAgCL,CAAC,EAAjC,EAAqC;MACnCM,QAAQ,CAACR,IAAT,CAAckB,IAAd;IACD;EACF;;EACD,OAAOV,QAAP;AACD;;AAED,eAAc,SAAUW,QAAV,CAAmBC,MAAnB,EAA2BC,MAA3B,EAAiC;EAC7C,IAAID,MAAM,CAACrB,MAAP,KAAkB,CAAtB,EAAyB;IACvB,OAAOqB,MAAP;EACD;;EACD,IAAME,SAAS,GAAGF,MAAM,CAACrB,MAAP,GAAgB,CAAlC;EACA,IAAMwB,SAAS,GAAGF,MAAM,CAACtB,MAAP,GAAgB,CAAlC;EACA,IAAMyB,KAAK,GAAGF,SAAS,GAAGC,SAA1B;EACA,IAAME,cAAc,GAAG,EAAvB;;EACA,IAAIL,MAAM,CAACrB,MAAP,KAAkB,CAAlB,IAAuBqB,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,MAAiB,GAA5C,EAAiD;IAC/C,KAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,SAAS,GAAGD,SAAhC,EAA2CpB,CAAC,EAA5C,EAAgD;MAC9CkB,MAAM,CAACpB,IAAP,CAAYoB,MAAM,CAAC,CAAD,CAAlB;IACD;;IACD,OAAOA,MAAP;EACD;;EACD,KAAK,IAAIlB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,SAApB,EAA+BrB,CAAC,EAAhC,EAAoC;IAClC,IAAMwB,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAGtB,CAAnB,CAAd;IACAuB,cAAc,CAACC,KAAD,CAAd,GAAwB,CAACD,cAAc,CAACC,KAAD,CAAd,IAAyB,CAA1B,IAA+B,CAAvD;EACD;;EACD,IAAMG,MAAM,GAAGJ,cAAc,CAACK,MAAf,CAAsB,UAACD,MAAD,EAAStB,KAAT,EAAgBL,CAAhB,EAAiB;IACpD,IAAIA,CAAC,KAAKoB,SAAV,EAAqB;MACnB,OAAOO,MAAM,CAACb,MAAP,CAAcI,MAAM,CAACE,SAAD,CAApB,CAAP;IACD;;IACD,OAAOO,MAAM,CAACb,MAAP,CAAcC,YAAY,CAACG,MAAM,CAAClB,CAAD,CAAP,EAAYkB,MAAM,CAAClB,CAAC,GAAG,CAAL,CAAlB,EAA2BK,KAA3B,CAA1B,CAAP;EACD,CALc,EAKsB,EALtB,CAAf;EAMAsB,MAAM,CAACE,OAAP,CAAeX,MAAM,CAAC,CAAD,CAArB;;EACA,IAAIC,MAAM,CAACE,SAAD,CAAN,KAAsB,GAAtB,IAA6BF,MAAM,CAACE,SAAD,CAAN,KAAsB,GAAvD,EAA4D;IAC1DM,MAAM,CAAC7B,IAAP,CAAY,GAAZ;EACD;;EACD,OAAO6B,MAAP;AACD","names":["decasteljau","points","t","left","right","recurse","length","push","middlePoints","i","reverse","splitCurve","start","end","count","segments","leftSegments","rt","split","result","map","segment","cmd","concat","splitSegment","temp","fillPath","source","target","sourceLen","targetLen","ratio","segmentsToFill","index","Math","floor","filled","reduce","unshift"],"sourceRoot":"","sources":["../src/fill-path.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}