{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nexport var ResourcePool = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function ResourcePool() {\n    _classCallCheck(this, ResourcePool);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    this.resourcePool = {};\n  }\n\n  _createClass(ResourcePool, [{\n    key: \"getOrCreateResource\",\n\n    /**\n     * 负责实例化虚拟资源，通过引擎服务\n     * @param resource 虚拟资源\n     */\n    value: function getOrCreateResource(resource) {\n      if (!this.resourcePool[resource.name]) {\n        var _resource$descriptor = resource.descriptor,\n            width = _resource$descriptor.width,\n            height = _resource$descriptor.height,\n            usage = _resource$descriptor.usage;\n        this.resourcePool[resource.name] = this.engine.createFramebuffer({\n          color: this.engine.createTexture2D({\n            width: width,\n            height: height,\n            wrapS: gl.CLAMP_TO_EDGE,\n            wrapT: gl.CLAMP_TO_EDGE,\n            usage: usage\n          })\n        });\n      }\n\n      return this.resourcePool[resource.name];\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.resourcePool = {};\n    }\n  }]);\n\n  return ResourcePool;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,EAAT,QAAmB,gBAAnB;AAKA,WAAaC,YAAb,WADCH,UAAU,EACX,UACGD,MAAM,CAACE,UAAU,CAACG,YAAZ,CADT;EAAA;IAAAC;;IAAAC;;IAAA,KAKUC,YALV,GAKuD,EALvD;EAAA;;EAAAC;IAAAC;;IAOE;AACF;AACA;AACA;IAVAC,oCAW6BC,QAX7B,EAWoE;MAChE,IAAI,CAAC,KAAKJ,YAAL,CAAkBI,QAAQ,CAACC,IAA3B,CAAL,EAAuC;QAAA,2BACJD,QAAQ,CAACE,UADL;QAAA,IAC7BC,KAD6B,wBAC7BA,KAD6B;QAAA,IACtBC,MADsB,wBACtBA,MADsB;QAAA,IACdC,KADc,wBACdA,KADc;QAErC,KAAKT,YAAL,CAAkBI,QAAQ,CAACC,IAA3B,IAAmC,KAAKK,MAAL,CAAYC,iBAAZ,CAA8B;UAC/DC,KAAK,EAAE,KAAKF,MAAL,CAAYG,eAAZ,CAA4B;YACjCN,KAAK,EAALA,KADiC;YAEjCC,MAAM,EAANA,MAFiC;YAGjCM,KAAK,EAAEnB,EAAE,CAACoB,aAHuB;YAIjCC,KAAK,EAAErB,EAAE,CAACoB,aAJuB;YAKjCN,KAAK,EAALA;UALiC,CAA5B;QADwD,CAA9B,CAAnC;MASD;;MAED,OAAO,KAAKT,YAAL,CAAkBI,QAAQ,CAACC,IAA3B,CAAP;IACD;EA1BH;IAAAH;IAAAC,wBA4BiB;MACb,KAAKH,YAAL,GAAoB,EAApB;IACD;EA9BH;;EAAA;AAAA;EAAAiB;EAAAC;EAAAC;EAAAC;AAAA","names":["inject","injectable","IDENTIFIER","gl","ResourcePool","RenderEngine","_classCallCheck","_initializerDefineProperty","resourcePool","_createClass","key","value","resource","name","descriptor","width","height","usage","engine","createFramebuffer","color","createTexture2D","wrapS","CLAMP_TO_EDGE","wrapT","configurable","enumerable","writable","initializer"],"sources":["../../../src/components/framegraph/ResourcePool.ts"],"sourcesContent":["import { inject, injectable } from 'inversify';\nimport { IFramebuffer } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nimport { gl } from '../renderer/gl';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ResourceEntry } from './ResourceEntry';\n\n@injectable()\nexport class ResourcePool {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  // 资源池\n  private resourcePool: Record<string, IFramebuffer> = {};\n\n  /**\n   * 负责实例化虚拟资源，通过引擎服务\n   * @param resource 虚拟资源\n   */\n  public getOrCreateResource(resource: ResourceEntry): IFramebuffer {\n    if (!this.resourcePool[resource.name]) {\n      const { width, height, usage } = resource.descriptor;\n      this.resourcePool[resource.name] = this.engine.createFramebuffer({\n        color: this.engine.createTexture2D({\n          width,\n          height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE,\n          usage,\n        }),\n      });\n    }\n\n    return this.resourcePool[resource.name];\n  }\n\n  public clean() {\n    this.resourcePool = {};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}