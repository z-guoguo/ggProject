{"ast":null,"code":"import { resolve } from './util';\n\nconst middleSide = function (view, magnet, refPoint, options) {\n  let bbox;\n  let angle = 0;\n  let center;\n  const node = view.cell;\n\n  if (options.rotate) {\n    bbox = view.getUnrotatedBBoxOfElement(magnet);\n    center = node.getBBox().getCenter();\n    angle = node.getAngle();\n  } else {\n    bbox = view.getBBoxOfElement(magnet);\n  }\n\n  const padding = options.padding;\n\n  if (padding != null && Number.isFinite(padding)) {\n    bbox.inflate(padding);\n  }\n\n  if (options.rotate) {\n    refPoint.rotate(angle, center);\n  }\n\n  const side = bbox.getNearestSideToPoint(refPoint);\n  let result;\n\n  switch (side) {\n    case 'left':\n      result = bbox.getLeftMiddle();\n      break;\n\n    case 'right':\n      result = bbox.getRightMiddle();\n      break;\n\n    case 'top':\n      result = bbox.getTopCenter();\n      break;\n\n    case 'bottom':\n      result = bbox.getBottomCenter();\n      break;\n\n    default:\n      break;\n  }\n\n  const direction = options.direction;\n\n  if (direction === 'H') {\n    if (side === 'top' || side === 'bottom') {\n      if (refPoint.x <= bbox.x + bbox.width) {\n        result = bbox.getLeftMiddle();\n      } else {\n        result = bbox.getRightMiddle();\n      }\n    }\n  } else if (direction === 'V') {\n    if (refPoint.y <= bbox.y + bbox.height) {\n      result = bbox.getTopCenter();\n    } else {\n      result = bbox.getBottomCenter();\n    }\n  }\n\n  return options.rotate ? result.rotate(-angle, center) : result;\n};\n/**\n * Places the anchor of the edge in the middle of the side of view bbox\n * closest to the other endpoint.\n */\n\n\nexport const midSide = resolve(middleSide);","map":{"version":3,"mappings":"AAAA,SAAyBA,OAAzB,QAAwC,QAAxC;;AAUA,MAAMC,UAAU,GACd,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,OAAlC,EAAyC;EACvC,IAAIC,IAAJ;EACA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,MAAJ;EAEA,MAAMC,IAAI,GAAGP,IAAI,CAACQ,IAAlB;;EACA,IAAIL,OAAO,CAACM,MAAZ,EAAoB;IAClBL,IAAI,GAAGJ,IAAI,CAACU,yBAAL,CAA+BT,MAA/B,CAAP;IACAK,MAAM,GAAGC,IAAI,CAACI,OAAL,GAAeC,SAAf,EAAT;IACAP,KAAK,GAAGE,IAAI,CAACM,QAAL,EAAR;EACD,CAJD,MAIO;IACLT,IAAI,GAAGJ,IAAI,CAACc,gBAAL,CAAsBb,MAAtB,CAAP;EACD;;EAED,MAAMc,OAAO,GAAGZ,OAAO,CAACY,OAAxB;;EACA,IAAIA,OAAO,IAAI,IAAX,IAAmBC,MAAM,CAACC,QAAP,CAAgBF,OAAhB,CAAvB,EAAiD;IAC/CX,IAAI,CAACc,OAAL,CAAaH,OAAb;EACD;;EAED,IAAIZ,OAAO,CAACM,MAAZ,EAAoB;IAClBP,QAAQ,CAACO,MAAT,CAAgBJ,KAAhB,EAAuBC,MAAvB;EACD;;EAED,MAAMa,IAAI,GAAGf,IAAI,CAACgB,qBAAL,CAA2BlB,QAA3B,CAAb;EACA,IAAImB,MAAJ;;EACA,QAAQF,IAAR;IACE,KAAK,MAAL;MACEE,MAAM,GAAGjB,IAAI,CAACkB,aAAL,EAAT;MACA;;IACF,KAAK,OAAL;MACED,MAAM,GAAGjB,IAAI,CAACmB,cAAL,EAAT;MACA;;IACF,KAAK,KAAL;MACEF,MAAM,GAAGjB,IAAI,CAACoB,YAAL,EAAT;MACA;;IACF,KAAK,QAAL;MACEH,MAAM,GAAGjB,IAAI,CAACqB,eAAL,EAAT;MACA;;IACF;MACE;EAdJ;;EAiBA,MAAMC,SAAS,GAAGvB,OAAO,CAACuB,SAA1B;;EACA,IAAIA,SAAS,KAAK,GAAlB,EAAuB;IACrB,IAAIP,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,QAA/B,EAAyC;MACvC,IAAIjB,QAAQ,CAACyB,CAAT,IAAcvB,IAAI,CAACuB,CAAL,GAASvB,IAAI,CAACwB,KAAhC,EAAuC;QACrCP,MAAM,GAAGjB,IAAI,CAACkB,aAAL,EAAT;MACD,CAFD,MAEO;QACLD,MAAM,GAAGjB,IAAI,CAACmB,cAAL,EAAT;MACD;IACF;EACF,CARD,MAQO,IAAIG,SAAS,KAAK,GAAlB,EAAuB;IAC5B,IAAIxB,QAAQ,CAAC2B,CAAT,IAAczB,IAAI,CAACyB,CAAL,GAASzB,IAAI,CAAC0B,MAAhC,EAAwC;MACtCT,MAAM,GAAGjB,IAAI,CAACoB,YAAL,EAAT;IACD,CAFD,MAEO;MACLH,MAAM,GAAGjB,IAAI,CAACqB,eAAL,EAAT;IACD;EACF;;EAED,OAAOtB,OAAO,CAACM,MAAR,GAAiBY,MAAO,CAACZ,MAAR,CAAe,CAACJ,KAAhB,EAAuBC,MAAvB,CAAjB,GAAkDe,MAAzD;AACD,CA7DH;AA+DA;;;;;;AAIA,OAAO,MAAMU,OAAO,GAAGjC,OAAO,CAG5BC,UAH4B,CAAvB","names":["resolve","middleSide","view","magnet","refPoint","options","bbox","angle","center","node","cell","rotate","getUnrotatedBBoxOfElement","getBBox","getCenter","getAngle","getBBoxOfElement","padding","Number","isFinite","inflate","side","getNearestSideToPoint","result","getLeftMiddle","getRightMiddle","getTopCenter","getBottomCenter","direction","x","width","y","height","midSide"],"sourceRoot":"","sources":["../../../src/registry/node-anchor/middle-side.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}