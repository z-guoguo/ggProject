{"ast":null,"code":"import getAdjMatrix from \"./adjacent-matrix\";\n\nvar floydWarshall = function floydWarshall(graphData, directed) {\n  var adjacentMatrix = getAdjMatrix(graphData, directed);\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nexport default floydWarshall;","map":{"version":3,"names":["getAdjMatrix","floydWarshall","graphData","directed","adjacentMatrix","dist","size","length","i","j","Infinity","k"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/es/floydWarshall.js"],"sourcesContent":["import getAdjMatrix from \"./adjacent-matrix\";\n\nvar floydWarshall = function floydWarshall(graphData, directed) {\n  var adjacentMatrix = getAdjMatrix(graphData, directed);\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nexport default floydWarshall;"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;EAC9D,IAAIC,cAAc,GAAGJ,YAAY,CAACE,SAAD,EAAYC,QAAZ,CAAjC;EACA,IAAIE,IAAI,GAAG,EAAX;EACA,IAAIC,IAAI,GAAGF,cAAc,CAACG,MAA1B;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;IAChCH,IAAI,CAACG,CAAD,CAAJ,GAAU,EAAV;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;MAChC,IAAID,CAAC,KAAKC,CAAV,EAAa;QACXJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAa,CAAb;MACD,CAFD,MAEO,IAAIL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,MAAyB,CAAzB,IAA8B,CAACL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,CAAnC,EAAyD;QAC9DJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaC,QAAb;MACD,CAFM,MAEA;QACLL,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaL,cAAc,CAACI,CAAD,CAAd,CAAkBC,CAAlB,CAAb;MACD;IACF;EACF,CAjB6D,CAiB5D;;;EAGF,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,IAAI,CAA/B,EAAkC;IAChC,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;MAChC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;QAChC,IAAIJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA9B,EAA0C;UACxCJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA1B;QACD;MACF;IACF;EACF;;EAED,OAAOJ,IAAP;AACD,CA/BD;;AAiCA,eAAeJ,aAAf"},"metadata":{},"sourceType":"module"}