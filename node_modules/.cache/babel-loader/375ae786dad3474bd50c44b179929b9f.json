{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\n\nvar ShapeBase =\n/** @class */\nfunction (_super) {\n  __extends(ShapeBase, _super);\n\n  function ShapeBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this); // 设置默认值\n\n\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  };\n\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n\n  ShapeBase.prototype.calculateBBox = function () {\n    var type = this.get('type');\n    var lineWidth = this.getHitLineWidth(); // const attrs = this.attr();\n\n    var bboxMethod = getBBoxMethod(type);\n    var box = bboxMethod(this);\n    var halfLineWidth = lineWidth / 2;\n    var minX = box.x - halfLineWidth;\n    var minY = box.y - halfLineWidth;\n    var maxX = box.x + box.width + halfLineWidth;\n    var maxY = box.y + box.height + halfLineWidth;\n    return {\n      x: minX,\n      minX: minX,\n      y: minY,\n      minY: minY,\n      width: box.width + lineWidth,\n      height: box.height + lineWidth,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n\n  ShapeBase.prototype.isFill = function () {\n    return !!this.attrs['fill'] || this.isClipShape();\n  };\n\n  ShapeBase.prototype.isStroke = function () {\n    return !!this.attrs['stroke'];\n  }; // 同 shape 中的方法重复了\n\n\n  ShapeBase.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save(); // 将 clip 的属性挂载到 context 上\n\n      applyAttrsToContext(context, clip); // 绘制 clip 路径\n\n      clip.createPath(context);\n      context.restore(); // 裁剪\n\n      context.clip();\n\n      clip._afterDraw();\n    }\n  }; // 绘制图形时需要考虑 region 限制\n\n\n  ShapeBase.prototype.draw = function (context, region) {\n    var clip = this.cfg.clipShape; // 如果指定了 region，同时不允许刷新时，直接返回\n\n    if (region) {\n      if (this.cfg.refresh === false) {\n        // this._afterDraw();\n        this.set('hasChanged', false);\n        return;\n      } // 是否相交需要考虑 clip 的包围盒\n\n\n      var bbox = this.getCanvasBBox();\n\n      if (!intersectRect(region, bbox)) {\n        // 图形的包围盒与重绘区域不相交时，也需要清除标记\n        this.set('hasChanged', false); // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n        // 1. 之前图形在视窗内，但是现在不再视窗内\n        // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n\n        if (this.cfg.isInView) {\n          this._afterDraw();\n        }\n\n        return;\n      }\n    }\n\n    context.save(); // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n\n    applyAttrsToContext(context, this);\n\n    this._applyClip(context, clip);\n\n    this.drawPath(context);\n    context.restore();\n\n    this._afterDraw();\n  };\n\n  ShapeBase.prototype.getCanvasViewBox = function () {\n    var canvas = this.cfg.canvas;\n\n    if (canvas) {\n      // @ts-ignore\n      return canvas.getViewRange();\n    }\n\n    return null;\n  };\n\n  ShapeBase.prototype.cacheCanvasBBox = function () {\n    var canvasBBox = this.getCanvasViewBox(); // 绘制的时候缓存包围盒\n\n    if (canvasBBox) {\n      var bbox = this.getCanvasBBox();\n      var isInView = intersectRect(bbox, canvasBBox);\n      this.set('isInView', isInView); // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n      // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n      // 父元素 cacheCanvasBBox 计算的时候也不计算\n\n      if (isInView) {\n        this.set('cacheCanvasBBox', bbox);\n      } else {\n        this.set('cacheCanvasBBox', null);\n      }\n    }\n  };\n\n  ShapeBase.prototype._afterDraw = function () {\n    this.cacheCanvasBBox(); // 绘制后消除标记\n\n    this.set('hasChanged', false);\n    this.set('refresh', null);\n  };\n\n  ShapeBase.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('isInView', null);\n    this.set('hasChanged', false);\n  };\n  /**\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.drawPath = function (context) {\n    this.createPath(context);\n    this.strokeAndFill(context);\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 填充图形\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n\n\n  ShapeBase.prototype.fill = function (context) {\n    context.fill();\n  };\n  /**\n   * @protected\n   * 绘制图形边框\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n\n\n  ShapeBase.prototype.stroke = function (context) {\n    context.stroke();\n  }; // 绘制或者填充\n\n\n  ShapeBase.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n        lineWidth = _a.lineWidth,\n        opacity = _a.opacity,\n        strokeOpacity = _a.strokeOpacity,\n        fillOpacity = _a.fillOpacity;\n\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n\n        this.stroke(context);\n      }\n    }\n\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.createPath = function (context) {};\n  /**\n   * 绘制完成 path 后的操作\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.afterDrawPath = function (context) {};\n\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    // return HitUtil.isHitShape(this, refX, refY);\n    var isStroke = this.isStroke();\n    var isFill = this.isFill();\n    var lineWidth = this.getHitLineWidth();\n    return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n  }; // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n\n\n  ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n\n\n  ShapeBase.prototype.getHitLineWidth = function () {\n    if (!this.isStroke()) {\n      return 0;\n    }\n\n    var attrs = this.attrs;\n    return attrs['lineWidth'] + attrs['lineAppendWidth'];\n  };\n\n  return ShapeBase;\n}(AbstractShape);\n\nexport default ShapeBase;","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,cAA9B;AAEA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,cAArC;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,cAApD;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA;AAAA;AAAA;EAAwBC;;EAAxB;;EA8OC;;EA7OCC;IACE,IAAMC,KAAK,GAAGC,iBAAMC,eAAN,CAAqBC,IAArB,CAAqB,IAArB,CAAd,CADF,CAEE;;;IACA,6BACKH,KADL,GACU;MACRI,SAAS,EAAE,CADH;MAERC,eAAe,EAAE,CAFT;MAGRC,aAAa,EAAE,CAHP;MAIRC,WAAW,EAAE;IAJL,CADV;EAOD,CAVD;;EAYAR;IACE,OAAOH,KAAP;EACD,CAFD;;EAIAG;IACE,OAAOF,KAAP;EACD,CAFD;EAIA;;;;;;EAIAE,+CAAeS,UAAf,EAAqC;IACnCd,cAAc,CAAC,IAAD,EAAOc,UAAP,CAAd;EACD,CAFD;;EAIAT;IACE,IAAMU,IAAI,GAAG,KAAKC,GAAL,CAAS,MAAT,CAAb;IACA,IAAMN,SAAS,GAAG,KAAKO,eAAL,EAAlB,CAFF,CAGE;;IACA,IAAMC,UAAU,GAAGjB,aAAa,CAACc,IAAD,CAAhC;IACA,IAAMI,GAAG,GAAGD,UAAU,CAAC,IAAD,CAAtB;IACA,IAAME,aAAa,GAAGV,SAAS,GAAG,CAAlC;IACA,IAAMW,IAAI,GAAGF,GAAG,CAACG,CAAJ,GAAQF,aAArB;IACA,IAAMG,IAAI,GAAGJ,GAAG,CAACK,CAAJ,GAAQJ,aAArB;IACA,IAAMK,IAAI,GAAGN,GAAG,CAACG,CAAJ,GAAQH,GAAG,CAACO,KAAZ,GAAoBN,aAAjC;IACA,IAAMO,IAAI,GAAGR,GAAG,CAACK,CAAJ,GAAQL,GAAG,CAACS,MAAZ,GAAqBR,aAAlC;IACA,OAAO;MACLE,CAAC,EAAED,IADE;MAELA,IAAI,MAFC;MAGLG,CAAC,EAAED,IAHE;MAILA,IAAI,MAJC;MAKLG,KAAK,EAAEP,GAAG,CAACO,KAAJ,GAAYhB,SALd;MAMLkB,MAAM,EAAET,GAAG,CAACS,MAAJ,GAAalB,SANhB;MAOLe,IAAI,MAPC;MAQLE,IAAI;IARC,CAAP;EAUD,CArBD;;EAuBAtB;IACE,OAAO,CAAC,CAAC,KAAKC,KAAL,CAAW,MAAX,CAAF,IAAwB,KAAKuB,WAAL,EAA/B;EACD,CAFD;;EAIAxB;IACE,OAAO,CAAC,CAAC,KAAKC,KAAL,CAAW,QAAX,CAAT;EACD,CAFD,CAxDF,CA4DE;;;EACAD,2CAAWyB,OAAX,EAAoBC,IAApB,EAAmC;IACjC,IAAIA,IAAJ,EAAU;MACRD,OAAO,CAACE,IAAR,GADQ,CAER;;MACAjC,mBAAmB,CAAC+B,OAAD,EAAUC,IAAV,CAAnB,CAHQ,CAIR;;MACAA,IAAI,CAACE,UAAL,CAAgBH,OAAhB;MACAA,OAAO,CAACI,OAAR,GANQ,CAOR;;MACAJ,OAAO,CAACC,IAAR;;MACAA,IAAI,CAACI,UAAL;IACD;EACF,CAZD,CA7DF,CA2EE;;;EACA9B,qCAAKyB,OAAL,EAAwCM,MAAxC,EAAuD;IACrD,IAAML,IAAI,GAAG,KAAKM,GAAL,CAASC,SAAtB,CADqD,CAErD;;IACA,IAAIF,MAAJ,EAAY;MACV,IAAI,KAAKC,GAAL,CAASE,OAAT,KAAqB,KAAzB,EAAgC;QAC9B;QACA,KAAKC,GAAL,CAAS,YAAT,EAAuB,KAAvB;QACA;MACD,CALS,CAMV;;;MACA,IAAMC,IAAI,GAAG,KAAKC,aAAL,EAAb;;MACA,IAAI,CAAC5C,aAAa,CAACsC,MAAD,EAASK,IAAT,CAAlB,EAAkC;QAChC;QACA,KAAKD,GAAL,CAAS,YAAT,EAAuB,KAAvB,EAFgC,CAGhC;QACA;QACA;;QACA,IAAI,KAAKH,GAAL,CAASM,QAAb,EAAuB;UACrB,KAAKR,UAAL;QACD;;QACD;MACD;IACF;;IACDL,OAAO,CAACE,IAAR,GAvBqD,CAwBrD;;IACAjC,mBAAmB,CAAC+B,OAAD,EAAU,IAAV,CAAnB;;IACA,KAAKc,UAAL,CAAgBd,OAAhB,EAAyBC,IAAzB;;IACA,KAAKc,QAAL,CAAcf,OAAd;IACAA,OAAO,CAACI,OAAR;;IACA,KAAKC,UAAL;EACD,CA9BD;;EAgCQ9B,uCAAR;IACE,IAAMyC,MAAM,GAAG,KAAKT,GAAL,CAASS,MAAxB;;IACA,IAAIA,MAAJ,EAAY;MACV;MACA,OAAOA,MAAM,CAACC,YAAP,EAAP;IACD;;IACD,OAAO,IAAP;EACD,CAPO;;EASR1C;IACE,IAAM2C,UAAU,GAAG,KAAKC,gBAAL,EAAnB,CADF,CAEE;;IACA,IAAID,UAAJ,EAAgB;MACd,IAAMP,IAAI,GAAG,KAAKC,aAAL,EAAb;MACA,IAAMC,QAAQ,GAAG7C,aAAa,CAAC2C,IAAD,EAAOO,UAAP,CAA9B;MACA,KAAKR,GAAL,CAAS,UAAT,EAAqBG,QAArB,EAHc,CAId;MACA;MACA;;MACA,IAAIA,QAAJ,EAAc;QACZ,KAAKH,GAAL,CAAS,iBAAT,EAA4BC,IAA5B;MACD,CAFD,MAEO;QACL,KAAKD,GAAL,CAAS,iBAAT,EAA4B,IAA5B;MACD;IACF;EACF,CAhBD;;EAkBAnC;IACE,KAAK6C,eAAL,GADF,CAEE;;IACA,KAAKV,GAAL,CAAS,YAAT,EAAuB,KAAvB;IACA,KAAKA,GAAL,CAAS,SAAT,EAAoB,IAApB;EACD,CALD;;EAOAnC;IACE,KAAKmC,GAAL,CAAS,iBAAT,EAA4B,IAA5B;IACA,KAAKA,GAAL,CAAS,UAAT,EAAqB,IAArB;IACA,KAAKA,GAAL,CAAS,YAAT,EAAuB,KAAvB;EACD,CAJD;EAMA;;;;;;EAIAnC,yCAASyB,OAAT,EAA0C;IACxC,KAAKG,UAAL,CAAgBH,OAAhB;IACA,KAAKqB,aAAL,CAAmBrB,OAAnB;IACA,KAAKsB,aAAL,CAAmBtB,OAAnB;EACD,CAJD;EAMA;;;;;;;EAKAzB,qCAAKyB,OAAL,EAAsC;IACpCA,OAAO,CAACuB,IAAR;EACD,CAFD;EAIA;;;;;;;EAKAhD,uCAAOyB,OAAP,EAAwC;IACtCA,OAAO,CAACwB,MAAR;EACD,CAFD,CA5KF,CAgLE;;;EACAjD,8CAAcyB,OAAd,EAAqB;IACb,SAAqD,KAAKxB,KAA1D;IAAA,IAAEI,SAAS,eAAX;IAAA,IAAa6C,OAAO,aAApB;IAAA,IAAsB3C,aAAa,mBAAnC;IAAA,IAAqCC,WAAW,iBAAhD;;IAEN,IAAI,KAAK2C,MAAL,EAAJ,EAAmB;MACjB,IAAI,CAAC3D,KAAK,CAACgB,WAAD,CAAN,IAAuBA,WAAW,KAAK,CAA3C,EAA8C;QAC5CiB,OAAO,CAAC2B,WAAR,GAAsB5C,WAAtB;QACA,KAAKwC,IAAL,CAAUvB,OAAV;QACAA,OAAO,CAAC2B,WAAR,GAAsBF,OAAtB;MACD,CAJD,MAIO;QACL,KAAKF,IAAL,CAAUvB,OAAV;MACD;IACF;;IAED,IAAI,KAAK4B,QAAL,EAAJ,EAAqB;MACnB,IAAIhD,SAAS,GAAG,CAAhB,EAAmB;QACjB,IAAI,CAACb,KAAK,CAACe,aAAD,CAAN,IAAyBA,aAAa,KAAK,CAA/C,EAAkD;UAChDkB,OAAO,CAAC2B,WAAR,GAAsB7C,aAAtB;QACD;;QACD,KAAK0C,MAAL,CAAYxB,OAAZ;MACD;IACF;;IACD,KAAKsB,aAAL,CAAmBtB,OAAnB;EACD,CAtBD;EAwBA;;;;;;;EAKAzB,2CAAWyB,OAAX,EAA4C,CAAI,CAAhD;EAEA;;;;;;EAIAzB,8CAAcyB,OAAd,EAA+C,CAAI,CAAnD;;EAEAzB,0CAAUsD,IAAV,EAAwBC,IAAxB,EAAoC;IAClC;IACA,IAAMF,QAAQ,GAAG,KAAKA,QAAL,EAAjB;IACA,IAAMF,MAAM,GAAG,KAAKA,MAAL,EAAf;IACA,IAAM9C,SAAS,GAAG,KAAKO,eAAL,EAAlB;IACA,OAAO,KAAK4C,gBAAL,CAAsBF,IAAtB,EAA4BC,IAA5B,EAAkCF,QAAlC,EAA4CF,MAA5C,EAAoD9C,SAApD,CAAP;EACD,CAND,CAtNF,CA8NE;;;EACAL,iDAAiBiB,CAAjB,EAAoBE,CAApB,EAAuBkC,QAAvB,EAAiCF,MAAjC,EAAyC9C,SAAzC,EAAkD;IAChD,OAAO,KAAP;EACD,CAFD;EAIA;;;;;;EAIAL;IACE,IAAI,CAAC,KAAKqD,QAAL,EAAL,EAAsB;MACpB,OAAO,CAAP;IACD;;IACD,IAAMpD,KAAK,GAAG,KAAKA,KAAnB;IACA,OAAOA,KAAK,CAAC,WAAD,CAAL,GAAqBA,KAAK,CAAC,iBAAD,CAAjC;EACD,CAND;;EAOF;AAAC,CA9OD,CAAwBV,aAAxB;;AAgPA,eAAeS,SAAf","names":["AbstractShape","isNil","intersectRect","applyAttrsToContext","refreshElement","getBBoxMethod","Shape","Group","__extends","ShapeBase","attrs","_super","getDefaultAttrs","call","lineWidth","lineAppendWidth","strokeOpacity","fillOpacity","changeType","type","get","getHitLineWidth","bboxMethod","box","halfLineWidth","minX","x","minY","y","maxX","width","maxY","height","isClipShape","context","clip","save","createPath","restore","_afterDraw","region","cfg","clipShape","refresh","set","bbox","getCanvasBBox","isInView","_applyClip","drawPath","canvas","getViewRange","canvasBBox","getCanvasViewBox","cacheCanvasBBox","strokeAndFill","afterDrawPath","fill","stroke","opacity","isFill","globalAlpha","isStroke","refX","refY","isInStrokeOrPath"],"sourceRoot":"","sources":["../../src/shape/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}