{"ast":null,"code":"/**\n * @fileoverview 椭圆的一些计算，\n *  - 周长计算参考：https://www.mathsisfun.com/geometry/ellipse-perimeter.html\n *  - 距离计算参考：https://wet-robots.ghost.io/simple-method-for-distance-to-ellipse/\n * @author dxq613@gmail.com\n */\nimport { distance, piMod } from './util';\n\nfunction copysign(v1, v2) {\n  var absv = Math.abs(v1);\n  return v2 > 0 ? absv : absv * -1;\n}\n\nexport default {\n  /**\n   * 包围盒计算\n   * @param {number} x  椭圆中心 x\n   * @param {number} y  椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @return {object} 包围盒\n   */\n  box: function (x, y, rx, ry) {\n    return {\n      x: x - rx,\n      y: y - ry,\n      width: rx * 2,\n      height: ry * 2\n    };\n  },\n\n  /**\n   * 计算周长，使用近似法\n   * @param {number} x  椭圆中心 x\n   * @param {number} y  椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @return {number} 椭圆周长\n   */\n  length: function (x, y, rx, ry) {\n    return Math.PI * (3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (rx + 3 * ry)));\n  },\n\n  /**\n   * 距离椭圆最近的点\n   * @param {number} x  椭圆中心 x\n   * @param {number} y  椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @param {number} x0  指定的点 x\n   * @param {number} y0  指定的点 y\n   * @return {object} 椭圆上距离指定点最近的点\n   */\n  nearestPoint: function (x, y, rx, ry, x0, y0) {\n    var a = rx;\n    var b = ry; // 假如椭圆半径为0则返回圆心\n\n    if (a === 0 || b === 0) {\n      return {\n        x: x,\n        y: y\n      };\n    } // 转换成 0， 0 为中心的椭圆计算\n\n\n    var relativeX = x0 - x;\n    var relativeY = y0 - y;\n    var px = Math.abs(relativeX);\n    var py = Math.abs(relativeY);\n    var squareA = a * a;\n    var squareB = b * b; // const angle0 = Math.atan2(relativeY, relativeX);\n\n    var t = Math.PI / 4;\n    var nearestX; // 椭圆上的任一点\n\n    var nearestY; // 迭代 4 次\n\n    for (var i = 0; i < 4; i++) {\n      nearestX = a * Math.cos(t);\n      nearestY = b * Math.sin(t);\n      var ex = (squareA - squareB) * Math.pow(Math.cos(t), 3) / a;\n      var ey = (squareB - squareA) * Math.pow(Math.sin(t), 3) / b;\n      var rx1 = nearestX - ex;\n      var ry1 = nearestY - ey;\n      var qx = px - ex;\n      var qy = py - ey;\n      var r = Math.hypot(ry1, rx1);\n      var q = Math.hypot(qy, qx);\n      var delta_c = r * Math.asin((rx1 * qy - ry1 * qx) / (r * q));\n      var delta_t = delta_c / Math.sqrt(squareA + squareB - nearestX * nearestX - nearestY * nearestY);\n      t += delta_t;\n      t = Math.min(Math.PI / 2, Math.max(0, t));\n    }\n\n    return {\n      x: x + copysign(nearestX, relativeX),\n      y: y + copysign(nearestY, relativeY)\n    };\n  },\n\n  /**\n   * 点到椭圆最近的距离\n   * @param {number} x  椭圆中心 x\n   * @param {number} y  椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @param {number} x0  指定的点 x\n   * @param {number} y0  指定的点 y\n   * @return {number} 点到椭圆的距离\n   */\n  pointDistance: function (x, y, rx, ry, x0, y0) {\n    var nearestPoint = this.nearestPoint(x, y, rx, ry, x0, y0);\n    return distance(nearestPoint.x, nearestPoint.y, x0, y0);\n  },\n\n  /**\n   * 根据比例获取点\n   * @param {number} x 椭圆中心 x\n   * @param {number} y 椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @param {number} t 指定比例，x轴方向为 0\n   * @return {object} 点\n   */\n  pointAt: function (x, y, rx, ry, t) {\n    var angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算\n\n    return {\n      x: x + rx * Math.cos(angle),\n      y: y + ry * Math.sin(angle)\n    };\n  },\n\n  /**\n   * 根据比例计算切线角度\n   * @param {number} x 椭圆中心 x\n   * @param {number} y 椭圆中心 y\n   * @param {number} rx 椭圆 x 方向半径\n   * @param {number} ry 椭圆 y 方向半径\n   * @param {number} t 指定比例 0 - 1 之间，x轴方向为 0。在 0-1 范围之外是循环还是返回 null，还需要调整\n   * @return {number} 角度，在 0 - 2PI 之间\n   */\n  tangentAngle: function (x, y, rx, ry, t) {\n    var angle = 2 * Math.PI * t; // 按照角度进行计算，而不按照周长计算\n    // 直接使用 x,y 的导数计算， x' = -rx * sin(t); y' = ry * cos(t);\n\n    var tangentAngle = Math.atan2(ry * Math.cos(angle), -rx * Math.sin(angle)); // 也可以使用指定点的切线方程计算，成本有些高\n    // const point = this.pointAt(0, 0, rx, ry, t); // 椭圆的切线同椭圆的中心不相关\n    // let tangentAngle = -1 * Math.atan((ry * ry * point.x) / (rx * rx * point.y));\n    // if (angle >= 0 && angle <= Math.PI) {\n    //   tangentAngle += Math.PI;\n    // }\n\n    return piMod(tangentAngle);\n  }\n};","map":{"version":3,"mappings":"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","names":["distance","piMod","copysign","v1","v2","absv","Math","abs","box","x","y","rx","ry","width","height","length","PI","sqrt","nearestPoint","x0","y0","a","b","relativeX","relativeY","px","py","squareA","squareB","t","nearestX","nearestY","i","cos","sin","ex","ey","rx1","ry1","qx","qy","r","hypot","q","delta_c","asin","delta_t","min","max","pointDistance","pointAt","angle","tangentAngle","atan2"],"sourceRoot":"","sources":["../src/ellipse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}