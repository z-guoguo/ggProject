{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom, FunctionExt } from '../util';\nimport { Rectangle } from '../geometry';\nimport { Cell } from '../model';\nimport { View, CellView } from '../view';\nimport { Base } from './base';\nexport class Renderer extends Base {\n  init() {\n    this.resetUpdates();\n    this.startListening(); // Renders existing cells in the model.\n\n    this.resetViews(this.model.getCells()); // Starts rendering loop.\n\n    if (!this.isFrozen() && this.isAsync()) {\n      this.updateViewsAsync();\n    }\n  }\n\n  startListening() {\n    this.model.on('sorted', this.onSortModel, this);\n    this.model.on('reseted', this.onModelReseted, this);\n    this.model.on('batch:stop', this.onBatchStop, this);\n    this.model.on('cell:added', this.onCellAdded, this);\n    this.model.on('cell:removed', this.onCellRemoved, this);\n    this.model.on('cell:change:zIndex', this.onCellZIndexChanged, this);\n    this.model.on('cell:change:visible', this.onCellVisibleChanged, this);\n  }\n\n  stopListening() {\n    this.model.off('sorted', this.onSortModel, this);\n    this.model.off('reseted', this.onModelReseted, this);\n    this.model.off('batch:stop', this.onBatchStop, this);\n    this.model.off('cell:added', this.onCellAdded, this);\n    this.model.off('cell:removed', this.onCellRemoved, this);\n    this.model.off('cell:change:zIndex', this.onCellZIndexChanged, this);\n    this.model.off('cell:change:visible', this.onCellVisibleChanged, this);\n  }\n\n  resetUpdates() {\n    this.updates = {\n      priorities: [{}, {}, {}],\n      mounted: {},\n      mountedCids: [],\n      unmounted: {},\n      unmountedCids: [],\n      count: 0,\n      sort: false,\n      frozen: false,\n      freezeKey: null,\n      animationId: null\n    };\n  }\n\n  onSortModel() {\n    if (this.model.hasActiveBatch(Renderer.SORT_DELAYING_BATCHES)) {\n      return;\n    }\n\n    this.sortViews();\n  }\n\n  onModelReseted({\n    options\n  }) {\n    this.removeZPivots();\n    this.resetViews(this.model.getCells(), options);\n  }\n\n  onBatchStop({\n    name,\n    data\n  }) {\n    if (this.isFrozen()) {\n      return;\n    }\n\n    const model = this.model;\n\n    if (!this.isAsync()) {\n      const updateDelayingBatches = Renderer.UPDATE_DELAYING_BATCHES;\n\n      if (updateDelayingBatches.includes(name) && !model.hasActiveBatch(updateDelayingBatches)) {\n        this.updateViews(data);\n      }\n    }\n\n    const sortDelayingBatches = Renderer.SORT_DELAYING_BATCHES;\n\n    if (sortDelayingBatches.includes(name) && !model.hasActiveBatch(sortDelayingBatches)) {\n      this.sortViews();\n    }\n  }\n\n  onCellAdded({\n    cell,\n    options\n  }) {\n    const position = options.position;\n\n    if (this.isAsync() || typeof position !== 'number') {\n      this.renderView(cell, options);\n    } else {\n      if (options.maxPosition === position) {\n        this.freeze({\n          key: 'addCells'\n        });\n      }\n\n      this.renderView(cell, options);\n\n      if (position === 0) {\n        this.unfreeze({\n          key: 'addCells'\n        });\n      }\n    }\n  }\n\n  onCellRemoved({\n    cell,\n    options\n  }) {\n    const view = this.findViewByCell(cell);\n\n    if (view) {\n      this.requestViewUpdate(view, Renderer.FLAG_REMOVE, view.priority, options);\n    }\n  }\n\n  onCellZIndexChanged({\n    cell,\n    options\n  }) {\n    if (this.options.sorting === 'approx') {\n      const view = this.findViewByCell(cell);\n\n      if (view) {\n        this.requestViewUpdate(view, Renderer.FLAG_INSERT, view.priority, options);\n      }\n    }\n  }\n\n  onCellVisibleChanged({\n    cell,\n    current: visible,\n    options\n  }) {\n    // Hide connected edges before cell\n    if (!visible) {\n      this.processEdgeOnTerminalVisibleChanged(cell, false);\n    }\n\n    const view = this.findViewByCell(cell);\n\n    if (!visible && view) {\n      this.removeView(cell);\n    } else if (visible && view == null) {\n      this.renderView(cell, options);\n    } // Show connected edges after cell rendered\n\n\n    if (visible) {\n      this.processEdgeOnTerminalVisibleChanged(cell, true);\n    } // this.sortViews()\n\n  }\n\n  processEdgeOnTerminalVisibleChanged(node, visible) {\n    const getOpposite = (edge, currentTerminal) => {\n      const sourceId = edge.getSourceCellId();\n\n      if (sourceId !== currentTerminal.id) {\n        return edge.getSourceCell();\n      }\n\n      const targetId = edge.getTargetCellId();\n\n      if (targetId !== currentTerminal.id) {\n        return edge.getTargetCell();\n      }\n\n      return null;\n    };\n\n    this.model.getConnectedEdges(node).forEach(edge => {\n      const opposite = getOpposite(edge, node);\n\n      if (opposite == null || opposite.isVisible()) {\n        visible ? edge.show() : edge.hide();\n      }\n    });\n  }\n\n  isEdgeTerminalVisible(edge, terminal) {\n    const cellId = terminal === 'source' ? edge.getSourceCellId() : edge.getTargetCellId();\n    const cell = cellId ? this.model.getCell(cellId) : null;\n\n    if (cell && !cell.isVisible()) {\n      return false;\n    }\n\n    return true;\n  }\n\n  requestConnectedEdgesUpdate(view, options = {}) {\n    if (CellView.isCellView(view)) {\n      const cell = view.cell;\n      const edges = this.model.getConnectedEdges(cell);\n\n      for (let j = 0, n = edges.length; j < n; j += 1) {\n        const edge = edges[j];\n        const edgeView = this.findViewByCell(edge);\n\n        if (!edgeView) {\n          continue;\n        }\n\n        const flagLabels = ['update'];\n\n        if (edge.getTargetCell() === cell) {\n          flagLabels.push('target');\n        }\n\n        if (edge.getSourceCell() === cell) {\n          flagLabels.push('source');\n        }\n\n        this.scheduleViewUpdate(edgeView, edgeView.getFlag(flagLabels), edgeView.priority, options);\n      }\n    }\n  }\n\n  forcePostponedViewUpdate(view, flag) {\n    if (!view || !CellView.isCellView(view)) {\n      return false;\n    }\n\n    const cell = view.cell;\n\n    if (cell.isNode()) {\n      return false;\n    }\n\n    const edgeView = view;\n\n    if (cell.isEdge() && (flag & view.getFlag(['source', 'target'])) === 0) {\n      // EdgeView is waiting for the source/target cellView to be rendered.\n      // This can happen when the cells are not in the viewport.\n      let sourceFlag = 0;\n      const sourceView = this.findViewByCell(cell.getSourceCell());\n\n      if (sourceView && !this.isViewMounted(sourceView)) {\n        sourceFlag = this.dumpView(sourceView);\n        edgeView.updateTerminalMagnet('source');\n      }\n\n      let targetFlag = 0;\n      const targetView = this.findViewByCell(cell.getTargetCell());\n\n      if (targetView && !this.isViewMounted(targetView)) {\n        targetFlag = this.dumpView(targetView);\n        edgeView.updateTerminalMagnet('target');\n      }\n\n      if (sourceFlag === 0 && targetFlag === 0) {\n        // If leftover flag is 0, all view updates were done.\n        return !this.dumpView(edgeView);\n      }\n    }\n\n    return false;\n  }\n\n  scheduleViewUpdate(view, flag, priority, options = {}) {\n    const cid = view.cid;\n    const updates = this.updates;\n    let cache = updates.priorities[priority];\n\n    if (!cache) {\n      cache = updates.priorities[priority] = {};\n    }\n\n    const currentFlag = cache[cid] || 0;\n\n    if ((currentFlag & flag) === flag) {\n      return;\n    }\n\n    if (!currentFlag) {\n      updates.count += 1;\n    }\n\n    if (flag & Renderer.FLAG_REMOVE && currentFlag & Renderer.FLAG_INSERT) {\n      // When a view is removed we need to remove the\n      // insert flag as this is a reinsert.\n      cache[cid] ^= Renderer.FLAG_INSERT;\n    } else if (flag & Renderer.FLAG_INSERT && currentFlag & Renderer.FLAG_REMOVE) {\n      // When a view is added we need to remove the remove\n      // flag as this is view was previously removed.\n      cache[cid] ^= Renderer.FLAG_REMOVE;\n    }\n\n    cache[cid] |= flag;\n    this.graph.hook.onViewUpdated(view, flag, options);\n  }\n\n  requestViewUpdate(view, flag, priority, options = {}) {\n    this.scheduleViewUpdate(view, flag, priority, options);\n    const isAsync = this.isAsync();\n\n    if (this.isFrozen() || isAsync && options.async !== false || this.model.hasActiveBatch(Renderer.UPDATE_DELAYING_BATCHES)) {\n      return;\n    }\n\n    const stats = this.updateViews(options);\n\n    if (isAsync) {\n      this.graph.trigger('render:done', {\n        stats,\n        options\n      });\n    }\n  }\n  /**\n   * Adds view into the DOM and update it.\n   */\n\n\n  dumpView(view, options = {}) {\n    if (view == null) {\n      return 0;\n    }\n\n    const cid = view.cid;\n    const updates = this.updates;\n    const cache = updates.priorities[view.priority];\n    const flag = this.registerMountedView(view) | cache[cid];\n    delete cache[cid];\n\n    if (!flag) {\n      return 0;\n    }\n\n    return this.updateView(view, flag, options);\n  }\n  /**\n   * Adds all views into the DOM and update them.\n   */\n\n\n  dumpViews(options = {}) {\n    this.checkView(options);\n    this.updateViews(options);\n  }\n  /**\n   * Ensure the view associated with the cell is attached\n   * to the DOM and updated.\n   */\n\n\n  requireView(cell, options = {}) {\n    const view = this.findViewByCell(cell);\n\n    if (view == null) {\n      return null;\n    }\n\n    this.dumpView(view, options);\n    return view;\n  }\n\n  updateView(view, flag, options = {}) {\n    if (view == null) {\n      return 0;\n    }\n\n    if (CellView.isCellView(view)) {\n      if (flag & Renderer.FLAG_REMOVE) {\n        this.removeView(view.cell);\n        return 0;\n      }\n\n      if (flag & Renderer.FLAG_INSERT) {\n        this.insertView(view);\n        flag ^= Renderer.FLAG_INSERT; // eslint-disable-line\n      }\n    }\n\n    if (!flag) {\n      return 0;\n    }\n\n    return view.confirmUpdate(flag, options);\n  }\n\n  updateViews(options = {}) {\n    let result;\n    let batchCount = 0;\n    let updatedCount = 0;\n    let priority = Renderer.MIN_PRIORITY;\n\n    do {\n      result = this.updateViewsBatch(options);\n      batchCount += 1;\n      updatedCount += result.updatedCount;\n      priority = Math.min(result.priority, priority);\n    } while (!result.empty);\n\n    return {\n      priority,\n      batchCount,\n      updatedCount\n    };\n  }\n\n  updateViewsBatch(options = {}) {\n    const updates = this.updates;\n    const priorities = updates.priorities;\n    const batchSize = options.batchSize || Renderer.UPDATE_BATCH_SIZE;\n    let empty = true;\n    let priority = Renderer.MIN_PRIORITY;\n    let mountedCount = 0;\n    let unmountedCount = 0;\n    let updatedCount = 0;\n    let postponedCount = 0;\n    let checkView = options.checkView || this.options.checkView;\n\n    if (typeof checkView !== 'function') {\n      checkView = null;\n    } // eslint-disable-next-line\n\n\n    main: for (let p = 0, n = priorities.length; p < n; p += 1) {\n      const cache = priorities[p]; // eslint-disable-next-line\n\n      for (const cid in cache) {\n        if (updatedCount >= batchSize) {\n          empty = false; // goto next batch\n\n          break main; // eslint-disable-line no-labels\n        }\n\n        const view = View.views[cid];\n\n        if (!view) {\n          delete cache[cid];\n          continue;\n        }\n\n        let currentFlag = cache[cid]; // Do not check a view for viewport if we are about to remove the view.\n\n        if ((currentFlag & Renderer.FLAG_REMOVE) === 0) {\n          const isUnmounted = (cid in updates.unmounted);\n\n          if (checkView && !FunctionExt.call(checkView, this.graph, {\n            view: view,\n            unmounted: isUnmounted\n          })) {\n            // Unmount view\n            if (!isUnmounted) {\n              this.registerUnmountedView(view);\n              view.unmount();\n            }\n\n            updates.unmounted[cid] |= currentFlag;\n            delete cache[cid];\n            unmountedCount += 1;\n            continue;\n          } // Mount view\n\n\n          if (isUnmounted) {\n            currentFlag |= Renderer.FLAG_INSERT;\n            mountedCount += 1;\n          }\n\n          currentFlag |= this.registerMountedView(view);\n        }\n\n        const cellView = view;\n        let leftoverFlag = this.updateView(view, currentFlag, options);\n\n        if (leftoverFlag > 0) {\n          const cell = cellView.cell;\n\n          if (cell && cell.isEdge()) {\n            // remove edge view when source cell is invisible\n            if (cellView.hasAction(leftoverFlag, 'source') && !this.isEdgeTerminalVisible(cell, 'source')) {\n              leftoverFlag = cellView.removeAction(leftoverFlag, 'source');\n              leftoverFlag |= Renderer.FLAG_REMOVE;\n            } // remove edge view when target cell is invisible\n\n\n            if (cellView.hasAction(leftoverFlag, 'target') && !this.isEdgeTerminalVisible(cell, 'target')) {\n              leftoverFlag = cellView.removeAction(leftoverFlag, 'target');\n              leftoverFlag |= Renderer.FLAG_REMOVE;\n            }\n          }\n        }\n\n        if (leftoverFlag > 0) {\n          // update has not finished\n          cache[cid] = leftoverFlag;\n\n          if (!this.graph.hook.onViewPostponed(cellView, leftoverFlag, options) || cache[cid]) {\n            postponedCount += 1;\n            empty = false;\n            continue;\n          }\n        }\n\n        if (priority > p) {\n          priority = p;\n        }\n\n        updatedCount += 1;\n        delete cache[cid];\n      }\n    }\n\n    return {\n      empty,\n      priority,\n      mountedCount,\n      unmountedCount,\n      updatedCount,\n      postponedCount\n    };\n  }\n\n  updateViewsAsync(options = {}, data = {\n    processed: 0,\n    priority: Renderer.MIN_PRIORITY\n  }) {\n    const updates = this.updates;\n    const animationId = updates.animationId;\n\n    if (animationId) {\n      Dom.cancelAnimationFrame(animationId);\n\n      if (data.processed === 0) {\n        const beforeFn = options.before;\n\n        if (typeof beforeFn === 'function') {\n          FunctionExt.call(beforeFn, this.graph, this.graph);\n        }\n      }\n\n      const stats = this.updateViewsBatch(options);\n      const checkout = this.checkViewImpl({\n        checkView: options.checkView,\n        mountedBatchSize: Renderer.MOUNT_BATCH_SIZE - stats.mountedCount,\n        unmountedBatchSize: Renderer.MOUNT_BATCH_SIZE - stats.unmountedCount\n      });\n      let processed = data.processed;\n      const total = updates.count;\n      const mountedCount = checkout.mountedCount;\n      const unmountedCount = checkout.unmountedCount;\n\n      if (stats.updatedCount > 0) {\n        // Some updates have been just processed\n        processed += stats.updatedCount + stats.unmountedCount;\n        data.priority = Math.min(stats.priority, data.priority);\n\n        if (stats.empty && mountedCount === 0) {\n          stats.priority = data.priority;\n          stats.mountedCount += mountedCount;\n          stats.unmountedCount += unmountedCount;\n          this.graph.trigger('render:done', {\n            stats,\n            options\n          });\n          data.processed = 0;\n          updates.count = 0;\n        } else {\n          data.processed = processed;\n        }\n      } // Progress callback\n\n\n      const progressFn = options.progress;\n\n      if (total && typeof progressFn === 'function') {\n        FunctionExt.call(progressFn, this.graph, {\n          total,\n          done: stats.empty,\n          current: processed\n        });\n      } // The current frame could have been canceled in a callback\n\n\n      if (updates.animationId !== animationId) {\n        return;\n      }\n    }\n\n    updates.animationId = Dom.requestAnimationFrame(() => {\n      this.updateViewsAsync(options, data);\n    });\n  }\n\n  registerMountedView(view) {\n    const cid = view.cid;\n    const updates = this.updates;\n\n    if (cid in updates.mounted) {\n      return 0;\n    }\n\n    updates.mounted[cid] = true;\n    updates.mountedCids.push(cid);\n    const flag = updates.unmounted[cid] || 0;\n    delete updates.unmounted[cid];\n    return flag;\n  }\n\n  registerUnmountedView(view) {\n    const cid = view.cid;\n    const updates = this.updates;\n\n    if (cid in updates.unmounted) {\n      return 0;\n    }\n\n    updates.unmounted[cid] |= Renderer.FLAG_INSERT;\n    const flag = updates.unmounted[cid];\n    updates.unmountedCids.push(cid);\n    delete updates.mounted[cid];\n    return flag;\n  }\n\n  isViewMounted(view) {\n    if (view == null) {\n      return false;\n    }\n\n    const cid = view.cid;\n    return cid in this.updates.mounted;\n  }\n\n  getMountedViews() {\n    return Object.keys(this.updates.mounted).map(cid => CellView.views[cid]);\n  }\n\n  getUnmountedViews() {\n    return Object.keys(this.updates.unmounted).map(cid => CellView.views[cid]);\n  }\n\n  checkMountedViews(viewportFn, batchSize) {\n    let unmountCount = 0;\n\n    if (typeof viewportFn !== 'function') {\n      return unmountCount;\n    }\n\n    const updates = this.updates;\n    const mounted = updates.mounted;\n    const mountedCids = updates.mountedCids;\n    const size = batchSize == null ? mountedCids.length : Math.min(mountedCids.length, batchSize);\n\n    for (let i = 0; i < size; i += 1) {\n      const cid = mountedCids[i];\n\n      if (!(cid in mounted)) {\n        continue;\n      }\n\n      const view = CellView.views[cid];\n\n      if (view == null) {\n        continue;\n      }\n\n      const shouldMount = FunctionExt.call(viewportFn, this.graph, {\n        view: view,\n        unmounted: true\n      });\n\n      if (shouldMount) {\n        // Push at the end of all mounted ids\n        mountedCids.push(cid);\n        continue;\n      }\n\n      unmountCount += 1;\n      const flag = this.registerUnmountedView(view);\n\n      if (flag) {\n        view.unmount();\n      }\n    } // Get rid of views, that have been unmounted\n\n\n    mountedCids.splice(0, size);\n    return unmountCount;\n  }\n\n  checkUnmountedViews(checkView, batchSize) {\n    let mountCount = 0;\n\n    if (typeof checkView !== 'function') {\n      checkView = null; // eslint-disable-line\n    }\n\n    const updates = this.updates;\n    const unmounted = updates.unmounted;\n    const unmountedCids = updates.unmountedCids;\n    const size = batchSize == null ? unmountedCids.length : Math.min(unmountedCids.length, batchSize);\n\n    for (let i = 0; i < size; i += 1) {\n      const cid = unmountedCids[i];\n\n      if (!(cid in unmounted)) {\n        continue;\n      }\n\n      const view = CellView.views[cid];\n\n      if (view == null) {\n        continue;\n      }\n\n      if (checkView && !FunctionExt.call(checkView, this.graph, {\n        view,\n        unmounted: false\n      })) {\n        unmountedCids.push(cid);\n        continue;\n      }\n\n      mountCount += 1;\n      const flag = this.registerMountedView(view);\n\n      if (flag) {\n        this.scheduleViewUpdate(view, flag, view.priority, {\n          mounting: true\n        });\n      }\n    } // Get rid of views, that have been mounted\n\n\n    unmountedCids.splice(0, size);\n    return mountCount;\n  }\n\n  checkViewImpl(options = {\n    mountedBatchSize: Number.MAX_SAFE_INTEGER,\n    unmountedBatchSize: Number.MAX_SAFE_INTEGER\n  }) {\n    const checkView = options.checkView || this.options.checkView;\n    const unmountedCount = this.checkMountedViews(checkView, options.unmountedBatchSize);\n    const mountedCount = this.checkUnmountedViews(checkView, // Do not check views, that have been just unmounted\n    // and pushed at the end of the cids array\n    unmountedCount > 0 ? Math.min(this.updates.unmountedCids.length - unmountedCount, options.mountedBatchSize) : options.mountedBatchSize);\n    return {\n      mountedCount,\n      unmountedCount\n    };\n  }\n  /**\n   * Determine every view in the graph should be attached/detached.\n   */\n\n\n  checkView(options = {}) {\n    return this.checkViewImpl(options);\n  }\n\n  isFrozen() {\n    return !!this.options.frozen;\n  }\n  /**\n   * Freeze the graph then the graph does not automatically re-render upon\n   * changes in the graph. This is useful when adding large numbers of cells.\n   */\n\n\n  freeze(options = {}) {\n    const key = options.key;\n    const updates = this.updates;\n    const frozen = this.options.frozen;\n    const freezeKey = updates.freezeKey;\n\n    if (key && key !== freezeKey) {\n      if (frozen && freezeKey) {\n        // key passed, but the graph is already freezed with another key\n        return;\n      }\n\n      updates.frozen = frozen;\n      updates.freezeKey = key;\n    }\n\n    this.options.frozen = true;\n    const animationId = updates.animationId;\n    updates.animationId = null;\n\n    if (this.isAsync() && animationId != null) {\n      Dom.cancelAnimationFrame(animationId);\n    }\n\n    this.graph.trigger('freeze', {\n      key\n    });\n  }\n\n  unfreeze(options = {}) {\n    const key = options.key;\n    const updates = this.updates;\n    const freezeKey = updates.freezeKey; // key passed, but the graph is already freezed with another key\n\n    if (key && freezeKey && key !== freezeKey) {\n      return;\n    }\n\n    updates.freezeKey = null; // key passed, but the graph is already freezed\n\n    if (key && key === freezeKey && updates.frozen) {\n      return;\n    }\n\n    const callback = () => {\n      this.options.frozen = updates.frozen = false;\n\n      if (updates.sort) {\n        this.sortViews();\n        updates.sort = false;\n      }\n\n      const afterFn = options.after;\n\n      if (afterFn) {\n        FunctionExt.call(afterFn, this.graph, this.graph);\n      }\n\n      this.graph.trigger('unfreeze', {\n        key\n      });\n    };\n\n    if (this.isAsync()) {\n      this.freeze();\n      const onProgress = options.progress;\n      this.updateViewsAsync(Object.assign(Object.assign({}, options), {\n        progress: ({\n          done,\n          current,\n          total\n        }) => {\n          if (onProgress) {\n            FunctionExt.call(onProgress, this.graph, {\n              done,\n              current,\n              total\n            });\n          } // sort views after async render\n\n\n          if (done) {\n            callback();\n          }\n        }\n      }));\n    } else {\n      this.updateViews(options);\n      callback();\n    }\n  }\n\n  isAsync() {\n    return !!this.options.async;\n  }\n\n  setAsync(async) {\n    this.options.async = async;\n  }\n\n  onRemove() {\n    this.freeze();\n    this.removeViews();\n  }\n\n  resetViews(cells = [], options = {}) {\n    this.resetUpdates();\n    this.removeViews();\n    this.freeze({\n      key: 'reset'\n    });\n\n    for (let i = 0, n = cells.length; i < n; i += 1) {\n      this.renderView(cells[i], options);\n    }\n\n    this.unfreeze({\n      key: 'reset'\n    });\n    this.sortViews();\n  }\n\n  removeView(cell) {\n    const view = this.views[cell.id];\n\n    if (view) {\n      const cid = view.cid;\n      const updates = this.updates;\n      const mounted = updates.mounted;\n      const unmounted = updates.unmounted;\n      view.remove();\n      delete this.views[cell.id];\n      delete mounted[cid];\n      delete unmounted[cid];\n    }\n\n    return view;\n  }\n\n  removeViews() {\n    if (this.views) {\n      Object.keys(this.views).forEach(id => {\n        const view = this.views[id];\n\n        if (view) {\n          this.removeView(view.cell);\n        }\n      });\n    }\n\n    this.views = {};\n  }\n\n  renderView(cell, options = {}) {\n    const id = cell.id;\n    const views = this.views;\n    let flag = 0;\n    let view = views[id];\n\n    if (!cell.isVisible()) {\n      return;\n    }\n\n    if (cell.isEdge()) {\n      if (!this.isEdgeTerminalVisible(cell, 'source') || !this.isEdgeTerminalVisible(cell, 'target')) {\n        return;\n      }\n    }\n\n    if (view) {\n      flag = Renderer.FLAG_INSERT;\n    } else {\n      const tmp = this.graph.hook.createCellView(cell);\n\n      if (tmp) {\n        view = views[cell.id] = tmp;\n        view.graph = this.graph;\n        flag = this.registerUnmountedView(view) | view.getBootstrapFlag();\n      }\n    }\n\n    if (view) {\n      this.requestViewUpdate(view, flag, view.priority, options);\n    }\n  }\n\n  isExactSorting() {\n    return this.options.sorting === 'exact';\n  }\n\n  sortViews() {\n    if (!this.isExactSorting()) {\n      return;\n    }\n\n    if (this.isFrozen()) {\n      // sort views once unfrozen\n      this.updates.sort = true;\n      return;\n    }\n\n    this.sortViewsExact();\n  }\n\n  sortElements(elems, comparator) {\n    // Highly inspired by the jquery.sortElements plugin by Padolsey.\n    // See http://james.padolsey.com/javascript/sorting-elements-with-jquery/.\n    const placements = elems.map(elem => {\n      const parentNode = elem.parentNode; // Since the element itself will change position, we have\n      // to have some way of storing it's original position in\n      // the DOM. The easiest way is to have a 'flag' node:\n\n      const nextSibling = parentNode.insertBefore(document.createTextNode(''), elem.nextSibling);\n      return targetNode => {\n        if (parentNode === targetNode) {\n          throw new Error(\"You can't sort elements if any one is a descendant of another.\");\n        } // Insert before flag\n\n\n        parentNode.insertBefore(targetNode, nextSibling); // Remove flag\n\n        parentNode.removeChild(nextSibling);\n      };\n    });\n    elems.sort(comparator).forEach((elem, index) => placements[index](elem));\n  }\n\n  sortViewsExact() {\n    // const elems = this.view.stage.querySelectorAll('[data-cell-id]')\n    // const length = elems.length\n    // const cells = []\n    // for (let i = 0; i < length; i++) {\n    //   const cell = this.model.getCell(elems[i].getAttribute('data-cell-id') || '')\n    //   cells.push({\n    //     id: cell.id,\n    //     zIndex: cell.getZIndex() || 0,\n    //     elem: elems[i],\n    //   })\n    // }\n    // const sortedCells = [...cells].sort((cell1, cell2) => cell1.zIndex - cell2.zIndex)\n    // const moves = ArrayExt.diff(cells, sortedCells, 'zIndex').moves\n    // if (moves && moves.length) {\n    //   moves.forEach((move) => {\n    //     if (move.type) {\n    //       const elem = move.item.elem as Element\n    //       const parentNode = elem.parentNode\n    //       const index = move.index\n    //       if (parentNode) {\n    //         if (index === length - 1) {\n    //           parentNode.appendChild(elem)\n    //         } else if (index < length - 1) {\n    //           parentNode.insertBefore(elem, elems[index + 1])\n    //         }\n    //       }\n    //     }\n    //   })\n    // }\n    // Run insertion sort algorithm in order to efficiently sort DOM\n    // elements according to their associated cell `zIndex` attribute.\n    const elems = this.view.$(this.view.stage).children('[data-cell-id]').toArray();\n    const model = this.model;\n    this.sortElements(elems, (a, b) => {\n      const cellA = model.getCell(a.getAttribute('data-cell-id') || '');\n      const cellB = model.getCell(b.getAttribute('data-cell-id') || '');\n      const z1 = cellA.getZIndex() || 0;\n      const z2 = cellB.getZIndex() || 0;\n      return z1 === z2 ? 0 : z1 < z2 ? -1 : 1;\n    });\n  }\n\n  addZPivot(zIndex = 0) {\n    if (this.zPivots == null) {\n      this.zPivots = {};\n    }\n\n    const pivots = this.zPivots;\n    let pivot = pivots[zIndex];\n\n    if (pivot) {\n      return pivot;\n    }\n\n    pivot = pivots[zIndex] = document.createComment(`z-index:${zIndex + 1}`);\n    let neighborZ = -Infinity; // eslint-disable-next-line\n\n    for (const key in pivots) {\n      const currentZ = +key;\n\n      if (currentZ < zIndex && currentZ > neighborZ) {\n        neighborZ = currentZ;\n\n        if (neighborZ === zIndex - 1) {\n          continue;\n        }\n      }\n    }\n\n    const layer = this.view.stage;\n\n    if (neighborZ !== -Infinity) {\n      const neighborPivot = pivots[neighborZ];\n      layer.insertBefore(pivot, neighborPivot.nextSibling);\n    } else {\n      layer.insertBefore(pivot, layer.firstChild);\n    }\n\n    return pivot;\n  }\n\n  removeZPivots() {\n    if (this.zPivots) {\n      Object.keys(this.zPivots).forEach(z => {\n        const elem = this.zPivots[z];\n\n        if (elem && elem.parentNode) {\n          elem.parentNode.removeChild(elem);\n        }\n      });\n    }\n\n    this.zPivots = {};\n  }\n\n  insertView(view) {\n    const stage = this.view.stage;\n\n    switch (this.options.sorting) {\n      case 'approx':\n        {\n          const zIndex = view.cell.getZIndex();\n          const pivot = this.addZPivot(zIndex);\n          stage.insertBefore(view.container, pivot);\n          break;\n        }\n\n      case 'exact':\n      default:\n        stage.appendChild(view.container);\n        break;\n    }\n  }\n\n  findViewByCell(cell) {\n    if (cell == null) {\n      return null;\n    }\n\n    const id = Cell.isCell(cell) ? cell.id : cell;\n    return this.views[id];\n  }\n\n  findViewByElem(elem) {\n    if (elem == null) {\n      return null;\n    }\n\n    const target = typeof elem === 'string' ? this.view.stage.querySelector(elem) : elem instanceof Element ? elem : elem[0];\n\n    if (target) {\n      const id = this.view.findAttr('data-cell-id', target);\n\n      if (id) {\n        return this.views[id];\n      }\n    }\n\n    return null;\n  }\n\n  findViewsFromPoint(p) {\n    const ref = {\n      x: p.x,\n      y: p.y\n    };\n    return this.model.getCells().map(cell => this.findViewByCell(cell)).filter(view => {\n      if (view != null) {\n        return Dom.getBBox(view.container, {\n          target: this.view.stage\n        }).containsPoint(ref);\n      }\n\n      return false;\n    });\n  }\n\n  findEdgeViewsInArea(rect, options = {}) {\n    const area = Rectangle.create(rect);\n    return this.model.getEdges().map(edge => this.findViewByCell(edge)).filter(view => {\n      if (view) {\n        const bbox = Dom.getBBox(view.container, {\n          target: this.view.stage\n        });\n\n        if (bbox.width === 0) {\n          bbox.inflate(1, 0);\n        } else if (bbox.height === 0) {\n          bbox.inflate(0, 1);\n        }\n\n        return options.strict ? area.containsRect(bbox) : area.isIntersectWithRect(bbox);\n      }\n\n      return false;\n    });\n  }\n\n  findViewsInArea(rect, options = {}) {\n    const area = Rectangle.create(rect);\n    return this.model.getNodes().map(node => this.findViewByCell(node)).filter(view => {\n      if (view) {\n        const bbox = Dom.getBBox(view.container, {\n          target: this.view.stage\n        });\n        return options.strict ? area.containsRect(bbox) : area.isIntersectWithRect(bbox);\n      }\n\n      return false;\n    });\n  }\n\n  dispose() {\n    this.resetUpdates();\n    this.stopListening();\n  }\n\n}\n\n__decorate([Base.dispose()], Renderer.prototype, \"dispose\", null);\n\n(function (Renderer) {\n  Renderer.FLAG_INSERT = 1 << 30;\n  Renderer.FLAG_REMOVE = 1 << 29;\n  Renderer.MOUNT_BATCH_SIZE = 1000;\n  Renderer.UPDATE_BATCH_SIZE = 1000;\n  Renderer.MIN_PRIORITY = 2;\n  Renderer.SORT_DELAYING_BATCHES = ['add', 'to-front', 'to-back'];\n  Renderer.UPDATE_DELAYING_BATCHES = ['translate'];\n})(Renderer || (Renderer = {}));","map":{"version":3,"mappings":"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","names":["Dom","FunctionExt","Rectangle","Cell","View","CellView","Base","Renderer","init","resetUpdates","startListening","resetViews","model","getCells","isFrozen","isAsync","updateViewsAsync","on","onSortModel","onModelReseted","onBatchStop","onCellAdded","onCellRemoved","onCellZIndexChanged","onCellVisibleChanged","stopListening","off","updates","priorities","mounted","mountedCids","unmounted","unmountedCids","count","sort","frozen","freezeKey","animationId","hasActiveBatch","SORT_DELAYING_BATCHES","sortViews","options","removeZPivots","name","data","updateDelayingBatches","UPDATE_DELAYING_BATCHES","includes","updateViews","sortDelayingBatches","cell","position","renderView","maxPosition","freeze","key","unfreeze","view","findViewByCell","requestViewUpdate","FLAG_REMOVE","priority","sorting","FLAG_INSERT","current","visible","processEdgeOnTerminalVisibleChanged","removeView","node","getOpposite","edge","currentTerminal","sourceId","getSourceCellId","id","getSourceCell","targetId","getTargetCellId","getTargetCell","getConnectedEdges","forEach","opposite","isVisible","show","hide","isEdgeTerminalVisible","terminal","cellId","getCell","requestConnectedEdgesUpdate","isCellView","edges","j","n","length","edgeView","flagLabels","push","scheduleViewUpdate","getFlag","forcePostponedViewUpdate","flag","isNode","isEdge","sourceFlag","sourceView","isViewMounted","dumpView","updateTerminalMagnet","targetFlag","targetView","cid","cache","currentFlag","graph","hook","onViewUpdated","async","stats","trigger","registerMountedView","updateView","dumpViews","checkView","requireView","insertView","confirmUpdate","result","batchCount","updatedCount","MIN_PRIORITY","updateViewsBatch","Math","min","empty","batchSize","UPDATE_BATCH_SIZE","mountedCount","unmountedCount","postponedCount","main","p","views","isUnmounted","call","registerUnmountedView","unmount","cellView","leftoverFlag","hasAction","removeAction","onViewPostponed","processed","cancelAnimationFrame","beforeFn","before","checkout","checkViewImpl","mountedBatchSize","MOUNT_BATCH_SIZE","unmountedBatchSize","total","progressFn","progress","done","requestAnimationFrame","getMountedViews","Object","keys","map","getUnmountedViews","checkMountedViews","viewportFn","unmountCount","size","i","shouldMount","splice","checkUnmountedViews","mountCount","mounting","Number","MAX_SAFE_INTEGER","callback","afterFn","after","onProgress","setAsync","onRemove","removeViews","cells","remove","tmp","createCellView","getBootstrapFlag","isExactSorting","sortViewsExact","sortElements","elems","comparator","placements","elem","parentNode","nextSibling","insertBefore","document","createTextNode","targetNode","Error","removeChild","index","$","stage","children","toArray","a","b","cellA","getAttribute","cellB","z1","getZIndex","z2","addZPivot","zIndex","zPivots","pivots","pivot","createComment","neighborZ","Infinity","currentZ","layer","neighborPivot","firstChild","z","container","appendChild","isCell","findViewByElem","target","querySelector","Element","findAttr","findViewsFromPoint","ref","x","y","filter","getBBox","containsPoint","findEdgeViewsInArea","rect","area","create","getEdges","bbox","width","inflate","height","strict","containsRect","isIntersectWithRect","findViewsInArea","getNodes","dispose","__decorate"],"sourceRoot":"","sources":["../../src/graph/renderer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}