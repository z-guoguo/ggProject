{"ast":null,"code":"import { FunctionExt } from '../../util';\nimport { Point, Line, Angle } from '../../geometry';\nimport { resolve } from './manhattan/options';\nimport { manhattan } from './manhattan/index';\nconst defaults = {\n  maxDirectionChange: 45,\n\n  // an array of directions to find next points on the route\n  // different from start/end directions\n  directions() {\n    const step = resolve(this.step, this);\n    const cost = resolve(this.cost, this);\n    const diagonalCost = Math.ceil(Math.sqrt(step * step << 1)); // eslint-disable-line no-bitwise\n\n    return [{\n      cost,\n      offsetX: step,\n      offsetY: 0\n    }, {\n      cost: diagonalCost,\n      offsetX: step,\n      offsetY: step\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: step\n    }, {\n      cost: diagonalCost,\n      offsetX: -step,\n      offsetY: step\n    }, {\n      cost,\n      offsetX: -step,\n      offsetY: 0\n    }, {\n      cost: diagonalCost,\n      offsetX: -step,\n      offsetY: -step\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: -step\n    }, {\n      cost: diagonalCost,\n      offsetX: step,\n      offsetY: -step\n    }];\n  },\n\n  // a simple route used in situations when main routing method fails\n  // (exceed max number of loop iterations, inaccessible)\n  fallbackRoute(from, to, options) {\n    // Find a route which breaks by 45 degrees ignoring all obstacles.\n    const theta = from.theta(to);\n    const route = [];\n    let a = {\n      x: to.x,\n      y: from.y\n    };\n    let b = {\n      x: from.x,\n      y: to.y\n    };\n\n    if (theta % 180 > 90) {\n      const t = a;\n      a = b;\n      b = t;\n    }\n\n    const p1 = theta % 90 < 45 ? a : b;\n    const l1 = new Line(from, p1);\n    const alpha = 90 * Math.ceil(theta / 90);\n    const p2 = Point.fromPolar(l1.squaredLength(), Angle.toRad(alpha + 135), p1);\n    const l2 = new Line(to, p2);\n    const intersectionPoint = l1.intersectsWithLine(l2);\n    const point = intersectionPoint || to;\n    const directionFrom = intersectionPoint ? point : from;\n    const quadrant = 360 / options.directions.length;\n    const angleTheta = directionFrom.theta(to);\n    const normalizedAngle = Angle.normalize(angleTheta + quadrant / 2);\n    const directionAngle = quadrant * Math.floor(normalizedAngle / quadrant);\n    options.previousDirectionAngle = directionAngle;\n    if (point) route.push(point.round());\n    route.push(to);\n    return route;\n  }\n\n};\nexport const metro = function (vertices, options, linkView) {\n  return FunctionExt.call(manhattan, this, vertices, Object.assign(Object.assign({}, defaults), options), linkView);\n};","map":{"version":3,"mappings":"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","names":["FunctionExt","Point","Line","Angle","resolve","manhattan","defaults","maxDirectionChange","directions","step","cost","diagonalCost","Math","ceil","sqrt","offsetX","offsetY","fallbackRoute","from","to","options","theta","route","a","x","y","b","t","p1","l1","alpha","p2","fromPolar","squaredLength","toRad","l2","intersectionPoint","intersectsWithLine","point","directionFrom","quadrant","length","angleTheta","normalizedAngle","normalize","directionAngle","floor","previousDirectionAngle","push","round","metro","vertices","linkView","call","Object"],"sourceRoot":"","sources":["../../../src/registry/router/metro.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}