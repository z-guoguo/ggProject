{"ast":null,"code":"import { clone } from '@antv/util';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\nimport cosineSimilarity from './cosine-similarity';\n/**\n *  nodes-cosine-similarity算法 基于节点属性计算余弦相似度(基于种子节点寻找相似节点)\n * @param nodes 图节点数据\n * @param seedNode 种子节点\n * @param propertyKey 属性的字段名\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\n\nvar nodesCosineSimilarity = function nodesCosineSimilarity(nodes, seedNode, propertyKey, involvedKeys, uninvolvedKeys) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n\n  if (propertyKey === void 0) {\n    propertyKey = undefined;\n  }\n\n  if (involvedKeys === void 0) {\n    involvedKeys = [];\n  }\n\n  if (uninvolvedKeys === void 0) {\n    uninvolvedKeys = [];\n  }\n\n  var similarNodes = clone(nodes.filter(function (node) {\n    return node.id !== seedNode.id;\n  }));\n  var seedNodeIndex = nodes.findIndex(function (node) {\n    return node.id === seedNode.id;\n  }); // 所有节点属性集合\n\n  var properties = getAllProperties(nodes, propertyKey); // 所有节点属性one-hot特征向量集合\n\n  var allPropertiesWeight = oneHot(properties, involvedKeys, uninvolvedKeys); // 种子节点属性\n\n  var seedNodeProperties = allPropertiesWeight[seedNodeIndex];\n  var allCosineSimilarity = [];\n  similarNodes.forEach(function (node, index) {\n    if (node.id !== seedNode.id) {\n      // 节点属性\n      var nodeProperties = allPropertiesWeight[index]; // 计算节点向量和种子节点向量的余弦相似度\n\n      var cosineSimilarityValue = cosineSimilarity(nodeProperties, seedNodeProperties);\n      allCosineSimilarity.push(cosineSimilarityValue);\n      node.cosineSimilarity = cosineSimilarityValue;\n    }\n  }); // 将返回的节点按照余弦相似度大小排序\n\n  similarNodes.sort(function (a, b) {\n    return b.cosineSimilarity - a.cosineSimilarity;\n  });\n  return {\n    allCosineSimilarity: allCosineSimilarity,\n    similarNodes: similarNodes\n  };\n};\n\nexport default nodesCosineSimilarity;","map":{"version":3,"names":["clone","getAllProperties","oneHot","cosineSimilarity","nodesCosineSimilarity","nodes","seedNode","propertyKey","involvedKeys","uninvolvedKeys","undefined","similarNodes","filter","node","id","seedNodeIndex","findIndex","properties","allPropertiesWeight","seedNodeProperties","allCosineSimilarity","forEach","index","nodeProperties","cosineSimilarityValue","push","sort","a","b"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/es/nodes-cosine-similarity.js"],"sourcesContent":["import { clone } from '@antv/util';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\nimport cosineSimilarity from './cosine-similarity';\n/**\n *  nodes-cosine-similarity算法 基于节点属性计算余弦相似度(基于种子节点寻找相似节点)\n * @param nodes 图节点数据\n * @param seedNode 种子节点\n * @param propertyKey 属性的字段名\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\n\nvar nodesCosineSimilarity = function nodesCosineSimilarity(nodes, seedNode, propertyKey, involvedKeys, uninvolvedKeys) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n\n  if (propertyKey === void 0) {\n    propertyKey = undefined;\n  }\n\n  if (involvedKeys === void 0) {\n    involvedKeys = [];\n  }\n\n  if (uninvolvedKeys === void 0) {\n    uninvolvedKeys = [];\n  }\n\n  var similarNodes = clone(nodes.filter(function (node) {\n    return node.id !== seedNode.id;\n  }));\n  var seedNodeIndex = nodes.findIndex(function (node) {\n    return node.id === seedNode.id;\n  }); // 所有节点属性集合\n\n  var properties = getAllProperties(nodes, propertyKey); // 所有节点属性one-hot特征向量集合\n\n  var allPropertiesWeight = oneHot(properties, involvedKeys, uninvolvedKeys); // 种子节点属性\n\n  var seedNodeProperties = allPropertiesWeight[seedNodeIndex];\n  var allCosineSimilarity = [];\n  similarNodes.forEach(function (node, index) {\n    if (node.id !== seedNode.id) {\n      // 节点属性\n      var nodeProperties = allPropertiesWeight[index]; // 计算节点向量和种子节点向量的余弦相似度\n\n      var cosineSimilarityValue = cosineSimilarity(nodeProperties, seedNodeProperties);\n      allCosineSimilarity.push(cosineSimilarityValue);\n      node.cosineSimilarity = cosineSimilarityValue;\n    }\n  }); // 将返回的节点按照余弦相似度大小排序\n\n  similarNodes.sort(function (a, b) {\n    return b.cosineSimilarity - a.cosineSimilarity;\n  });\n  return {\n    allCosineSimilarity: allCosineSimilarity,\n    similarNodes: similarNodes\n  };\n};\n\nexport default nodesCosineSimilarity;"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,KAA/B,EAAsCC,QAAtC,EAAgDC,WAAhD,EAA6DC,YAA7D,EAA2EC,cAA3E,EAA2F;EACrH,IAAIJ,KAAK,KAAK,KAAK,CAAnB,EAAsB;IACpBA,KAAK,GAAG,EAAR;EACD;;EAED,IAAIE,WAAW,KAAK,KAAK,CAAzB,EAA4B;IAC1BA,WAAW,GAAGG,SAAd;EACD;;EAED,IAAIF,YAAY,KAAK,KAAK,CAA1B,EAA6B;IAC3BA,YAAY,GAAG,EAAf;EACD;;EAED,IAAIC,cAAc,KAAK,KAAK,CAA5B,EAA+B;IAC7BA,cAAc,GAAG,EAAjB;EACD;;EAED,IAAIE,YAAY,GAAGX,KAAK,CAACK,KAAK,CAACO,MAAN,CAAa,UAAUC,IAAV,EAAgB;IACpD,OAAOA,IAAI,CAACC,EAAL,KAAYR,QAAQ,CAACQ,EAA5B;EACD,CAFwB,CAAD,CAAxB;EAGA,IAAIC,aAAa,GAAGV,KAAK,CAACW,SAAN,CAAgB,UAAUH,IAAV,EAAgB;IAClD,OAAOA,IAAI,CAACC,EAAL,KAAYR,QAAQ,CAACQ,EAA5B;EACD,CAFmB,CAApB,CApBqH,CAsBjH;;EAEJ,IAAIG,UAAU,GAAGhB,gBAAgB,CAACI,KAAD,EAAQE,WAAR,CAAjC,CAxBqH,CAwB9D;;EAEvD,IAAIW,mBAAmB,GAAGhB,MAAM,CAACe,UAAD,EAAaT,YAAb,EAA2BC,cAA3B,CAAhC,CA1BqH,CA0BzC;;EAE5E,IAAIU,kBAAkB,GAAGD,mBAAmB,CAACH,aAAD,CAA5C;EACA,IAAIK,mBAAmB,GAAG,EAA1B;EACAT,YAAY,CAACU,OAAb,CAAqB,UAAUR,IAAV,EAAgBS,KAAhB,EAAuB;IAC1C,IAAIT,IAAI,CAACC,EAAL,KAAYR,QAAQ,CAACQ,EAAzB,EAA6B;MAC3B;MACA,IAAIS,cAAc,GAAGL,mBAAmB,CAACI,KAAD,CAAxC,CAF2B,CAEsB;;MAEjD,IAAIE,qBAAqB,GAAGrB,gBAAgB,CAACoB,cAAD,EAAiBJ,kBAAjB,CAA5C;MACAC,mBAAmB,CAACK,IAApB,CAAyBD,qBAAzB;MACAX,IAAI,CAACV,gBAAL,GAAwBqB,qBAAxB;IACD;EACF,CATD,EA9BqH,CAuCjH;;EAEJb,YAAY,CAACe,IAAb,CAAkB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;IAChC,OAAOA,CAAC,CAACzB,gBAAF,GAAqBwB,CAAC,CAACxB,gBAA9B;EACD,CAFD;EAGA,OAAO;IACLiB,mBAAmB,EAAEA,mBADhB;IAELT,YAAY,EAAEA;EAFT,CAAP;AAID,CAhDD;;AAkDA,eAAeP,qBAAf"},"metadata":{},"sourceType":"module"}