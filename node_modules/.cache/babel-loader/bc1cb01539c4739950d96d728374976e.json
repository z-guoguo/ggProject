{"ast":null,"code":"import { defineComponent } from 'vue';\nimport G6 from '@antv/g6';\nexport default defineComponent({\n  name: 'antV',\n\n  setup() {\n    /**\n     * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n     */\n    let addedCount = 0; // Register a custom behavior: add a node when user click the blank part of canvas\n\n    G6.registerBehavior('click-add-node', {\n      // Set the events and the corresponding responsing function for this behavior\n      getEvents() {\n        // The event is canvas:click, the responsing function is onClick\n        return {\n          'canvas:click': 'onClick'\n        };\n      },\n\n      // Click event\n      onClick(ev) {\n        const self = this;\n        const graph = self.graph; // Add a new node\n\n        graph.addItem('node', {\n          x: ev.canvasX,\n          y: ev.canvasY,\n          id: `node-${addedCount}` // Generate the unique id\n\n        });\n        addedCount++;\n      }\n\n    }); // Register a custom behavior: click two end nodes to add an edge\n\n    G6.registerBehavior('click-add-edge', {\n      // Set the events and the corresponding responsing function for this behavior\n      getEvents() {\n        return {\n          'node:click': 'onClick',\n          // The event is canvas:click, the responsing function is onClick\n          mousemove: 'onMousemove',\n          // The event is mousemove, the responsing function is onMousemove\n          'edge:click': 'onEdgeClick' // The event is edge:click, the responsing function is onEdgeClick\n\n        };\n      },\n\n      // The responsing function for node:click defined in getEvents\n      onClick(ev) {\n        const self = this;\n        const node = ev.item;\n        const graph = self.graph; // The position where the mouse clicks\n\n        const point = {\n          x: ev.x,\n          y: ev.y\n        };\n        const model = node.getModel();\n\n        if (self.addingEdge && self.edge) {\n          graph.updateItem(self.edge, {\n            target: model.id\n          });\n          self.edge = null;\n          self.addingEdge = false;\n        } else {\n          // Add anew edge, the end node is the current node user clicks\n          self.edge = graph.addItem('edge', {\n            source: model.id,\n            target: model.id\n          });\n          self.addingEdge = true;\n        }\n      },\n\n      // The responsing function for mousemove defined in getEvents\n      onMousemove(ev) {\n        const self = this; // The current position the mouse clicks\n\n        const point = {\n          x: ev.x,\n          y: ev.y\n        };\n\n        if (self.addingEdge && self.edge) {\n          // Update the end node to the current node the mouse clicks\n          self.graph.updateItem(self.edge, {\n            target: point\n          });\n        }\n      },\n\n      // The responsing function for edge:click defined in getEvents\n      onEdgeClick(ev) {\n        const self = this;\n        const currentEdge = ev.item;\n\n        if (self.addingEdge && self.edge === currentEdge) {\n          self.graph.removeItem(self.edge);\n          self.edge = null;\n          self.addingEdge = false;\n        }\n      }\n\n    }); // Initial data\n\n    const data = {\n      nodes: [{\n        id: 'node1',\n        x: 100,\n        y: 200\n      }, {\n        id: 'node2',\n        x: 300,\n        y: 200\n      }, {\n        id: 'node3',\n        x: 300,\n        y: 300\n      }],\n      edges: [{\n        id: 'edge1',\n        target: 'node2',\n        source: 'node1'\n      }]\n    };\n    const container = document.getElementById('container'); // Add a selector to DOM\n\n    const selector = document.createElement('select');\n    selector.id = 'selector';\n    const selection1 = document.createElement('option');\n    selection1.value = 'default';\n    selection1.innerHTML = 'Default Mode';\n    const selection2 = document.createElement('option');\n    selection2.value = 'addNode';\n    selection2.innerHTML = 'Add Node (By clicking canvas)';\n    const selection3 = document.createElement('option');\n    selection3.value = 'addEdge';\n    selection3.innerHTML = 'Add Edge (By clicking two end nodes)';\n    selector.appendChild(selection1);\n    selector.appendChild(selection2);\n    selector.appendChild(selection3);\n    container.appendChild(selector);\n    const width = container.scrollWidth;\n    const height = (container.scrollHeight || 500) - 30;\n    const graph = new G6.Graph({\n      container: 'container',\n      width,\n      height,\n      // The sets of behavior modes\n      modes: {\n        // Defualt mode\n        default: ['drag-node', 'click-select'],\n        // Adding node mode\n        addNode: ['click-add-node', 'click-select'],\n        // Adding edge mode\n        addEdge: ['click-add-edge', 'click-select']\n      },\n      // The node styles in different states\n      nodeStateStyles: {\n        // The node styles in selected state\n        selected: {\n          stroke: '#666',\n          lineWidth: 2,\n          fill: 'steelblue'\n        }\n      }\n    });\n    graph.data(data);\n    graph.render(); // Listen to the selector, change the mode when the selector is changed\n\n    selector.addEventListener('change', e => {\n      const value = e.target.value; // change the behavior mode\n\n      graph.setMode(value);\n    });\n    if (typeof window !== 'undefined') window.onresize = () => {\n      if (!graph || graph.get('destroyed')) return;\n      if (!container || !container.scrollWidth || !container.scrollHeight) return;\n      graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","G6","name","setup","addedCount","registerBehavior","getEvents","onClick","ev","self","graph","addItem","x","canvasX","y","canvasY","id","mousemove","node","item","point","model","getModel","addingEdge","edge","updateItem","target","source","onMousemove","onEdgeClick","currentEdge","removeItem","data","nodes","edges","container","document","getElementById","selector","createElement","selection1","value","innerHTML","selection2","selection3","appendChild","width","scrollWidth","height","scrollHeight","Graph","modes","default","addNode","addEdge","nodeStateStyles","selected","stroke","lineWidth","fill","render","addEventListener","e","setMode","window","onresize","get","changeSize"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antv/index.vue"],"sourcesContent":["<template>\n    <div class=\"antv\">\n        <div id=\"container\"></div>\n    </div>\n</template>\n<script>\nimport { defineComponent } from 'vue'\nimport G6 from '@antv/g6';\nexport default defineComponent({\n    name: 'antV',\n    setup() {\n        \n\n        /**\n         * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n         */\n        let addedCount = 0;\n        // Register a custom behavior: add a node when user click the blank part of canvas\n        G6.registerBehavior('click-add-node', {\n            // Set the events and the corresponding responsing function for this behavior\n            getEvents() {\n                // The event is canvas:click, the responsing function is onClick\n                return {\n                'canvas:click': 'onClick',\n                };\n            },\n            // Click event\n            onClick(ev) {\n                const self = this;\n                const graph = self.graph;\n                // Add a new node\n                graph.addItem('node', {\n                x: ev.canvasX,\n                y: ev.canvasY,\n                id: `node-${addedCount}`, // Generate the unique id\n                });\n                addedCount++;\n            },\n        });\n        // Register a custom behavior: click two end nodes to add an edge\n        G6.registerBehavior('click-add-edge', {\n            // Set the events and the corresponding responsing function for this behavior\n            getEvents() {\n                return {\n                'node:click': 'onClick', // The event is canvas:click, the responsing function is onClick\n                mousemove: 'onMousemove', // The event is mousemove, the responsing function is onMousemove\n                'edge:click': 'onEdgeClick', // The event is edge:click, the responsing function is onEdgeClick\n                };\n            },\n            // The responsing function for node:click defined in getEvents\n            onClick(ev) {\n                const self = this;\n                const node = ev.item;\n                const graph = self.graph;\n                // The position where the mouse clicks\n                const point = { x: ev.x, y: ev.y };\n                const model = node.getModel();\n                if (self.addingEdge && self.edge) {\n                graph.updateItem(self.edge, {\n                    target: model.id,\n                });\n\n                self.edge = null;\n                self.addingEdge = false;\n                } else {\n                // Add anew edge, the end node is the current node user clicks\n                self.edge = graph.addItem('edge', {\n                    source: model.id,\n                    target: model.id,\n                });\n                self.addingEdge = true;\n                }\n            },\n            // The responsing function for mousemove defined in getEvents\n            onMousemove(ev) {\n                const self = this;\n                // The current position the mouse clicks\n                const point = { x: ev.x, y: ev.y };\n                if (self.addingEdge && self.edge) {\n                // Update the end node to the current node the mouse clicks\n                self.graph.updateItem(self.edge, {\n                    target: point,\n                });\n                }\n            },\n            // The responsing function for edge:click defined in getEvents\n            onEdgeClick(ev) {\n                const self = this;\n                const currentEdge = ev.item;\n                if (self.addingEdge && self.edge === currentEdge) {\n                self.graph.removeItem(self.edge);\n                self.edge = null;\n                self.addingEdge = false;\n                }\n            },\n        });\n        // Initial data\n        const data = {\n            nodes: [\n                {\n                id: 'node1',\n                x: 100,\n                y: 200,\n                },\n                {\n                id: 'node2',\n                x: 300,\n                y: 200,\n                },\n                {\n                id: 'node3',\n                x: 300,\n                y: 300,\n                },\n            ],\n            edges: [\n                {\n                id: 'edge1',\n                target: 'node2',\n                source: 'node1',\n                },\n            ],\n        };\n\n        const container = document.getElementById('container');\n\n        // Add a selector to DOM\n        const selector = document.createElement('select');\n        selector.id = 'selector';\n        const selection1 = document.createElement('option');\n        selection1.value = 'default';\n        selection1.innerHTML = 'Default Mode';\n        const selection2 = document.createElement('option');\n        selection2.value = 'addNode';\n        selection2.innerHTML = 'Add Node (By clicking canvas)';\n        const selection3 = document.createElement('option');\n        selection3.value = 'addEdge';\n        selection3.innerHTML = 'Add Edge (By clicking two end nodes)';\n        selector.appendChild(selection1);\n        selector.appendChild(selection2);\n        selector.appendChild(selection3);\n        container.appendChild(selector);\n\n        const width = container.scrollWidth;\n        const height = (container.scrollHeight || 500) - 30;\n        const graph = new G6.Graph({\n        container: 'container',\n        width,\n        height,\n        // The sets of behavior modes\n        modes: {\n            // Defualt mode\n            default: ['drag-node', 'click-select'],\n            // Adding node mode\n            addNode: ['click-add-node', 'click-select'],\n            // Adding edge mode\n            addEdge: ['click-add-edge', 'click-select'],\n        },\n        // The node styles in different states\n        nodeStateStyles: {\n            // The node styles in selected state\n            selected: {\n            stroke: '#666',\n            lineWidth: 2,\n            fill: 'steelblue',\n            },\n        },\n        });\n        graph.data(data);\n        graph.render();\n\n        // Listen to the selector, change the mode when the selector is changed\n        selector.addEventListener('change', (e) => {\n        const value = e.target.value;\n        // change the behavior mode\n        graph.setMode(value);\n        });\n\n        if (typeof window !== 'undefined')\n        window.onresize = () => {\n            if (!graph || graph.get('destroyed')) return;\n            if (!container || !container.scrollWidth || !container.scrollHeight) return;\n            graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n        };\n    },\n})\n</script>\n<style lang=\"less\" scoped>\n.antv {\n    height: 100%;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}