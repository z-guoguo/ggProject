{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\n\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\n\n\nexport var ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType] || self['simple-circle'];\n    return shape;\n  },\n\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    group['shapeMap'] = {};\n    var rst = shape.draw(cfg, group);\n\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n\n    return rst;\n  },\n\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item, updateType) {\n    var _a, _b;\n\n    var shape = this.getShape(type); // 防止没定义 update 函数\n\n    if (shape.update) {\n      // shape.mergeStyle = updateType === 'move' || updateType === 'bbox' ? {} : shape.getOptions?.(cfg);\n      shape.mergeStyle = (_a = shape.getOptions) === null || _a === void 0 ? void 0 : _a.call(shape, cfg, updateType);\n      (_b = shape.update) === null || _b === void 0 ? void 0 : _b.call(shape, cfg, item, updateType);\n    }\n\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type); // 调用 shape/shapeBase.ts 中的 setState 方法\n\n    shape.setState(name, value, item);\n  },\n\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\n\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n\n  /**\n   * 绘制\n   */\n  drawShape: function\n  /* cfg, group */\n  drawShape() {},\n\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function\n  /* cfg, group */\n  afterDraw() {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function\n  /* cfg, item */\n  afterUpdate() {},\n\n  /**\n   * 设置节点、边状态\n   */\n  setState: function\n  /* name, value, item */\n  setState() {},\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n  /* 如果没定义 update 方法，每次都调用 draw 方法\n  update(cfg, item) {\n     }\n  */\n\n};\n\nvar Shape =\n/** @class */\nfunction () {\n  function Shape() {}\n\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      shapeFactory.getShape(extendShapeType);\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  return Shape;\n}();\n\nexport default Shape; // 注册 Node 的工厂方法\n\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n}); // 注册 Edge 的工厂方法\n\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n}); // 注册 Combo 的工厂方法\n\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});","map":{"version":3,"names":["__assign","upperFirst","createNodeFromXML","cache","ucfirst","str","ShapeFactoryBase","defaultShapeType","className","getShape","type","self","shape","draw","cfg","group","rst","afterDraw","baseUpdate","item","updateType","_a","_b","update","mergeStyle","getOptions","call","afterUpdate","setState","name","value","shouldUpdate","getControlPoints","getAnchorPoints","ShapeFramework","options","drawShape","controlPoints","defaultAnchorPoints","anchorPoints","Shape","registerFactory","factoryType","factoryBase","shapeFactory","getFactory","registerNode","shapeType","nodeDefinition","extendShapeType","Node","shapeObj","autoNodeDefinition","jsx","extendShape","itemType","registerEdge","edgeDefinition","Edge","registerCombo","comboDefinition","Combo"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-core/es/element/shape.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\n\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\n\n\nexport var ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType] || self['simple-circle'];\n    return shape;\n  },\n\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    group['shapeMap'] = {};\n    var rst = shape.draw(cfg, group);\n\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n\n    return rst;\n  },\n\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item, updateType) {\n    var _a, _b;\n\n    var shape = this.getShape(type); // 防止没定义 update 函数\n\n    if (shape.update) {\n      // shape.mergeStyle = updateType === 'move' || updateType === 'bbox' ? {} : shape.getOptions?.(cfg);\n      shape.mergeStyle = (_a = shape.getOptions) === null || _a === void 0 ? void 0 : _a.call(shape, cfg, updateType);\n      (_b = shape.update) === null || _b === void 0 ? void 0 : _b.call(shape, cfg, item, updateType);\n    }\n\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type); // 调用 shape/shapeBase.ts 中的 setState 方法\n\n    shape.setState(name, value, item);\n  },\n\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\n\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n\n  /**\n   * 绘制\n   */\n  drawShape: function\n    /* cfg, group */\n  drawShape() {},\n\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function\n    /* cfg, group */\n  afterDraw() {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function\n    /* cfg, item */\n  afterUpdate() {},\n\n  /**\n   * 设置节点、边状态\n   */\n  setState: function\n    /* name, value, item */\n  setState() {},\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n  /* 如果没定义 update 方法，每次都调用 draw 方法\n  update(cfg, item) {\n     }\n  */\n\n};\n\nvar Shape =\n/** @class */\nfunction () {\n  function Shape() {}\n\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      shapeFactory.getShape(extendShapeType);\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  return Shape;\n}();\n\nexport default Shape; // 注册 Node 的工厂方法\n\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n}); // 注册 Edge 的工厂方法\n\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n}); // 注册 Combo 的工厂方法\n\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}