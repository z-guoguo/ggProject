{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-56cc1ecc\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"antv\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"container\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;;;EACSA,KAAK,EAAC;;;gEACPC,oBAA0B,KAA1B,EAA0B;EAArBC,EAAE,EAAC;AAAkB,CAA1B,EAAmB,IAAnB,EAAmB;AAAA;AAAnB;;oBAAAC;;uBADJC,oBAEM,KAFN,cAEMC,UAFN","names":["class","_createElementVNode","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antv/index.vue"],"sourcesContent":["<template>\n    <div class=\"antv\">\n        <div id=\"container\"></div>\n    </div>\n</template>\n<script>\nimport { defineComponent, onMounted } from 'vue'\nimport G6 from '@antv/g6';\nexport default defineComponent({\n    name: 'antV',\n    setup() {\n        \n        onMounted(()=> {\n            /**\n             * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n             */\n            let addedCount = 0;\n            // Register a custom behavior: add a node when user click the blank part of canvas\n            G6.registerBehavior('click-add-node', {\n                // Set the events and the corresponding responsing function for this behavior\n                getEvents() {\n                    // The event is canvas:click, the responsing function is onClick\n                    return {\n                    'canvas:click': 'onClick',\n                    };\n                },\n                // Click event\n                onClick(ev) {\n                    const self = this;\n                    const graph = self.graph;\n                    // Add a new node\n                    graph.addItem('node', {\n                    x: ev.canvasX,\n                    y: ev.canvasY,\n                    id: `node-${addedCount}`, // Generate the unique id\n                    });\n                    addedCount++;\n                },\n            });\n            // Register a custom behavior: click two end nodes to add an edge\n            G6.registerBehavior('click-add-edge', {\n                // Set the events and the corresponding responsing function for this behavior\n                getEvents() {\n                    return {\n                    'node:click': 'onClick', // The event is canvas:click, the responsing function is onClick\n                    mousemove: 'onMousemove', // The event is mousemove, the responsing function is onMousemove\n                    'edge:click': 'onEdgeClick', // The event is edge:click, the responsing function is onEdgeClick\n                    };\n                },\n                // The responsing function for node:click defined in getEvents\n                onClick(ev) {\n                    // console.log(1111)\n                    // console.log(this)\n                    const self = this;\n                    const node = ev.item;\n                    const graph = self.graph;\n                    // The position where the mouse clicks\n                    const point = { x: ev.x, y: ev.y };\n                    const model = node.getModel();\n                    if (self.addingEdge && self.edge) {\n                    graph.updateItem(self.edge, {\n                        target: model.id,\n                    });\n    \n                    self.edge = null;\n                    self.addingEdge = false;\n                    } else {\n                    // Add anew edge, the end node is the current node user clicks\n                    self.edge = graph.addItem('edge', {\n                        source: model.id,\n                        target: model.id,\n                    });\n                    self.addingEdge = true;\n                    }\n                },\n                // The responsing function for mousemove defined in getEvents\n                onMousemove(ev) {\n                    const self = this;\n                    // The current position the mouse clicks\n                    const point = { x: ev.x, y: ev.y };\n                    if (self.addingEdge && self.edge) {\n                    // Update the end node to the current node the mouse clicks\n                    self.graph.updateItem(self.edge, {\n                        target: point,\n                    });\n                    }\n                },\n                // The responsing function for edge:click defined in getEvents\n                onEdgeClick(ev) {\n                    const self = this;\n                    const currentEdge = ev.item;\n                    if (self.addingEdge && self.edge === currentEdge) {\n                    self.graph.removeItem(self.edge);\n                    self.edge = null;\n                    self.addingEdge = false;\n                    }\n                },\n            });\n            // Initial data\n            const data = {\n                nodes: [\n                    {\n                    id: 'node1',\n                    x: 100,\n                    y: 200,\n                    },\n                    {\n                    id: 'node2',\n                    x: 300,\n                    y: 200,\n                    },\n                    {\n                    id: 'node3',\n                    x: 300,\n                    y: 300,\n                    },\n                ],\n                edges: [\n                    {\n                    id: 'edge1',\n                    target: 'node2',\n                    source: 'node1',\n                    },\n                ],\n            };\n    \n            const container = document.getElementById('container');\n            // Add a layout\n            const layoutBox = document.createElement('div');\n            // 设置layout样式\n            layoutBox.style = \"height:100%;\"\n            // Add a selector to DOM\n            const selector = document.createElement('select');\n            selector.id = 'selector';\n            selector.style.border = 'none';\n            const selection1 = document.createElement('option');\n            selection1.value = 'default';\n            selection1.innerHTML = 'Default Mode';\n            const selection2 = document.createElement('option');\n            selection2.value = 'addNode';\n            selection2.innerHTML = 'Add Node (By clicking canvas)';\n            const selection3 = document.createElement('option');\n            selection3.value = 'addEdge';\n            selection3.innerHTML = 'Add Edge (By clicking two end nodes)';\n            selector.appendChild(selection1);\n            selector.appendChild(selection2);\n            selector.appendChild(selection3);\n            container.appendChild(selector);\n    \n            const width = container.scrollWidth;\n            const height = (container.scrollHeight || 500) - 30;\n            const graph = new G6.Graph({\n            container: 'container',\n            width,\n            height,\n            // The sets of behavior modes\n            modes: {\n                // Defualt mode\n                default: ['drag-node', 'click-select'],\n                // Adding node mode\n                addNode: ['click-add-node', 'click-select'],\n                // Adding edge mode\n                addEdge: ['click-add-edge', 'click-select'],\n            },\n            // The node styles in different states\n            nodeStateStyles: {\n                // The node styles in selected state\n                selected: {\n                stroke: '#666',\n                lineWidth: 2,\n                fill: 'steelblue',\n                },\n            },\n            });\n            graph.data(data);\n            graph.render();\n    \n            // Listen to the selector, change the mode when the selector is changed\n            selector.addEventListener('change', (e) => {\n            const value = e.target.value;\n            // change the behavior mode\n            graph.setMode(value);\n            });\n    \n            if (typeof window !== 'undefined')\n            window.onresize = () => {\n                if (!graph || graph.get('destroyed')) return;\n                if (!container || !container.scrollWidth || !container.scrollHeight) return;\n                graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n            };\n        })\n    },\n})\n</script>\n<style lang=\"less\" scoped>\n.antv {\n    height: 100%;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    #container {\n        height: 100%;\n    }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}