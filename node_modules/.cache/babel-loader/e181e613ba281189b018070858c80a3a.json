{"ast":null,"code":"import { defineComponent, onMounted } from 'vue';\nimport G6 from '@antv/g6';\nexport default defineComponent({\n  name: 'antV',\n\n  setup() {\n    onMounted(() => {\n      /**\n       * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n       */\n      let addedCount = 0; // Register a custom behavior: add a node when user click the blank part of canvas\n\n      G6.registerBehavior('click-add-node', {\n        // Set the events and the corresponding responsing function for this behavior\n        getEvents() {\n          // The event is canvas:click, the responsing function is onClick\n          return {\n            'canvas:click': 'onClick'\n          };\n        },\n\n        // Click event\n        onClick(ev) {\n          const self = this;\n          const graph = self.graph; // Add a new node\n\n          graph.addItem('node', {\n            x: ev.canvasX,\n            y: ev.canvasY,\n            id: `node-${addedCount}` // Generate the unique id\n\n          });\n          addedCount++;\n        }\n\n      }); // Register a custom behavior: click two end nodes to add an edge\n\n      G6.registerBehavior('click-add-edge', {\n        // Set the events and the corresponding responsing function for this behavior\n        getEvents() {\n          return {\n            'node:click': 'onClick',\n            // The event is canvas:click, the responsing function is onClick\n            mousemove: 'onMousemove',\n            // The event is mousemove, the responsing function is onMousemove\n            'edge:click': 'onEdgeClick' // The event is edge:click, the responsing function is onEdgeClick\n\n          };\n        },\n\n        // The responsing function for node:click defined in getEvents\n        onClick(ev) {\n          // console.log(1111)\n          // console.log(this)\n          const self = this;\n          const node = ev.item;\n          const graph = self.graph; // The position where the mouse clicks\n\n          const point = {\n            x: ev.x,\n            y: ev.y\n          };\n          const model = node.getModel();\n\n          if (self.addingEdge && self.edge) {\n            graph.updateItem(self.edge, {\n              target: model.id\n            });\n            self.edge = null;\n            self.addingEdge = false;\n          } else {\n            // Add anew edge, the end node is the current node user clicks\n            self.edge = graph.addItem('edge', {\n              source: model.id,\n              target: model.id\n            });\n            self.addingEdge = true;\n          }\n        },\n\n        // The responsing function for mousemove defined in getEvents\n        onMousemove(ev) {\n          const self = this; // The current position the mouse clicks\n\n          const point = {\n            x: ev.x,\n            y: ev.y\n          };\n\n          if (self.addingEdge && self.edge) {\n            // Update the end node to the current node the mouse clicks\n            self.graph.updateItem(self.edge, {\n              target: point\n            });\n          }\n        },\n\n        // The responsing function for edge:click defined in getEvents\n        onEdgeClick(ev) {\n          const self = this;\n          const currentEdge = ev.item;\n\n          if (self.addingEdge && self.edge === currentEdge) {\n            self.graph.removeItem(self.edge);\n            self.edge = null;\n            self.addingEdge = false;\n          }\n        }\n\n      }); // Initial data\n\n      const data = {\n        nodes: [{\n          id: 'node1',\n          x: 100,\n          y: 200\n        }, {\n          id: 'node2',\n          x: 300,\n          y: 200\n        }, {\n          id: 'node3',\n          x: 300,\n          y: 300\n        }],\n        edges: [{\n          id: 'edge1',\n          target: 'node2',\n          source: 'node1'\n        }]\n      };\n      const container = document.getElementById('container'); // Add a layout 及子元素\n\n      const layoutBox = document.createElement('div');\n      const layoutLeft = document.createElement('div');\n      const layoutRight = document.createElement('div'); // 设置layout样式\n\n      layoutBox.style = \"height:100%;display:flex\";\n      layoutLeft.style = \"width: 300px;height:100%;border:1px solid #ddd;border-radius:6px\";\n      layoutLeft.style = \"flex:1;height:100%;border:1px solid #ddd;border-radius:6px\"; // 添加样式元素到\n      // Add a selector to DOM\n\n      const selector = document.createElement('select');\n      selector.id = 'selector';\n      selector.style.border = 'none';\n      const selection1 = document.createElement('option');\n      selection1.value = 'default';\n      selection1.innerHTML = 'Default Mode';\n      const selection2 = document.createElement('option');\n      selection2.value = 'addNode';\n      selection2.innerHTML = 'Add Node (By clicking canvas)';\n      const selection3 = document.createElement('option');\n      selection3.value = 'addEdge';\n      selection3.innerHTML = 'Add Edge (By clicking two end nodes)';\n      selector.appendChild(selection1);\n      selector.appendChild(selection2);\n      selector.appendChild(selection3);\n      container.appendChild(selector);\n      const width = container.scrollWidth;\n      const height = (container.scrollHeight || 500) - 30;\n      const graph = new G6.Graph({\n        container: 'container',\n        width,\n        height,\n        // The sets of behavior modes\n        modes: {\n          // Defualt mode\n          default: ['drag-node', 'click-select'],\n          // Adding node mode\n          addNode: ['click-add-node', 'click-select'],\n          // Adding edge mode\n          addEdge: ['click-add-edge', 'click-select']\n        },\n        // The node styles in different states\n        nodeStateStyles: {\n          // The node styles in selected state\n          selected: {\n            stroke: '#666',\n            lineWidth: 2,\n            fill: 'steelblue'\n          }\n        }\n      });\n      graph.data(data);\n      graph.render(); // Listen to the selector, change the mode when the selector is changed\n\n      selector.addEventListener('change', e => {\n        const value = e.target.value; // change the behavior mode\n\n        graph.setMode(value);\n      });\n      if (typeof window !== 'undefined') window.onresize = () => {\n        if (!graph || graph.get('destroyed')) return;\n        if (!container || !container.scrollWidth || !container.scrollHeight) return;\n        graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n      };\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["defineComponent","onMounted","G6","name","setup","addedCount","registerBehavior","getEvents","onClick","ev","self","graph","addItem","x","canvasX","y","canvasY","id","mousemove","node","item","point","model","getModel","addingEdge","edge","updateItem","target","source","onMousemove","onEdgeClick","currentEdge","removeItem","data","nodes","edges","container","document","getElementById","layoutBox","createElement","layoutLeft","layoutRight","style","selector","border","selection1","value","innerHTML","selection2","selection3","appendChild","width","scrollWidth","height","scrollHeight","Graph","modes","default","addNode","addEdge","nodeStateStyles","selected","stroke","lineWidth","fill","render","addEventListener","e","setMode","window","onresize","get","changeSize"],"sourceRoot":"","sources":["/Users/wawalike/Desktop/ggProject/src/views/antv/index.vue"],"sourcesContent":["<template>\n    <div class=\"antv\">\n        <div id=\"container\"></div>\n    </div>\n</template>\n<script>\nimport { defineComponent, onMounted } from 'vue'\nimport G6 from '@antv/g6';\nexport default defineComponent({\n    name: 'antV',\n    setup() {\n        \n        onMounted(()=> {\n            /**\n             * 该案例演示切换交互模式，在不同模式下实现拖动节点、增加节点、增加边的交互行为。\n             */\n            let addedCount = 0;\n            // Register a custom behavior: add a node when user click the blank part of canvas\n            G6.registerBehavior('click-add-node', {\n                // Set the events and the corresponding responsing function for this behavior\n                getEvents() {\n                    // The event is canvas:click, the responsing function is onClick\n                    return {\n                    'canvas:click': 'onClick',\n                    };\n                },\n                // Click event\n                onClick(ev) {\n                    const self = this;\n                    const graph = self.graph;\n                    // Add a new node\n                    graph.addItem('node', {\n                    x: ev.canvasX,\n                    y: ev.canvasY,\n                    id: `node-${addedCount}`, // Generate the unique id\n                    });\n                    addedCount++;\n                },\n            });\n            // Register a custom behavior: click two end nodes to add an edge\n            G6.registerBehavior('click-add-edge', {\n                // Set the events and the corresponding responsing function for this behavior\n                getEvents() {\n                    return {\n                    'node:click': 'onClick', // The event is canvas:click, the responsing function is onClick\n                    mousemove: 'onMousemove', // The event is mousemove, the responsing function is onMousemove\n                    'edge:click': 'onEdgeClick', // The event is edge:click, the responsing function is onEdgeClick\n                    };\n                },\n                // The responsing function for node:click defined in getEvents\n                onClick(ev) {\n                    // console.log(1111)\n                    // console.log(this)\n                    const self = this;\n                    const node = ev.item;\n                    const graph = self.graph;\n                    // The position where the mouse clicks\n                    const point = { x: ev.x, y: ev.y };\n                    const model = node.getModel();\n                    if (self.addingEdge && self.edge) {\n                    graph.updateItem(self.edge, {\n                        target: model.id,\n                    });\n    \n                    self.edge = null;\n                    self.addingEdge = false;\n                    } else {\n                    // Add anew edge, the end node is the current node user clicks\n                    self.edge = graph.addItem('edge', {\n                        source: model.id,\n                        target: model.id,\n                    });\n                    self.addingEdge = true;\n                    }\n                },\n                // The responsing function for mousemove defined in getEvents\n                onMousemove(ev) {\n                    const self = this;\n                    // The current position the mouse clicks\n                    const point = { x: ev.x, y: ev.y };\n                    if (self.addingEdge && self.edge) {\n                    // Update the end node to the current node the mouse clicks\n                    self.graph.updateItem(self.edge, {\n                        target: point,\n                    });\n                    }\n                },\n                // The responsing function for edge:click defined in getEvents\n                onEdgeClick(ev) {\n                    const self = this;\n                    const currentEdge = ev.item;\n                    if (self.addingEdge && self.edge === currentEdge) {\n                    self.graph.removeItem(self.edge);\n                    self.edge = null;\n                    self.addingEdge = false;\n                    }\n                },\n            });\n            // Initial data\n            const data = {\n                nodes: [\n                    {\n                    id: 'node1',\n                    x: 100,\n                    y: 200,\n                    },\n                    {\n                    id: 'node2',\n                    x: 300,\n                    y: 200,\n                    },\n                    {\n                    id: 'node3',\n                    x: 300,\n                    y: 300,\n                    },\n                ],\n                edges: [\n                    {\n                    id: 'edge1',\n                    target: 'node2',\n                    source: 'node1',\n                    },\n                ],\n            };\n    \n            const container = document.getElementById('container');\n            // Add a layout 及子元素\n            const layoutBox = document.createElement('div');\n            const layoutLeft = document.createElement('div');\n            const layoutRight = document.createElement('div');\n            // 设置layout样式\n            layoutBox.style = \"height:100%;display:flex\"\n            layoutLeft.style = \"width: 300px;height:100%;border:1px solid #ddd;border-radius:6px\";\n            layoutLeft.style = \"flex:1;height:100%;border:1px solid #ddd;border-radius:6px\";\n            // 添加样式元素到\n            // Add a selector to DOM\n            const selector = document.createElement('select');\n            selector.id = 'selector';\n            selector.style.border = 'none';\n            const selection1 = document.createElement('option');\n            selection1.value = 'default';\n            selection1.innerHTML = 'Default Mode';\n            const selection2 = document.createElement('option');\n            selection2.value = 'addNode';\n            selection2.innerHTML = 'Add Node (By clicking canvas)';\n            const selection3 = document.createElement('option');\n            selection3.value = 'addEdge';\n            selection3.innerHTML = 'Add Edge (By clicking two end nodes)';\n            selector.appendChild(selection1);\n            selector.appendChild(selection2);\n            selector.appendChild(selection3);\n            container.appendChild(selector);\n    \n            const width = container.scrollWidth;\n            const height = (container.scrollHeight || 500) - 30;\n            const graph = new G6.Graph({\n            container: 'container',\n            width,\n            height,\n            // The sets of behavior modes\n            modes: {\n                // Defualt mode\n                default: ['drag-node', 'click-select'],\n                // Adding node mode\n                addNode: ['click-add-node', 'click-select'],\n                // Adding edge mode\n                addEdge: ['click-add-edge', 'click-select'],\n            },\n            // The node styles in different states\n            nodeStateStyles: {\n                // The node styles in selected state\n                selected: {\n                stroke: '#666',\n                lineWidth: 2,\n                fill: 'steelblue',\n                },\n            },\n            });\n            graph.data(data);\n            graph.render();\n    \n            // Listen to the selector, change the mode when the selector is changed\n            selector.addEventListener('change', (e) => {\n            const value = e.target.value;\n            // change the behavior mode\n            graph.setMode(value);\n            });\n    \n            if (typeof window !== 'undefined')\n            window.onresize = () => {\n                if (!graph || graph.get('destroyed')) return;\n                if (!container || !container.scrollWidth || !container.scrollHeight) return;\n                graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n            };\n        })\n    },\n})\n</script>\n<style lang=\"less\" scoped>\n.antv {\n    height: 100%;\n    border: 1px solid #ddd;\n    border-radius: 6px;\n    #container {\n        height: 100%;\n    }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}