{"ast":null,"code":"import dfs from './dfs';\nimport getConnectedComponents, { detectStrongConnectComponents } from './connected-component';\nimport { getNeighbors } from './util';\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    dfs(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nexport var detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = getConnectedComponents(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = getNeighbors(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\nexport var detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = getNeighbors(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = detectStrongConnectComponents({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\nexport var detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\nexport default detectDirectedCycle;","map":{"version":3,"names":["dfs","getConnectedComponents","detectStrongConnectComponents","getNeighbors","detectDirectedCycle","graphData","cycle","_a","nodes","dfsParentMap","unvisitedSet","visitingSet","visitedSet","forEach","node","id","callbacks","enter","currentNode","current","previousNode","previous","currentCycleNode","previousCycleNode","leave","allowTraversal","nextNode","next","Object","keys","length","firsetUnVisitedKey","detectAllUndirectedCycle","nodeIds","include","_b","allCycles","components","_i","components_1","component","root","rootId","stack","parent_1","used","Set","curNode","pop","curNodeId","neighbors","edges","_loop_1","i","_c","neighborId","neighbor","find","push","has","cycleValid","cyclePath","p","size","findIndex","indexOf","index","add","detectAllDirectedCycle","path","blocked","B","idx2Node","node2Idx","unblock","thisNode","delete","n","clear","circuit","start","adjList","closed","nodeId","_loop_2","getMinComponentAdj","minCompIdx","minIdx","Infinity","comp","j","nodeIdx_1","filter","map","c","nodeIdx","subgraphNodes","sccs","scc","startNode","detectAllCycles","directed"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/es/detect-cycle.js"],"sourcesContent":["import dfs from './dfs';\nimport getConnectedComponents, { detectStrongConnectComponents } from './connected-component';\nimport { getNeighbors } from './util';\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    dfs(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nexport var detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = getConnectedComponents(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = getNeighbors(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\nexport var detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = getNeighbors(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = detectStrongConnectComponents({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\nexport var detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\nexport default detectDirectedCycle;"],"mappings":"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"},"metadata":{},"sourceType":"module"}