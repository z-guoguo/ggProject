{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { AST_TOKEN_TYPES, createEntity, STORAGE_CLASS } from '@antv/g-webgpu-core';\nimport { isTypedArray } from '../utils/is-typedarray';\n/* babel-plugin-inline-import './shaders/quad.vert.glsl' */\n\nvar quadVert = \"attribute vec3 a_Position;\\nattribute vec2 a_TexCoord;\\n\\nvarying vec2 v_TexCoord;\\n\\nvoid main() {\\n  gl_Position = vec4(a_Position, 1.0);\\n  v_TexCoord = a_TexCoord;\\n}\";\nvar textureId = 0;\nvar debug = false;\n/**\n * adaptor for regl.DrawCommand\n */\n\nvar ReglComputeModel = /*#__PURE__*/function () {\n  function ReglComputeModel(reGl, context) {\n    var _this = this;\n\n    _classCallCheck(this, ReglComputeModel);\n\n    this.reGl = reGl;\n    this.context = context;\n    this.entity = createEntity();\n    this.texFBO = void 0;\n    this.computeCommand = void 0;\n    this.textureCache = {};\n    this.outputTextureName = void 0;\n    this.swapOutputTextureName = void 0;\n    this.compiledPingpong = void 0;\n    this.dynamicPingpong = void 0;\n    var uniforms = {};\n    this.context.uniforms.forEach(function (uniform) {\n      var name = uniform.name,\n          type = uniform.type,\n          data = uniform.data,\n          isReferer = uniform.isReferer,\n          storageClass = uniform.storageClass; // store data with a 2D texture\n\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          _this.textureCache[name] = _this.calcDataTexture(name, type, data);\n          var _this$textureCache$na = _this.textureCache[name],\n              width = _this$textureCache$na.textureWidth,\n              isOutput = _this$textureCache$na.isOutput;\n          uniforms[\"\".concat(name, \"Size\")] = [width, width];\n\n          if (isOutput) {\n            _this.outputTextureName = name;\n\n            if (_this.context.needPingpong) {\n              _this.outputTextureName = \"\".concat(name, \"Output\");\n              _this.textureCache[_this.outputTextureName] = _this.calcDataTexture(name, type, data);\n            }\n          }\n        } else {\n          // @ts-ignore\n          _this.textureCache[name] = {\n            data: undefined\n          }; // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n\n          uniforms[\"\".concat(name, \"Size\")] = function () {\n            return (// @ts-ignore\n              data.compiledBundle.context.output.textureSize\n            );\n          };\n        }\n\n        uniforms[name] = function () {\n          if (debug) {\n            console.log(\"[\".concat(_this.entity, \"]: \").concat(name, \" \").concat(_this.textureCache[name].id));\n          }\n\n          return _this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (data && (Array.isArray(data) || isTypedArray(data)) && data.length > 16) {\n          // up to mat4 which includes 16 elements\n          throw new Error(\"invalid data type \".concat(type));\n        } // get uniform dynamically\n\n\n        uniforms[name] = function () {\n          return uniform.data;\n        };\n      }\n    });\n\n    var _this$getOuputDataTex = this.getOuputDataTexture(),\n        textureWidth = _this$getOuputDataTex.textureWidth,\n        texelCount = _this$getOuputDataTex.texelCount; // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n\n\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount; // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n\n    this.context.output.textureSize = [textureWidth, textureWidth];\n    var drawParams = {\n      attributes: {\n        a_Position: [[-1, 1, 0], [-1, -1, 0], [1, 1, 0], [1, -1, 0]],\n        a_TexCoord: [[0, 1], [0, 0], [1, 1], [1, 0]]\n      },\n      frag: \"#ifdef GL_FRAGMENT_PRECISION_HIGH\\n  precision highp float;\\n#else\\n  precision mediump float;\\n#endif\\n\".concat(this.context.shader),\n      uniforms: uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4\n    };\n    this.computeCommand = this.reGl(drawParams);\n  }\n\n  _createClass(ReglComputeModel, [{\n    key: \"run\",\n    value: function run() {\n      var _this2 = this;\n\n      if (this.context.maxIteration > 1 && this.context.needPingpong) {\n        this.compiledPingpong = true;\n      } // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n      // this.needPingpong =\n      //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n      // if (this.relativeOutputTextureNames.length) {\n      //   const { id, texture } = this.getOuputDataTexture();\n      //   this.relativeOutputTextureNames.forEach((name) => {\n      //     this.textureCache[name].id = id;\n      //     this.textureCache[name].texture = texture;\n      //   });\n      //   this.swap();\n      // }\n\n\n      if (this.compiledPingpong || this.dynamicPingpong) {\n        this.swap();\n      }\n\n      this.texFBO = this.reGl.framebuffer({\n        color: this.getOuputDataTexture().texture\n      });\n      this.texFBO.use(function () {\n        _this2.computeCommand();\n      });\n\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"readData\",\n    value: function () {\n      var _readData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var pixels, _this$getOuputDataTex2, originalDataLength, elementsPerTexel, _this$getOuputDataTex3, typedArrayConstructor, formattedPixels, i;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.reGl({\n                  framebuffer: this.texFBO\n                })(function () {\n                  pixels = _this3.reGl.read();\n                }); // @ts-ignore\n\n                if (!pixels) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _this$getOuputDataTex2 = this.getOuputDataTexture(), originalDataLength = _this$getOuputDataTex2.originalDataLength, elementsPerTexel = _this$getOuputDataTex2.elementsPerTexel, _this$getOuputDataTex3 = _this$getOuputDataTex2.typedArrayConstructor, typedArrayConstructor = _this$getOuputDataTex3 === void 0 ? Float32Array : _this$getOuputDataTex3;\n                formattedPixels = [];\n\n                if (elementsPerTexel !== 4) {\n                  for (i = 0; i < pixels.length; i += 4) {\n                    if (elementsPerTexel === 1) {\n                      formattedPixels.push(pixels[i]);\n                    } else if (elementsPerTexel === 2) {\n                      formattedPixels.push(pixels[i], pixels[i + 1]);\n                    } else {\n                      formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n                    }\n                  }\n                } else {\n                  // @ts-ignore\n                  formattedPixels = pixels;\n                } // 截取多余的部分\n                // @ts-ignore\n\n\n                return _context.abrupt(\"return\", new typedArrayConstructor(formattedPixels.slice(0, originalDataLength)));\n\n              case 6:\n                return _context.abrupt(\"return\", new Float32Array());\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function readData() {\n        return _readData.apply(this, arguments);\n      }\n\n      return readData;\n    }()\n  }, {\n    key: \"confirmInput\",\n    value: function confirmInput(model, inputName) {\n      var inputModel; // refer to self, same as pingpong\n\n      if (this.entity === model.entity) {\n        this.dynamicPingpong = true;\n        inputModel = this;\n      } else {\n        inputModel = model;\n      }\n\n      this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n      this.textureCache[inputName].texture = inputModel.getOuputDataTexture().texture;\n\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: confirm input \").concat(inputName, \" from model \").concat(inputModel.entity, \", \").concat(inputModel.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"updateUniform\",\n    value: function updateUniform() {// already get uniform's data dynamically when created, do nothing here\n    }\n  }, {\n    key: \"updateBuffer\",\n    value: function updateBuffer(bufferName, data) {\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0; // regenerate data texture\n\n      var buffer = this.context.uniforms.find(function (_ref) {\n        var name = _ref.name;\n        return name === bufferName;\n      });\n\n      if (buffer) {\n        var _this$calcDataTexture = this.calcDataTexture(bufferName, buffer.type, data),\n            texture = _this$calcDataTexture.texture,\n            paddingData = _this$calcDataTexture.data; // TODO: destroy outdated texture\n\n\n        this.textureCache[bufferName].data = paddingData;\n        this.textureCache[bufferName].texture = texture;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {// regl will destroy all resources\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      if (!this.swapOutputTextureName) {\n        this.createSwapOutputDataTexture();\n      }\n\n      if (this.compiledPingpong) {\n        var outputTextureUniformName = this.context.output.name;\n        this.textureCache[outputTextureUniformName].id = this.getOuputDataTexture().id;\n        this.textureCache[outputTextureUniformName].texture = this.getOuputDataTexture().texture;\n      }\n\n      var tmp = this.outputTextureName;\n      this.outputTextureName = this.swapOutputTextureName;\n      this.swapOutputTextureName = tmp;\n\n      if (debug) {\n        console.log(\"[\".concat(this.entity, \"]: after swap, output \").concat(this.getOuputDataTexture().id));\n      }\n    }\n  }, {\n    key: \"getOuputDataTexture\",\n    value: function getOuputDataTexture() {\n      return this.textureCache[this.outputTextureName];\n    }\n  }, {\n    key: \"createSwapOutputDataTexture\",\n    value: function createSwapOutputDataTexture() {\n      var texture = this.cloneDataTexture(this.getOuputDataTexture());\n      this.swapOutputTextureName = \"\".concat(this.entity, \"-swap\");\n      this.textureCache[this.swapOutputTextureName] = texture;\n    }\n  }, {\n    key: \"cloneDataTexture\",\n    value: function cloneDataTexture(texture) {\n      var data = texture.data,\n          textureWidth = texture.textureWidth;\n      return _objectSpread(_objectSpread({}, texture), {}, {\n        id: textureId++,\n        // @ts-ignore\n        texture: this.reGl.texture({\n          width: textureWidth,\n          height: textureWidth,\n          data: data,\n          type: 'float'\n        })\n      });\n    }\n  }, {\n    key: \"calcDataTexture\",\n    value: function calcDataTexture(name, type, data) {\n      var elementsPerTexel = 1;\n\n      if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n        elementsPerTexel = 4;\n      } // 用 0 补全不足 vec4 的部分\n\n\n      var paddingData = [];\n\n      for (var i = 0; i < data.length; i += elementsPerTexel) {\n        if (elementsPerTexel === 1) {\n          paddingData.push(data[i], 0, 0, 0);\n        } else if (elementsPerTexel === 2) {\n          paddingData.push(data[i], data[i + 1], 0, 0);\n        } else if (elementsPerTexel === 3) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], 0);\n        } else if (elementsPerTexel === 4) {\n          paddingData.push(data[i], data[i + 1], data[i + 2], data[i + 3]);\n        }\n      } // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n\n\n      var originalDataLength = data.length;\n      var texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n      var width = Math.ceil(Math.sqrt(texelCount));\n      var paddingTexelCount = width * width;\n\n      if (texelCount < paddingTexelCount) {\n        paddingData.push.apply(paddingData, _toConsumableArray(new Array((paddingTexelCount - texelCount) * 4).fill(0)));\n      }\n\n      var texture = this.reGl.texture({\n        width: width,\n        height: width,\n        data: paddingData,\n        type: 'float'\n      });\n      return {\n        id: textureId++,\n        data: paddingData,\n        originalDataLength: originalDataLength,\n        typedArrayConstructor: isTypedArray(data) ? data.constructor : undefined,\n        textureWidth: width,\n        texture: texture,\n        texelCount: texelCount,\n        elementsPerTexel: elementsPerTexel,\n        isOutput: name === this.context.output.name\n      };\n    }\n  }]);\n\n  return ReglComputeModel;\n}();\n\nexport { ReglComputeModel as default };","map":{"version":3,"mappings":"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","names":["AST_TOKEN_TYPES","createEntity","STORAGE_CLASS","isTypedArray","textureId","debug","ReglComputeModel","reGl","context","_classCallCheck","entity","texFBO","computeCommand","textureCache","outputTextureName","swapOutputTextureName","compiledPingpong","dynamicPingpong","uniforms","forEach","uniform","name","type","data","isReferer","storageClass","StorageBuffer","_this","calcDataTexture","width","textureWidth","isOutput","needPingpong","undefined","compiledBundle","output","textureSize","console","log","id","texture","Uniform","Array","isArray","length","Error","getOuputDataTexture","texelCount","u_OutputTextureSize","u_OutputTexelCount","drawParams","attributes","a_Position","a_TexCoord","frag","shader","vert","quadVert","primitive","count","maxIteration","swap","framebuffer","color","use","_this2","pixels","_this3","read","originalDataLength","elementsPerTexel","typedArrayConstructor","Float32Array","formattedPixels","i","push","slice","model","inputName","inputModel","bufferName","offset","buffer","find","paddingData","createSwapOutputDataTexture","outputTextureUniformName","tmp","cloneDataTexture","height","Vector4FloatArray","Math","ceil","sqrt","paddingTexelCount","_toConsumableArray","fill","constructor"],"sources":["../../src/webgl/ReglComputeModel.ts"],"sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DataType,\n  GLSLContext,\n  IComputeModel,\n  STORAGE_CLASS,\n} from '@antv/g-webgpu-core';\nimport regl from 'regl';\nimport { isTypedArray } from '../utils/is-typedarray';\nimport quadVert from './shaders/quad.vert.glsl';\n\ninterface DataTextureDescriptor {\n  id: number;\n  data:\n    | number\n    | number[]\n    | Float32Array\n    | Uint8Array\n    | Uint16Array\n    | Uint32Array\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | undefined;\n  textureWidth: number;\n  texture: regl.Texture2D;\n  texelCount: number;\n  originalDataLength: number;\n  elementsPerTexel: number;\n  typedArrayConstructor?: Function;\n  isOutput: boolean;\n}\n\nlet textureId = 0;\nconst debug = false;\n\n/**\n * adaptor for regl.DrawCommand\n */\nexport default class ReglComputeModel implements IComputeModel {\n  private entity = createEntity();\n  private texFBO: regl.Framebuffer2D;\n  private computeCommand: regl.DrawCommand;\n  private textureCache: {\n    [textureName: string]: DataTextureDescriptor;\n  } = {};\n  private outputTextureName: string;\n  private swapOutputTextureName: string;\n  private compiledPingpong: boolean;\n  private dynamicPingpong: boolean;\n\n  constructor(private reGl: regl.Regl, private context: GLSLContext) {\n    const uniforms: Record<string, any> = {};\n    this.context.uniforms.forEach((uniform) => {\n      const { name, type, data, isReferer, storageClass } = uniform;\n      // store data with a 2D texture\n      if (storageClass === STORAGE_CLASS.StorageBuffer) {\n        if (!isReferer) {\n          this.textureCache[name] = this.calcDataTexture(name, type, data!);\n          const { textureWidth: width, isOutput } = this.textureCache[name];\n          uniforms[`${name}Size`] = [width, width];\n\n          if (isOutput) {\n            this.outputTextureName = name;\n            if (this.context.needPingpong) {\n              this.outputTextureName = `${name}Output`;\n              this.textureCache[this.outputTextureName] = this.calcDataTexture(\n                name,\n                type,\n                data!,\n              );\n            }\n          }\n        } else {\n          // @ts-ignore\n          this.textureCache[name] = {\n            data: undefined,\n          };\n          // refer to another kernel's output,\n          // the referred kernel may not have been initialized, so we use dynamic way here\n          uniforms[`${name}Size`] = () =>\n            // @ts-ignore\n            data.compiledBundle.context.output.textureSize;\n        }\n\n        uniforms[name] = () => {\n          if (debug) {\n            console.log(\n              `[${this.entity}]: ${name} ${this.textureCache[name].id}`,\n            );\n          }\n          return this.textureCache[name].texture;\n        };\n      } else if (storageClass === STORAGE_CLASS.Uniform) {\n        if (\n          data &&\n          (Array.isArray(data) || isTypedArray(data)) &&\n          (data as ArrayLike<number>).length > 16\n        ) {\n          // up to mat4 which includes 16 elements\n          throw new Error(`invalid data type ${type}`);\n        }\n        // get uniform dynamically\n        uniforms[name] = () => uniform.data;\n      }\n    });\n\n    const { textureWidth, texelCount } = this.getOuputDataTexture();\n\n    // 传入 output 纹理尺寸和数据长度，便于多余的 texel 提前退出\n    uniforms.u_OutputTextureSize = [textureWidth, textureWidth];\n    uniforms.u_OutputTexelCount = texelCount;\n\n    // 保存在 Kernel 的上下文中，供其他 Kernel 引用\n    this.context.output.textureSize = [textureWidth!, textureWidth!];\n\n    const drawParams: regl.DrawConfig = {\n      attributes: {\n        a_Position: [\n          [-1, 1, 0],\n          [-1, -1, 0],\n          [1, 1, 0],\n          [1, -1, 0],\n        ],\n        a_TexCoord: [\n          [0, 1],\n          [0, 0],\n          [1, 1],\n          [1, 0],\n        ],\n      },\n      frag: `#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n${this.context.shader}`,\n      uniforms,\n      vert: quadVert,\n      // TODO: use a fullscreen triangle instead.\n      primitive: 'triangle strip',\n      count: 4,\n    };\n\n    this.computeCommand = this.reGl(drawParams);\n  }\n\n  public run() {\n    if (this.context.maxIteration > 1 && this.context.needPingpong) {\n      this.compiledPingpong = true;\n    }\n    // need pingpong when (@in@out and execute(10)) or use `setBinding('out', self)`\n    // this.needPingpong =\n    //   !!(this.context.maxIteration > 1 && this.context.needPingpong);\n\n    // if (this.relativeOutputTextureNames.length) {\n    //   const { id, texture } = this.getOuputDataTexture();\n    //   this.relativeOutputTextureNames.forEach((name) => {\n    //     this.textureCache[name].id = id;\n    //     this.textureCache[name].texture = texture;\n    //   });\n    //   this.swap();\n    // }\n\n    if (this.compiledPingpong || this.dynamicPingpong) {\n      this.swap();\n    }\n\n    this.texFBO = this.reGl.framebuffer({\n      color: this.getOuputDataTexture().texture,\n    });\n    this.texFBO.use(() => {\n      this.computeCommand();\n    });\n    if (debug) {\n      console.log(`[${this.entity}]: output ${this.getOuputDataTexture().id}`);\n    }\n  }\n\n  public async readData() {\n    let pixels: Uint8Array | Float32Array;\n    this.reGl({\n      framebuffer: this.texFBO,\n    })(() => {\n      pixels = this.reGl.read();\n    });\n\n    // @ts-ignore\n    if (pixels) {\n      const {\n        originalDataLength,\n        elementsPerTexel,\n        typedArrayConstructor = Float32Array,\n      } = this.getOuputDataTexture();\n\n      let formattedPixels = [];\n      if (elementsPerTexel !== 4) {\n        for (let i = 0; i < pixels.length; i += 4) {\n          if (elementsPerTexel === 1) {\n            formattedPixels.push(pixels[i]);\n          } else if (elementsPerTexel === 2) {\n            formattedPixels.push(pixels[i], pixels[i + 1]);\n          } else {\n            formattedPixels.push(pixels[i], pixels[i + 1], pixels[i + 2]);\n          }\n        }\n      } else {\n        // @ts-ignore\n        formattedPixels = pixels;\n      }\n\n      // 截取多余的部分\n      // @ts-ignore\n      return new typedArrayConstructor(\n        formattedPixels.slice(0, originalDataLength),\n      );\n    }\n\n    return new Float32Array();\n  }\n\n  public confirmInput(model: IComputeModel, inputName: string) {\n    let inputModel: ReglComputeModel;\n    // refer to self, same as pingpong\n    if (this.entity === (model as ReglComputeModel).entity) {\n      this.dynamicPingpong = true;\n      inputModel = this;\n    } else {\n      inputModel = model as ReglComputeModel;\n    }\n\n    this.textureCache[inputName].id = inputModel.getOuputDataTexture().id;\n    this.textureCache[\n      inputName\n    ].texture = inputModel.getOuputDataTexture().texture;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: confirm input ${inputName} from model ${\n          inputModel.entity\n        }, ${(inputModel as ReglComputeModel).getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  public updateUniform() {\n    // already get uniform's data dynamically when created, do nothing here\n  }\n\n  public updateBuffer(\n    bufferName: string,\n    data:\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n    offset: number = 0,\n  ) {\n    // regenerate data texture\n    const buffer = this.context.uniforms.find(\n      ({ name }) => name === bufferName,\n    );\n    if (buffer) {\n      const { texture, data: paddingData } = this.calcDataTexture(\n        bufferName,\n        buffer.type,\n        data,\n      );\n\n      // TODO: destroy outdated texture\n      this.textureCache[bufferName].data = paddingData;\n      this.textureCache[bufferName].texture = texture;\n    }\n  }\n\n  public destroy() {\n    // regl will destroy all resources\n  }\n\n  private swap() {\n    if (!this.swapOutputTextureName) {\n      this.createSwapOutputDataTexture();\n    }\n\n    if (this.compiledPingpong) {\n      const outputTextureUniformName = this.context.output.name;\n      this.textureCache[\n        outputTextureUniformName\n      ].id = this.getOuputDataTexture().id;\n      this.textureCache[\n        outputTextureUniformName\n      ].texture = this.getOuputDataTexture().texture;\n    }\n\n    const tmp = this.outputTextureName;\n    this.outputTextureName = this.swapOutputTextureName;\n    this.swapOutputTextureName = tmp;\n\n    if (debug) {\n      console.log(\n        `[${this.entity}]: after swap, output ${this.getOuputDataTexture().id}`,\n      );\n    }\n  }\n\n  private getOuputDataTexture() {\n    return this.textureCache[this.outputTextureName];\n  }\n\n  private createSwapOutputDataTexture() {\n    const texture = this.cloneDataTexture(this.getOuputDataTexture());\n    this.swapOutputTextureName = `${this.entity}-swap`;\n    this.textureCache[this.swapOutputTextureName] = texture;\n  }\n\n  private cloneDataTexture(texture: DataTextureDescriptor) {\n    const { data, textureWidth } = texture;\n    return {\n      ...texture,\n      id: textureId++,\n      // @ts-ignore\n      texture: this.reGl.texture({\n        width: textureWidth,\n        height: textureWidth,\n        data,\n        type: 'float',\n      }),\n    };\n  }\n\n  private calcDataTexture(\n    name: string,\n    type: DataType,\n    data:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array,\n  ) {\n    let elementsPerTexel = 1;\n    if (type === AST_TOKEN_TYPES.Vector4FloatArray) {\n      elementsPerTexel = 4;\n    }\n\n    // 用 0 补全不足 vec4 的部分\n    const paddingData: number[] = [];\n    for (let i = 0; i < (data as number[]).length; i += elementsPerTexel) {\n      if (elementsPerTexel === 1) {\n        paddingData.push((data as number[])[i], 0, 0, 0);\n      } else if (elementsPerTexel === 2) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          0,\n          0,\n        );\n      } else if (elementsPerTexel === 3) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          0,\n        );\n      } else if (elementsPerTexel === 4) {\n        paddingData.push(\n          (data as number[])[i],\n          (data as number[])[i + 1],\n          (data as number[])[i + 2],\n          (data as number[])[i + 3],\n        );\n      }\n    }\n\n    // 使用纹理存储，例如 Array(8) 使用 3 * 3 纹理，末尾空白使用 0 填充\n    const originalDataLength = (data as ArrayLike<number>).length;\n    const texelCount = Math.ceil(originalDataLength / elementsPerTexel);\n    const width = Math.ceil(Math.sqrt(texelCount));\n    const paddingTexelCount = width * width;\n    if (texelCount < paddingTexelCount) {\n      paddingData.push(\n        ...new Array((paddingTexelCount - texelCount) * 4).fill(0),\n      );\n    }\n\n    const texture = this.reGl.texture({\n      width,\n      height: width,\n      data: paddingData,\n      type: 'float',\n    });\n\n    return {\n      id: textureId++,\n      data: paddingData,\n      originalDataLength,\n      typedArrayConstructor: isTypedArray(data) ? data!.constructor : undefined,\n      textureWidth: width,\n      texture,\n      texelCount,\n      elementsPerTexel,\n      isOutput: name === this.context.output.name,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}