{"ast":null,"code":"import isPointInPolygon from './point-in-polygon';\nimport getLineIntersect from './get-line-intersect';\nimport { each } from '@antv/util';\n\nfunction parseToLines(points) {\n  var lines = [];\n  var count = points.length;\n\n  for (var i = 0; i < count - 1; i++) {\n    var point = points[i];\n    var next = points[i + 1];\n    lines.push({\n      from: {\n        x: point[0],\n        y: point[1]\n      },\n      to: {\n        x: next[0],\n        y: next[1]\n      }\n    });\n  }\n\n  if (lines.length > 1) {\n    var first = points[0];\n    var last = points[count - 1];\n    lines.push({\n      from: {\n        x: last[0],\n        y: last[1]\n      },\n      to: {\n        x: first[0],\n        y: first[1]\n      }\n    });\n  }\n\n  return lines;\n}\n\nfunction lineIntersectPolygon(lines, line) {\n  var isIntersect = false;\n  each(lines, function (l) {\n    if (getLineIntersect(l.from, l.to, line.from, line.to)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}\n\nfunction getBBox(points) {\n  var xArr = points.map(function (p) {\n    return p[0];\n  });\n  var yArr = points.map(function (p) {\n    return p[1];\n  });\n  return {\n    minX: Math.min.apply(null, xArr),\n    maxX: Math.max.apply(null, xArr),\n    minY: Math.min.apply(null, yArr),\n    maxY: Math.max.apply(null, yArr)\n  };\n}\n\nfunction intersectBBox(box1, box2) {\n  return !(box2.minX > box1.maxX || box2.maxX < box1.minX || box2.minY > box1.maxY || box2.maxY < box1.minY);\n}\n\nexport default function isPolygonsIntersect(points1, points2) {\n  // 空数组，或者一个点返回 false\n  if (points1.length < 2 || points2.length < 2) {\n    return false;\n  }\n\n  var bbox1 = getBBox(points1);\n  var bbox2 = getBBox(points2); // 判定包围盒是否相交，比判定点是否在多边形内要快的多，可以筛选掉大多数情况\n\n  if (!intersectBBox(bbox1, bbox2)) {\n    return false;\n  }\n\n  var isIn = false; // 判定点是否在多边形内部，一旦有一个点在另一个多边形内，则返回\n\n  each(points2, function (point) {\n    if (isPointInPolygon(points1, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n\n  if (isIn) {\n    return true;\n  } // 两个多边形都需要判定\n\n\n  each(points1, function (point) {\n    if (isPointInPolygon(points2, point[0], point[1])) {\n      isIn = true;\n      return false;\n    }\n  });\n\n  if (isIn) {\n    return true;\n  }\n\n  var lines1 = parseToLines(points1);\n  var lines2 = parseToLines(points2);\n  var isIntersect = false;\n  each(lines2, function (line) {\n    if (lineIntersectPolygon(lines1, line)) {\n      isIntersect = true;\n      return false;\n    }\n  });\n  return isIntersect;\n}","map":{"version":3,"mappings":"AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,SAAQC,IAAR,QAAmB,YAAnB;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA4B;EAC1B,IAAMC,KAAK,GAAG,EAAd;EACA,IAAMC,KAAK,GAAGF,MAAM,CAACG,MAArB;;EACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,GAAG,CAA3B,EAA8BE,CAAC,EAA/B,EAAmC;IACjC,IAAMC,KAAK,GAAGL,MAAM,CAACI,CAAD,CAApB;IACA,IAAME,IAAI,GAAGN,MAAM,CAACI,CAAC,GAAG,CAAL,CAAnB;IACAH,KAAK,CAACM,IAAN,CAAW;MACTC,IAAI,EAAE;QACJC,CAAC,EAAEJ,KAAK,CAAC,CAAD,CADJ;QAEJK,CAAC,EAAEL,KAAK,CAAC,CAAD;MAFJ,CADG;MAKTM,EAAE,EAAE;QACFF,CAAC,EAAEH,IAAI,CAAC,CAAD,CADL;QAEFI,CAAC,EAAEJ,IAAI,CAAC,CAAD;MAFL;IALK,CAAX;EAUD;;EACD,IAAIL,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;IACpB,IAAMS,KAAK,GAAGZ,MAAM,CAAC,CAAD,CAApB;IACA,IAAMa,IAAI,GAAGb,MAAM,CAACE,KAAK,GAAG,CAAT,CAAnB;IACAD,KAAK,CAACM,IAAN,CAAW;MACTC,IAAI,EAAE;QACJC,CAAC,EAAEI,IAAI,CAAC,CAAD,CADH;QAEJH,CAAC,EAAEG,IAAI,CAAC,CAAD;MAFH,CADG;MAKTF,EAAE,EAAE;QACFF,CAAC,EAAEG,KAAK,CAAC,CAAD,CADN;QAEFF,CAAC,EAAEE,KAAK,CAAC,CAAD;MAFN;IALK,CAAX;EAUD;;EACD,OAAOX,KAAP;AACD;;AAED,SAASa,oBAAT,CAA8Bb,KAA9B,EAAqCc,IAArC,EAAyC;EACvC,IAAIC,WAAW,GAAG,KAAlB;EACAlB,IAAI,CAACG,KAAD,EAAQ,aAAC;IACX,IAAIJ,gBAAgB,CAACoB,CAAC,CAACT,IAAH,EAASS,CAAC,CAACN,EAAX,EAAeI,IAAI,CAACP,IAApB,EAA0BO,IAAI,CAACJ,EAA/B,CAApB,EAAwD;MACtDK,WAAW,GAAG,IAAd;MACA,OAAO,KAAP;IACD;EACF,CALG,CAAJ;EAMA,OAAOA,WAAP;AACD;;AASD,SAASE,OAAT,CAAiBlB,MAAjB,EAAuB;EACrB,IAAMmB,IAAI,GAAGnB,MAAM,CAACoB,GAAP,CAAW,aAAC;IAAI,QAAC,CAAC,CAAD,CAAD;EAAI,CAApB,CAAb;EACA,IAAMC,IAAI,GAAGrB,MAAM,CAACoB,GAAP,CAAW,aAAC;IAAI,QAAC,CAAC,CAAD,CAAD;EAAI,CAApB,CAAb;EACA,OAAO;IACLE,IAAI,EAAEC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBN,IAArB,CADD;IAELO,IAAI,EAAEH,IAAI,CAACI,GAAL,CAASF,KAAT,CAAe,IAAf,EAAqBN,IAArB,CAFD;IAGLS,IAAI,EAAEL,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBJ,IAArB,CAHD;IAILQ,IAAI,EAAEN,IAAI,CAACI,GAAL,CAASF,KAAT,CAAe,IAAf,EAAqBJ,IAArB;EAJD,CAAP;AAMD;;AAED,SAASS,aAAT,CAAuBC,IAAvB,EAAkCC,IAAlC,EAA2C;EACzC,OAAO,EAAEA,IAAI,CAACV,IAAL,GAAYS,IAAI,CAACL,IAAjB,IAAyBM,IAAI,CAACN,IAAL,GAAYK,IAAI,CAACT,IAA1C,IAAkDU,IAAI,CAACJ,IAAL,GAAYG,IAAI,CAACF,IAAnE,IAA2EG,IAAI,CAACH,IAAL,GAAYE,IAAI,CAACH,IAA9F,CAAP;AACD;;AAED,eAAc,SAAUK,mBAAV,CAA8BC,OAA9B,EAAuCC,OAAvC,EAA8C;EAC1D;EACA,IAAID,OAAO,CAAC/B,MAAR,GAAiB,CAAjB,IAAsBgC,OAAO,CAAChC,MAAR,GAAiB,CAA3C,EAA8C;IAC5C,OAAO,KAAP;EACD;;EAED,IAAMiC,KAAK,GAAGlB,OAAO,CAACgB,OAAD,CAArB;EACA,IAAMG,KAAK,GAAGnB,OAAO,CAACiB,OAAD,CAArB,CAP0D,CAQ1D;;EACA,IAAI,CAACL,aAAa,CAACM,KAAD,EAAQC,KAAR,CAAlB,EAAkC;IAChC,OAAO,KAAP;EACD;;EAED,IAAIC,IAAI,GAAG,KAAX,CAb0D,CAc1D;;EACAxC,IAAI,CAACqC,OAAD,EAAU,iBAAK;IACjB,IAAIvC,gBAAgB,CAACsC,OAAD,EAAU7B,KAAK,CAAC,CAAD,CAAf,EAAoBA,KAAK,CAAC,CAAD,CAAzB,CAApB,EAAmD;MACjDiC,IAAI,GAAG,IAAP;MACA,OAAO,KAAP;IACD;EACF,CALG,CAAJ;;EAMA,IAAIA,IAAJ,EAAU;IACR,OAAO,IAAP;EACD,CAvByD,CAwB1D;;;EACAxC,IAAI,CAACoC,OAAD,EAAU,iBAAK;IACjB,IAAItC,gBAAgB,CAACuC,OAAD,EAAU9B,KAAK,CAAC,CAAD,CAAf,EAAoBA,KAAK,CAAC,CAAD,CAAzB,CAApB,EAAmD;MACjDiC,IAAI,GAAG,IAAP;MACA,OAAO,KAAP;IACD;EACF,CALG,CAAJ;;EAMA,IAAIA,IAAJ,EAAU;IACR,OAAO,IAAP;EACD;;EAED,IAAMC,MAAM,GAAGxC,YAAY,CAACmC,OAAD,CAA3B;EACA,IAAMM,MAAM,GAAGzC,YAAY,CAACoC,OAAD,CAA3B;EACA,IAAInB,WAAW,GAAG,KAAlB;EACAlB,IAAI,CAAC0C,MAAD,EAAS,gBAAI;IACf,IAAI1B,oBAAoB,CAACyB,MAAD,EAASxB,IAAT,CAAxB,EAAwC;MACtCC,WAAW,GAAG,IAAd;MACA,OAAO,KAAP;IACD;EACF,CALG,CAAJ;EAMA,OAAOA,WAAP;AACD","names":["isPointInPolygon","getLineIntersect","each","parseToLines","points","lines","count","length","i","point","next","push","from","x","y","to","first","last","lineIntersectPolygon","line","isIntersect","l","getBBox","xArr","map","yArr","minX","Math","min","apply","maxX","max","minY","maxY","intersectBBox","box1","box2","isPolygonsIntersect","points1","points2","bbox1","bbox2","isIn","lines1","lines2"],"sourceRoot":"","sources":["../src/is-polygons-intersect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}