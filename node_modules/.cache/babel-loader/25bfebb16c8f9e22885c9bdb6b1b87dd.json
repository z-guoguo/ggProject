{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nexport function merge(a, b) {\n  // Checks for truthy values on both arrays\n  if (!a && !b) {\n    throw new Error('Please specify valid arguments for parameters a and b.');\n  } // Checks for truthy values or empty arrays on each argument\n  // to avoid the unnecessary construction of a new array and\n  // the type comparison\n\n\n  if (!b || b.length === 0) {\n    return a;\n  }\n\n  if (!a || a.length === 0) {\n    return b;\n  } // Make sure that both typed arrays are of the same type\n\n\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    throw new Error('The types of the two arguments passed for parameters a and b do not match.');\n  } // @ts-ignore\n\n\n  var c = new a.constructor(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n  return c;\n}","map":{"version":3,"mappings":";AAAA,OAAO,SAASA,KAAT,CAAeC,CAAf,EAAgCC,CAAhC,EAAiD;EACtD;EACA,IAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc;IACZ,MAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;EAHoD,EAMtD;EACA;EACA;;;EACA,IAAI,CAACD,CAAD,IAAMA,CAAC,CAACE,MAAFF,KAAa,CAAvB,EAA0B;IACxB,OAAOD,CAAP;EACD;;EACD,IAAI,CAACA,CAAD,IAAMA,CAAC,CAACG,MAAFH,KAAa,CAAvB,EAA0B;IACxB,OAAOC,CAAP;EAboD,EAgBtD;;;EACA,IAAIG,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BJ,CAA/BI,MAAsCA,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BH,CAA/BG,CAA1C,EAA6E;IAC3E,MAAM,IAAIF,KAAJ,CACJ,4EADI,CAAN;EAlBoD,EAuBtD;;;EACA,IAAMM,CAAC,GAAG,IAAIR,CAAC,CAACS,WAAN,CAAkBT,CAAC,CAACG,MAAFH,GAAWC,CAAC,CAACE,MAA/B,CAAV;EACAK,CAAC,CAACE,GAAFF,CAAMR,CAANQ;EACAA,CAAC,CAACE,GAAFF,CAAMP,CAANO,EAASR,CAAC,CAACG,MAAXK;EAEA,OAAOA,CAAP;AACD","names":["merge","a","b","Error","length","Object","prototype","toString","call","c","constructor","set"],"sources":["../../src/utils/typedarray.ts"],"sourcesContent":["export function merge(a: Float32Array, b: Float32Array) {\n  // Checks for truthy values on both arrays\n  if (!a && !b) {\n    throw new Error('Please specify valid arguments for parameters a and b.');\n  }\n\n  // Checks for truthy values or empty arrays on each argument\n  // to avoid the unnecessary construction of a new array and\n  // the type comparison\n  if (!b || b.length === 0) {\n    return a;\n  }\n  if (!a || a.length === 0) {\n    return b;\n  }\n\n  // Make sure that both typed arrays are of the same type\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    throw new Error(\n      'The types of the two arguments passed for parameters a and b do not match.',\n    );\n  }\n\n  // @ts-ignore\n  const c = new a.constructor(a.length + b.length);\n  c.set(a);\n  c.set(b, a.length);\n\n  return c;\n}\n"]},"metadata":{},"sourceType":"module"}