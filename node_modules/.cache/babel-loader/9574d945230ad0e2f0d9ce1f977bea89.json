{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\n\nvar AbstractShape =\n/** @class */\nfunction (_super) {\n  __extends(AbstractShape, _super);\n\n  function AbstractShape(cfg) {\n    return _super.call(this, cfg) || this;\n  } // 是否在包围盒内\n\n\n  AbstractShape.prototype._isInBBox = function (refX, refY) {\n    var bbox = this.getBBox();\n    return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n   */\n\n\n  AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n\n    this.clearCacheBBox();\n  }; // 计算包围盒时，需要缓存，这是一个高频的操作\n\n\n  AbstractShape.prototype.getBBox = function () {\n    var bbox = this.cfg.bbox;\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set('bbox', bbox);\n    }\n\n    return bbox;\n  }; // 计算相对于画布的包围盒\n\n\n  AbstractShape.prototype.getCanvasBBox = function () {\n    var canvasBBox = this.cfg.canvasBBox;\n\n    if (!canvasBBox) {\n      canvasBBox = this.calculateCanvasBBox();\n      this.set('canvasBBox', canvasBBox);\n    }\n\n    return canvasBBox;\n  };\n\n  AbstractShape.prototype.applyMatrix = function (matrix) {\n    _super.prototype.applyMatrix.call(this, matrix); // 清理掉缓存的包围盒\n\n\n    this.set('canvasBBox', null);\n  };\n  /**\n   * 计算相对于画布的包围盒，默认等同于 bbox\n   * @return {BBox} 包围盒\n   */\n\n\n  AbstractShape.prototype.calculateCanvasBBox = function () {\n    var bbox = this.getBBox();\n    var totalMatrix = this.getTotalMatrix();\n    var minX = bbox.minX,\n        minY = bbox.minY,\n        maxX = bbox.maxX,\n        maxY = bbox.maxY;\n\n    if (totalMatrix) {\n      var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n      var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n      var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n      var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n      minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n      maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n    }\n\n    var attrs = this.attrs; // 如果存在 shadow 则计算 shadow\n\n    if (attrs.shadowColor) {\n      var _a = attrs.shadowBlur,\n          shadowBlur = _a === void 0 ? 0 : _a,\n          _b = attrs.shadowOffsetX,\n          shadowOffsetX = _b === void 0 ? 0 : _b,\n          _c = attrs.shadowOffsetY,\n          shadowOffsetY = _c === void 0 ? 0 : _c;\n      var shadowLeft = minX - shadowBlur + shadowOffsetX;\n      var shadowRight = maxX + shadowBlur + shadowOffsetX;\n      var shadowTop = minY - shadowBlur + shadowOffsetY;\n      var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n      minX = Math.min(minX, shadowLeft);\n      maxX = Math.max(maxX, shadowRight);\n      minY = Math.min(minY, shadowTop);\n      maxY = Math.max(maxY, shadowBottom);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  /**\n   * @protected\n   * 清理缓存的 bbox\n   */\n\n\n  AbstractShape.prototype.clearCacheBBox = function () {\n    this.set('bbox', null);\n    this.set('canvasBBox', null);\n  }; // 实现接口\n\n\n  AbstractShape.prototype.isClipShape = function () {\n    return this.get('isClipShape');\n  };\n  /**\n   * @protected\n   * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n   * @param  {number}  refX 相对于图形的坐标 x\n   * @param  {number}  refY 相对于图形的坐标 Y\n   * @return {boolean} 点是否在图形内部\n   */\n\n\n  AbstractShape.prototype.isInShape = function (refX, refY) {\n    return false;\n  };\n  /**\n   * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n   * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n   * @return {Boolean} 仅仅使用 BBox 进行拾取\n   */\n\n\n  AbstractShape.prototype.isOnlyHitBox = function () {\n    return false;\n  }; // 不同的 Shape 各自实现\n\n\n  AbstractShape.prototype.isHit = function (x, y) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    var vec = [x, y, 1];\n    vec = this.invertFromMatrix(vec);\n    var refX = vec[0],\n        refY = vec[1];\n\n    var inBBox = this._isInBBox(refX, refY); // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n\n\n    if (this.isOnlyHitBox()) {\n      return inBBox;\n    } // 被裁减掉的和不在包围盒内的不进行计算\n\n\n    if (inBBox && !this.isClipped(refX, refY)) {\n      // 对图形进行拾取判断\n      if (this.isInShape(refX, refY)) {\n        return true;\n      } // 对起始箭头进行拾取判断\n\n\n      if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n        return true;\n      } // 对结束箭头进行拾取判断\n\n\n      if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return AbstractShape;\n}(Element);\n\nexport default AbstractShape;","map":{"version":3,"mappings":"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","names":["Element","multiplyVec2","__extends","cfg","_super","AbstractShape","refX","refY","bbox","getBBox","minX","maxX","minY","maxY","targetAttrs","afterAttrsChange","call","clearCacheBBox","calculateBBox","set","canvasBBox","calculateCanvasBBox","matrix","applyMatrix","totalMatrix","getTotalMatrix","topLeft","topRight","bottomLeft","bottomRight","Math","min","max","attrs","shadowColor","_a","_b","shadowOffsetX","_c","shadowOffsetY","shadowLeft","shadowBlur","shadowRight","shadowTop","shadowBottom","x","y","width","height","get","startArrowShape","endArrowShape","vec","invertFromMatrix","inBBox","_isInBBox","isOnlyHitBox","isClipped","isInShape","isHit"],"sourceRoot":"","sources":["../../src/abstract/shape.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}