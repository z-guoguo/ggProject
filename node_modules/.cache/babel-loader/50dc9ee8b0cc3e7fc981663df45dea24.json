{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nvar tmpVecA = vec3.create();\nvar tmpVecB = vec3.create();\nvar tmpVecC = vec3.create();\nvar tmpVecD = vec3.create();\nvar tmpVecE = vec3.create();\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\n\nexport var Ray = /*#__PURE__*/function () {\n  function Ray(origin, direction) {\n    _classCallCheck(this, Ray);\n\n    this.origin = void 0;\n    this.direction = void 0;\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  _createClass(Ray, [{\n    key: \"intersectsAABB\",\n    value: function intersectsAABB(aabb, intersection) {\n      return intersection ? this.intersectAABBWithIntersection(aabb, intersection) : this.intersectsAABBWithoutIntersection(aabb);\n    }\n  }, {\n    key: \"intersectsSphere\",\n    value: function intersectsSphere(sphere, intersection) {\n      var m = vec3.sub(tmpVecA, this.origin, sphere.center);\n      vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n      var b = vec3.dot(m, tmpVecB);\n      var c = vec3.dot(m, m) - sphere.radius * sphere.radius; // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n\n      if (c > 0 && b > 0) {\n        return null;\n      }\n\n      var discr = b * b - c; // a negative discriminant corresponds to ray missing sphere\n\n      if (discr < 0) {\n        return false;\n      } // ray intersects sphere, compute smallest t value of intersection\n\n\n      var t = Math.abs(-b - Math.sqrt(discr)); // if t is negative, ray started inside sphere so clamp t to zero\n\n      if (intersection) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n      }\n\n      return true;\n    }\n  }, {\n    key: \"intersectsPlane\",\n    value: function intersectsPlane(plane, intersection) {\n      var t = (plane.distance - vec3.dot(plane.normal, this.origin)) / vec3.dot(plane.normal, this.direction);\n      var intersects = t >= 0;\n\n      if (intersects && intersection) {\n        vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n      }\n\n      return intersects;\n    }\n    /**\n     * faster than implements like Three.js\n     * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n     */\n\n  }, {\n    key: \"intersectsAABBWithoutIntersection\",\n    value: function intersectsAABBWithoutIntersection(aabb) {\n      var diff = tmpVecA;\n      var cross = tmpVecB;\n      var prod = tmpVecC;\n      var absDiff = tmpVecD;\n      var absDir = tmpVecE;\n      var rayDir = this.direction;\n      vec3.sub(diff, this.origin, aabb.center);\n      vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n      vec3.mul(prod, diff, rayDir);\n\n      if (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0 || absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0 || absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0) {\n        return false;\n      }\n\n      vec3.set(absDir, Math.abs(rayDir[0]), Math.abs(rayDir[1]), Math.abs(rayDir[2]));\n      vec3.cross(cross, rayDir, diff);\n      vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n      return !(cross[0] > aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] || cross[1] > aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] || cross[2] > aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]);\n    }\n  }, {\n    key: \"intersectAABBWithIntersection\",\n    value: function intersectAABBWithIntersection(aabb, intersection) {\n      var tMin = vec3.copy(vec3.create(), aabb.getMin());\n      vec3.sub(tMin, tMin, this.origin);\n      var tMax = vec3.copy(vec3.create(), aabb.getMax());\n      vec3.sub(tMax, tMax, this.origin);\n      var dir = this.direction; // Ensure that we are not dividing it by zero\n\n      if (dir[0] === 0) {\n        tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[0] /= dir[0];\n        tMax[0] /= dir[0];\n      }\n\n      if (dir[1] === 0) {\n        tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[1] /= dir[1];\n        tMax[1] /= dir[1];\n      }\n\n      if (dir[2] === 0) {\n        tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n        tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      } else {\n        tMin[2] /= dir[2];\n        tMax[2] /= dir[2];\n      }\n\n      var realMin = vec3.set(tmpVecC, Math.min(tMin[0], tMax[0]), Math.min(tMin[1], tMax[1]), Math.min(tMin[2], tMax[2]));\n      var realMax = vec3.set(tmpVecD, Math.max(tMin[0], tMax[0]), Math.max(tMin[1], tMax[1]), Math.max(tMin[2], tMax[2]));\n      var minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n      var maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n      var intersects = minMax >= maxMin && maxMin >= 0;\n\n      if (intersects) {\n        vec3.copy(intersection, this.direction);\n        vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n      }\n\n      return intersects;\n    }\n  }]);\n\n  return Ray;\n}();","map":{"version":3,"mappings":"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","names":["vec3","tmpVecA","create","tmpVecB","tmpVecC","tmpVecD","tmpVecE","Ray","origin","direction","_classCallCheck","fromValues","_createClass","key","value","aabb","intersection","intersectAABBWithIntersection","intersectsAABBWithoutIntersection","sphere","m","sub","center","normalize","copy","b","dot","c","radius","discr","t","Math","abs","sqrt","scaleAndAdd","plane","distance","normal","intersects","diff","cross","prod","absDiff","absDir","rayDir","set","mul","halfExtents","tMin","getMin","tMax","getMax","dir","Number","MAX_VALUE","realMin","min","realMax","max","minMax","maxMin"],"sources":["../../src/shape/Ray.ts"],"sourcesContent":["import { vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { BoundingSphere } from './BoundingSphere';\nimport { Plane } from './Plane';\n\nconst tmpVecA = vec3.create();\nconst tmpVecB = vec3.create();\nconst tmpVecC = vec3.create();\nconst tmpVecD = vec3.create();\nconst tmpVecE = vec3.create();\n\n/**\n * 包含求交方法：\n * * intersectsShape(Shape, intersection) 返回交点和求交结果\n * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Ray.js\n */\nexport class Ray {\n  public origin: vec3;\n  public direction: vec3;\n\n  constructor(origin: vec3, direction: vec3) {\n    this.origin = origin || vec3.create();\n    this.direction = direction || vec3.fromValues(0, 0, -1);\n  }\n\n  public intersectsAABB(aabb: AABB, intersection?: vec3) {\n    return intersection\n      ? this.intersectAABBWithIntersection(aabb, intersection)\n      : this.intersectsAABBWithoutIntersection(aabb);\n  }\n\n  public intersectsSphere(sphere: BoundingSphere, intersection?: vec3) {\n    const m = vec3.sub(tmpVecA, this.origin, sphere.center);\n    vec3.normalize(tmpVecB, vec3.copy(tmpVecB, this.direction));\n    const b = vec3.dot(m, tmpVecB);\n    const c = vec3.dot(m, m) - sphere.radius * sphere.radius;\n\n    // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)\n    if (c > 0 && b > 0) {\n      return null;\n    }\n\n    const discr = b * b - c;\n    // a negative discriminant corresponds to ray missing sphere\n    if (discr < 0) {\n      return false;\n    }\n\n    // ray intersects sphere, compute smallest t value of intersection\n    const t = Math.abs(-b - Math.sqrt(discr));\n\n    // if t is negative, ray started inside sphere so clamp t to zero\n    if (intersection) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, t);\n    }\n\n    return true;\n  }\n\n  public intersectsPlane(plane: Plane, intersection?: vec3) {\n    const t =\n      (plane.distance - vec3.dot(plane.normal, this.origin)) /\n      vec3.dot(plane.normal, this.direction);\n    const intersects = t >= 0;\n    if (intersects && intersection) {\n      vec3.scaleAndAdd(intersection, this.origin, this.direction, t);\n    }\n\n    return intersects;\n  }\n\n  /**\n   * faster than implements like Three.js\n   * @see https://github.com/playcanvas/engine/blob/master/src/shape/bounding-box.js#L161\n   */\n  private intersectsAABBWithoutIntersection(aabb: AABB) {\n    const diff = tmpVecA;\n    const cross = tmpVecB;\n    const prod = tmpVecC;\n    const absDiff = tmpVecD;\n    const absDir = tmpVecE;\n    const rayDir = this.direction;\n\n    vec3.sub(diff, this.origin, aabb.center);\n    vec3.set(absDiff, Math.abs(diff[0]), Math.abs(diff[1]), Math.abs(diff[2]));\n    vec3.mul(prod, diff, rayDir);\n\n    if (\n      (absDiff[0] > aabb.halfExtents[0] && prod[0] >= 0) ||\n      (absDiff[1] > aabb.halfExtents[1] && prod[1] >= 0) ||\n      (absDiff[2] > aabb.halfExtents[2] && prod[2] >= 0)\n    ) {\n      return false;\n    }\n\n    vec3.set(\n      absDir,\n      Math.abs(rayDir[0]),\n      Math.abs(rayDir[1]),\n      Math.abs(rayDir[2]),\n    );\n    vec3.cross(cross, rayDir, diff);\n    vec3.set(cross, Math.abs(cross[0]), Math.abs(cross[1]), Math.abs(cross[2]));\n\n    return !(\n      cross[0] >\n        aabb.halfExtents[1] * absDir[2] + aabb.halfExtents[2] * absDir[1] ||\n      cross[1] >\n        aabb.halfExtents[0] * absDir[2] + aabb.halfExtents[2] * absDir[0] ||\n      cross[2] >\n        aabb.halfExtents[0] * absDir[1] + aabb.halfExtents[1] * absDir[0]\n    );\n  }\n\n  private intersectAABBWithIntersection(aabb: AABB, intersection: vec3) {\n    const tMin = vec3.copy(vec3.create(), aabb.getMin());\n    vec3.sub(tMin, tMin, this.origin);\n    const tMax = vec3.copy(vec3.create(), aabb.getMax());\n    vec3.sub(tMax, tMax, this.origin);\n    const dir = this.direction;\n\n    // Ensure that we are not dividing it by zero\n    if (dir[0] === 0) {\n      tMin[0] = tMin[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[0] = tMax[0] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[0] /= dir[0];\n      tMax[0] /= dir[0];\n    }\n    if (dir[1] === 0) {\n      tMin[1] = tMin[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[1] = tMax[1] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[1] /= dir[1];\n      tMax[1] /= dir[1];\n    }\n    if (dir[2] === 0) {\n      tMin[2] = tMin[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n      tMax[2] = tMax[2] < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n    } else {\n      tMin[2] /= dir[2];\n      tMax[2] /= dir[2];\n    }\n\n    const realMin = vec3.set(\n      tmpVecC,\n      Math.min(tMin[0], tMax[0]),\n      Math.min(tMin[1], tMax[1]),\n      Math.min(tMin[2], tMax[2]),\n    );\n    const realMax = vec3.set(\n      tmpVecD,\n      Math.max(tMin[0], tMax[0]),\n      Math.max(tMin[1], tMax[1]),\n      Math.max(tMin[2], tMax[2]),\n    );\n\n    const minMax = Math.min(Math.min(realMax[0], realMax[1]), realMax[2]);\n    const maxMin = Math.max(Math.max(realMin[0], realMin[1]), realMin[2]);\n\n    const intersects = minMax >= maxMin && maxMin >= 0;\n\n    if (intersects) {\n      vec3.copy(intersection, this.direction);\n      vec3.scaleAndAdd(intersection, this.origin, intersection, maxMin);\n    }\n\n    return intersects;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}