{"ast":null,"code":"import { Curve } from '../curve';\nimport { Point } from '../point';\nimport { Segment } from './segment';\nexport class CurveTo extends Segment {\n  constructor(arg0, arg1, arg2, arg3, arg4, arg5) {\n    super();\n\n    if (Curve.isCurve(arg0)) {\n      this.controlPoint1 = arg0.controlPoint1.clone().round(2);\n      this.controlPoint2 = arg0.controlPoint2.clone().round(2);\n      this.endPoint = arg0.end.clone().round(2);\n    } else if (typeof arg0 === 'number') {\n      this.controlPoint1 = new Point(arg0, arg1).round(2);\n      this.controlPoint2 = new Point(arg2, arg3).round(2);\n      this.endPoint = new Point(arg4, arg5).round(2);\n    } else {\n      this.controlPoint1 = Point.create(arg0).round(2);\n      this.controlPoint2 = Point.create(arg1).round(2);\n      this.endPoint = Point.create(arg2).round(2);\n    }\n  }\n\n  get type() {\n    return 'C';\n  }\n\n  get curve() {\n    return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n  }\n\n  bbox() {\n    return this.curve.bbox();\n  }\n\n  closestPoint(p) {\n    return this.curve.closestPoint(p);\n  }\n\n  closestPointLength(p) {\n    return this.curve.closestPointLength(p);\n  }\n\n  closestPointNormalizedLength(p) {\n    return this.curve.closestPointNormalizedLength(p);\n  }\n\n  closestPointTangent(p) {\n    return this.curve.closestPointTangent(p);\n  }\n\n  length() {\n    return this.curve.length();\n  }\n\n  divideAt(ratio, options = {}) {\n    // TODO: fix options\n    const divided = this.curve.divideAt(ratio, options);\n    return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n  }\n\n  divideAtLength(length, options = {}) {\n    // TODO: fix options\n    const divided = this.curve.divideAtLength(length, options);\n    return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n  }\n\n  divideAtT(t) {\n    const divided = this.curve.divideAtT(t);\n    return [new CurveTo(divided[0]), new CurveTo(divided[1])];\n  }\n\n  getSubdivisions() {\n    return [];\n  }\n\n  pointAt(ratio) {\n    return this.curve.pointAt(ratio);\n  }\n\n  pointAtLength(length) {\n    return this.curve.pointAtLength(length);\n  }\n\n  tangentAt(ratio) {\n    return this.curve.tangentAt(ratio);\n  }\n\n  tangentAtLength(length) {\n    return this.curve.tangentAtLength(length);\n  }\n\n  isDifferentiable() {\n    if (!this.previousSegment) {\n      return false;\n    }\n\n    const start = this.start;\n    const control1 = this.controlPoint1;\n    const control2 = this.controlPoint2;\n    const end = this.end;\n    return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));\n  }\n\n  scale(sx, sy, origin) {\n    this.controlPoint1.scale(sx, sy, origin);\n    this.controlPoint2.scale(sx, sy, origin);\n    this.end.scale(sx, sy, origin);\n    return this;\n  }\n\n  rotate(angle, origin) {\n    this.controlPoint1.rotate(angle, origin);\n    this.controlPoint2.rotate(angle, origin);\n    this.end.rotate(angle, origin);\n    return this;\n  }\n\n  translate(tx, ty) {\n    if (typeof tx === 'number') {\n      this.controlPoint1.translate(tx, ty);\n      this.controlPoint2.translate(tx, ty);\n      this.end.translate(tx, ty);\n    } else {\n      this.controlPoint1.translate(tx);\n      this.controlPoint2.translate(tx);\n      this.end.translate(tx);\n    }\n\n    return this;\n  }\n\n  equals(s) {\n    return this.start.equals(s.start) && this.end.equals(s.end) && this.controlPoint1.equals(s.controlPoint1) && this.controlPoint2.equals(s.controlPoint2);\n  }\n\n  clone() {\n    return new CurveTo(this.controlPoint1, this.controlPoint2, this.end);\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      start: this.start.toJSON(),\n      controlPoint1: this.controlPoint1.toJSON(),\n      controlPoint2: this.controlPoint2.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n\n  serialize() {\n    const c1 = this.controlPoint1;\n    const c2 = this.controlPoint2;\n    const end = this.end;\n    return [this.type, c1.x, c1.y, c2.x, c2.y, end.x, end.y].join(' ');\n  }\n\n}\n\n(function (CurveTo) {\n  function create(...args) {\n    const len = args.length;\n    const arg0 = args[0]; // curve provided\n\n    if (Curve.isCurve(arg0)) {\n      return new CurveTo(arg0);\n    } // points provided\n\n\n    if (Point.isPointLike(arg0)) {\n      if (len === 3) {\n        return new CurveTo(args[0], args[1], args[2]);\n      } // this is a poly-bezier segment\n\n\n      const segments = [];\n\n      for (let i = 0; i < len; i += 3) {\n        segments.push(new CurveTo(args[i], args[i + 1], args[i + 2]));\n      }\n\n      return segments;\n    } // coordinates provided\n\n\n    if (len === 6) {\n      return new CurveTo(args[0], args[1], args[2], args[3], args[4], args[5]);\n    } // this is a poly-bezier segment\n\n\n    const segments = [];\n\n    for (let i = 0; i < len; i += 6) {\n      segments.push(new CurveTo(args[i], args[i + 1], args[i + 2], args[i + 3], args[i + 4], args[i + 5]));\n    }\n\n    return segments;\n  }\n\n  CurveTo.create = create;\n})(CurveTo || (CurveTo = {}));","map":{"version":3,"mappings":"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","names":["Curve","Point","Segment","CurveTo","constructor","arg0","arg1","arg2","arg3","arg4","arg5","isCurve","controlPoint1","clone","round","controlPoint2","endPoint","end","create","type","curve","start","bbox","closestPoint","p","closestPointLength","closestPointNormalizedLength","closestPointTangent","length","divideAt","ratio","options","divided","divideAtLength","divideAtT","t","getSubdivisions","pointAt","pointAtLength","tangentAt","tangentAtLength","isDifferentiable","previousSegment","control1","control2","equals","scale","sx","sy","origin","rotate","angle","translate","tx","ty","s","toJSON","serialize","c1","c2","x","y","join","args","len","isPointLike","segments","i","push"],"sourceRoot":"","sources":["../../../src/geometry/path/curveto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}