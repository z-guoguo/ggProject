{"ast":null,"code":"import { Point } from './point';\nimport { Rectangle } from './rectangle';\nimport { Geometry } from './geometry';\nexport class Ellipse extends Geometry {\n  constructor(x, y, a, b) {\n    super();\n    this.x = x == null ? 0 : x;\n    this.y = y == null ? 0 : y;\n    this.a = a == null ? 0 : a;\n    this.b = b == null ? 0 : b;\n  }\n\n  get [Symbol.toStringTag]() {\n    return Ellipse.toStringTag;\n  }\n\n  get center() {\n    return new Point(this.x, this.y);\n  }\n  /**\n   * Returns a rectangle that is the bounding box of the ellipse.\n   */\n\n\n  bbox() {\n    return Rectangle.fromEllipse(this);\n  }\n  /**\n   * Returns a point that is the center of the ellipse.\n   */\n\n\n  getCenter() {\n    return this.center;\n  }\n\n  inflate(dx, dy) {\n    const w = dx;\n    const h = dy != null ? dy : dx;\n    this.a += 2 * w;\n    this.b += 2 * h;\n    return this;\n  }\n\n  normalizedDistance(x, y) {\n    const ref = Point.create(x, y);\n    const dx = ref.x - this.x;\n    const dy = ref.y - this.y;\n    const a = this.a;\n    const b = this.b;\n    return dx * dx / (a * a) + dy * dy / (b * b);\n  }\n\n  containsPoint(x, y) {\n    return this.normalizedDistance(x, y) <= 1;\n  }\n  /**\n   * Returns an array of the intersection points of the ellipse and the line.\n   * Returns `null` if no intersection exists.\n   */\n\n\n  intersectsWithLine(line) {\n    const intersections = [];\n    const rx = this.a;\n    const ry = this.b;\n    const a1 = line.start;\n    const a2 = line.end;\n    const dir = line.vector();\n    const diff = a1.diff(new Point(this.x, this.y));\n    const mDir = new Point(dir.x / (rx * rx), dir.y / (ry * ry));\n    const mDiff = new Point(diff.x / (rx * rx), diff.y / (ry * ry));\n    const a = dir.dot(mDir);\n    const b = dir.dot(mDiff);\n    const c = diff.dot(mDiff) - 1.0;\n    const d = b * b - a * c;\n\n    if (d < 0) {\n      return null;\n    }\n\n    if (d > 0) {\n      const root = Math.sqrt(d);\n      const ta = (-b - root) / a;\n      const tb = (-b + root) / a;\n\n      if ((ta < 0 || ta > 1) && (tb < 0 || tb > 1)) {\n        // outside\n        return null;\n      }\n\n      if (ta >= 0 && ta <= 1) {\n        intersections.push(a1.lerp(a2, ta));\n      }\n\n      if (tb >= 0 && tb <= 1) {\n        intersections.push(a1.lerp(a2, tb));\n      }\n    } else {\n      const t = -b / a;\n\n      if (t >= 0 && t <= 1) {\n        intersections.push(a1.lerp(a2, t));\n      } else {\n        // outside\n        return null;\n      }\n    }\n\n    return intersections;\n  }\n  /**\n   * Returns the point on the boundary of the ellipse that is the\n   * intersection of the ellipse with a line starting in the center\n   * of the ellipse ending in the point `p`.\n   *\n   * If angle is specified, the intersection will take into account\n   * the rotation of the ellipse by angle degrees around its center.\n   */\n\n\n  intersectsWithLineFromCenterToPoint(p, angle = 0) {\n    const ref = Point.clone(p);\n\n    if (angle) {\n      ref.rotate(angle, this.getCenter());\n    }\n\n    const dx = ref.x - this.x;\n    const dy = ref.y - this.y;\n    let result;\n\n    if (dx === 0) {\n      result = this.bbox().getNearestPointToPoint(ref);\n\n      if (angle) {\n        return result.rotate(-angle, this.getCenter());\n      }\n\n      return result;\n    }\n\n    const m = dy / dx;\n    const mSquared = m * m;\n    const aSquared = this.a * this.a;\n    const bSquared = this.b * this.b;\n    let x = Math.sqrt(1 / (1 / aSquared + mSquared / bSquared));\n    x = dx < 0 ? -x : x;\n    const y = m * x;\n    result = new Point(this.x + x, this.y + y);\n\n    if (angle) {\n      return result.rotate(-angle, this.getCenter());\n    }\n\n    return result;\n  }\n  /**\n   * Returns the angle between the x-axis and the tangent from a point. It is\n   * valid for points lying on the ellipse boundary only.\n   */\n\n\n  tangentTheta(p) {\n    const ref = Point.clone(p);\n    const x0 = ref.x;\n    const y0 = ref.y;\n    const a = this.a;\n    const b = this.b;\n    const center = this.bbox().center;\n    const cx = center.x;\n    const cy = center.y;\n    const refPointDelta = 30;\n    const q1 = x0 > center.x + a / 2;\n    const q3 = x0 < center.x - a / 2;\n    let x;\n    let y;\n\n    if (q1 || q3) {\n      y = x0 > center.x ? y0 - refPointDelta : y0 + refPointDelta;\n      x = a * a / (x0 - cx) - a * a * (y0 - cy) * (y - cy) / (b * b * (x0 - cx)) + cx;\n    } else {\n      x = y0 > center.y ? x0 + refPointDelta : x0 - refPointDelta;\n      y = b * b / (y0 - cy) - b * b * (x0 - cx) * (x - cx) / (a * a * (y0 - cy)) + cy;\n    }\n\n    return new Point(x, y).theta(ref);\n  }\n\n  scale(sx, sy) {\n    this.a *= sx;\n    this.b *= sy;\n    return this;\n  }\n\n  rotate(angle, origin) {\n    const rect = Rectangle.fromEllipse(this);\n    rect.rotate(angle, origin);\n    const ellipse = Ellipse.fromRect(rect);\n    this.a = ellipse.a;\n    this.b = ellipse.b;\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    return this;\n  }\n\n  translate(dx, dy) {\n    const p = Point.create(dx, dy);\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  }\n\n  equals(ellipse) {\n    return ellipse != null && ellipse.x === this.x && ellipse.y === this.y && ellipse.a === this.a && ellipse.b === this.b;\n  }\n\n  clone() {\n    return new Ellipse(this.x, this.y, this.a, this.b);\n  }\n\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y,\n      a: this.a,\n      b: this.b\n    };\n  }\n\n  serialize() {\n    return `${this.x} ${this.y} ${this.a} ${this.b}`;\n  }\n\n}\n\n(function (Ellipse) {\n  Ellipse.toStringTag = `X6.Geometry.${Ellipse.name}`;\n\n  function isEllipse(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Ellipse) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const ellipse = instance;\n\n    if ((tag == null || tag === Ellipse.toStringTag) && typeof ellipse.x === 'number' && typeof ellipse.y === 'number' && typeof ellipse.a === 'number' && typeof ellipse.b === 'number' && typeof ellipse.inflate === 'function' && typeof ellipse.normalizedDistance === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  Ellipse.isEllipse = isEllipse;\n})(Ellipse || (Ellipse = {}));\n\n(function (Ellipse) {\n  function create(x, y, a, b) {\n    if (x == null || typeof x === 'number') {\n      return new Ellipse(x, y, a, b);\n    }\n\n    return parse(x);\n  }\n\n  Ellipse.create = create;\n\n  function parse(e) {\n    if (Ellipse.isEllipse(e)) {\n      return e.clone();\n    }\n\n    if (Array.isArray(e)) {\n      return new Ellipse(e[0], e[1], e[2], e[3]);\n    }\n\n    return new Ellipse(e.x, e.y, e.a, e.b);\n  }\n\n  Ellipse.parse = parse;\n\n  function fromRect(rect) {\n    const center = rect.center;\n    return new Ellipse(center.x, center.y, rect.width / 2, rect.height / 2);\n  }\n\n  Ellipse.fromRect = fromRect;\n})(Ellipse || (Ellipse = {}));","map":{"version":3,"mappings":"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","names":["Point","Rectangle","Geometry","Ellipse","constructor","x","y","a","b","Symbol","toStringTag","center","bbox","fromEllipse","getCenter","inflate","dx","dy","w","h","normalizedDistance","ref","create","containsPoint","intersectsWithLine","line","intersections","rx","ry","a1","start","a2","end","dir","vector","diff","mDir","mDiff","dot","c","d","root","Math","sqrt","ta","tb","push","lerp","t","intersectsWithLineFromCenterToPoint","p","angle","clone","rotate","result","getNearestPointToPoint","m","mSquared","aSquared","bSquared","tangentTheta","x0","y0","cx","cy","refPointDelta","q1","q3","theta","scale","sx","sy","origin","rect","ellipse","fromRect","translate","equals","toJSON","serialize","name","isEllipse","instance","tag","parse","e","Array","isArray","width","height"],"sourceRoot":"","sources":["../../src/geometry/ellipse.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}