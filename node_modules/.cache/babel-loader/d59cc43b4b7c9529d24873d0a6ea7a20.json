{"ast":null,"code":"import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\n\nexport default (function (text, maxWidth, font, str) {\n  if (str === void 0) {\n    str = '...';\n  }\n\n  var STEP = 16; // 每次 16，调参工程师\n\n  var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n  var leftText = !isString(text) ? toString(text) : text;\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n\n  var currentText;\n  var currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  } // 首先通过 step 计算，找出最大的未超出长度的\n  // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP); // 字符串整体没有超出\n\n    if (!leftText) {\n      return r.join('');\n    }\n  } // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  // eslint-disable-next-line no-constant-condition\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return \"\" + r.join('') + str;\n});","map":{"version":3,"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAAeC,OAAO,IAAIC,gBAA1B,QAAkD,sBAAlD;AAEA;;;;;;;;;;;AAUA,gBAAe,UAACC,IAAD,EAAwBC,QAAxB,EAA0CC,IAA1C,EAAuDC,GAAvD,EAA0E;EAAnB;IAAAA;EAAmB;;EACvF,IAAMC,IAAI,GAAG,EAAb,CADuF,CACtE;;EACjB,IAAMC,iBAAiB,GAAGN,gBAAgB,CAACI,GAAD,EAAMD,IAAN,CAA1C;EACA,IAAII,QAAQ,GAAG,CAACV,QAAQ,CAACI,IAAD,CAAT,GAAkBH,QAAQ,CAACG,IAAD,CAA1B,GAAmCA,IAAlD;EAEA,IAAIO,SAAS,GAAGN,QAAhB;EAEA,IAAMO,CAAC,GAAG,EAAV,CAPuF,CAOzE;;EACd,IAAIC,WAAJ;EACA,IAAIC,YAAJ;;EAEA,IAAIX,gBAAgB,CAACC,IAAD,EAAOE,IAAP,CAAhB,IAAgCD,QAApC,EAA8C;IAC5C,OAAOD,IAAP;EACD,CAbsF,CAevF;EACA;;;EACA,OAAO,IAAP,EAAa;IACX;IACAS,WAAW,GAAGH,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmBP,IAAnB,CAAd,CAFW,CAGX;;IACAM,YAAY,GAAGX,gBAAgB,CAACU,WAAD,EAAcP,IAAd,CAA/B,CAJW,CAKX;;IACA,IAAIQ,YAAY,GAAGL,iBAAf,GAAmCE,SAAvC,EAAkD;MAChD,IAAIG,YAAY,GAAGH,SAAnB,EAA8B;QAC5B;MACD;IACF;;IAEDC,CAAC,CAACI,IAAF,CAAOH,WAAP,EAZW,CAaX;;IACAF,SAAS,IAAIG,YAAb;IACAJ,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgBP,IAAhB,CAAX,CAfW,CAgBX;;IACA,IAAI,CAACE,QAAL,EAAe;MACb,OAAOE,CAAC,CAACK,IAAF,CAAO,EAAP,CAAP;IACD;EACF,CArCsF,CAuCvF;EACA;;;EACA,OAAO,IAAP,EAAa;IACX;IACAJ,WAAW,GAAGH,QAAQ,CAACK,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAd,CAFW,CAGX;;IACAD,YAAY,GAAGX,gBAAgB,CAACU,WAAD,EAAcP,IAAd,CAA/B,CAJW,CAKX;;IACA,IAAIQ,YAAY,GAAGL,iBAAf,GAAmCE,SAAvC,EAAkD;MAChD;IACD;;IACDC,CAAC,CAACI,IAAF,CAAOH,WAAP,EATW,CAUX;;IACAF,SAAS,IAAIG,YAAb;IACAJ,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgB,CAAhB,CAAX;;IAEA,IAAI,CAACL,QAAL,EAAe;MACb,OAAOE,CAAC,CAACK,IAAF,CAAO,EAAP,CAAP;IACD;EACF;;EACD,OAAO,KAAGL,CAAC,CAACK,IAAF,CAAO,EAAP,CAAH,GAAgBV,GAAvB;AACD,CA5DD","names":["isString","toString","default","measureTextWidth","text","maxWidth","font","str","STEP","PLACEHOLDER_WIDTH","leftText","leftWidth","r","currentText","currentWidth","substr","push","join"],"sourceRoot":"","sources":["../src/get-ellipsis-text.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}