{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\n\n\nimport { createEntity as _createEntity, createWorldContainer, IDENTIFIER } from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine'; // tslint:disable-next-line:no-submodule-imports\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\nexport var World = (_dec = injectable(), _dec2 = inject(IDENTIFIER.ConfigService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function World() {\n    _classCallCheck(this, World);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    this.container = void 0;\n  }\n\n  _createClass(World, [{\n    key: \"getEngine\",\n    value: function () {\n      var _getEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var engine, _this$configService$g, canvas, engineOptions;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                engine = this.container.get(IDENTIFIER.RenderEngine);\n                _this$configService$g = this.configService.get(), canvas = _this$configService$g.canvas, engineOptions = _this$configService$g.engineOptions;\n                _context.next = 4;\n                return engine.init(_objectSpread({\n                  canvas: canvas || createCanvas(),\n                  swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n                  antialiasing: false\n                }, engineOptions));\n\n              case 4:\n                return _context.abrupt(\"return\", engine);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getEngine() {\n        return _getEngine.apply(this, arguments);\n      }\n\n      return getEngine;\n    }()\n    /**\n     * get transform component\n     * @param entity\n     */\n\n  }, {\n    key: \"getTransformComponent\",\n    value: function getTransformComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.TransformComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"getMeshComponent\",\n    value: function getMeshComponent(entity) {\n      var manager = this.container.get(IDENTIFIER.MeshComponentManager);\n      return manager.getComponentByEntity(entity);\n    }\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(config) {\n      this.configService.set(config);\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      this.container = container;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"createEntity\",\n    value: function createEntity() {\n      return _createEntity();\n    }\n  }, {\n    key: \"createScene\",\n    value: function createScene() {\n      return this.container.get(Scene);\n    }\n  }, {\n    key: \"createCamera\",\n    value: function createCamera() {\n      return this.container.get(Camera);\n    }\n  }, {\n    key: \"createView\",\n    value: function createView() {\n      return this.container.get(View);\n    } // public createLight(type: string,) {\n    //   return this.container.getNamed(IDENTIFIER.Light, type)\n    // }\n\n  }, {\n    key: \"createRenderable\",\n    value: function createRenderable(type, config) {\n      var renderable = type ? this.container.getNamed(IDENTIFIER.Renderable, type) : this.container.get(Renderable);\n\n      var entity = _createEntity();\n\n      renderable.setConfig(config || {});\n      renderable.setEntity(entity);\n      return renderable;\n    }\n  }, {\n    key: \"createGeometry\",\n    value: function createGeometry(type, config) {\n      var geometry = this.container.getNamed(IDENTIFIER.Geometry, type);\n\n      var entity = _createEntity();\n\n      geometry.setConfig(config || {});\n      geometry.setEntity(entity);\n      return geometry.getComponent();\n    }\n  }, {\n    key: \"createMaterial\",\n    value: function createMaterial(type, config) {\n      var material = this.container.getNamed(IDENTIFIER.Material, type);\n\n      var entity = _createEntity();\n\n      material.setConfig(config || {});\n      material.setEntity(entity, type);\n      return material.getComponent();\n    }\n  }, {\n    key: \"createTexture2D\",\n    value: function createTexture2D(config) {\n      var texture = this.container.get(Texture2D);\n      texture.setConfig(config);\n      return texture;\n    }\n  }, {\n    key: \"createBufferGeometry\",\n    value: function createBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createBufferGeometry(params);\n    }\n  }, {\n    key: \"createInstancedBufferGeometry\",\n    value: function createInstancedBufferGeometry(params) {\n      var geometrySystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.GeometrySystem);\n      return geometrySystem.createInstancedBufferGeometry(params);\n    }\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var materialSystem = this.container.getNamed(IDENTIFIER.Systems, IDENTIFIER.MaterialSystem);\n      return materialSystem.createShaderMaterial(params);\n    }\n  }, {\n    key: \"createKernel\",\n    value: function createKernel(precompiledBundle) {\n      var kernel = this.container.get(Kernel);\n\n      if (typeof precompiledBundle === 'string') {\n        kernel.setBundle(JSON.parse(precompiledBundle));\n      } else {\n        kernel.setBundle(precompiledBundle);\n      }\n\n      kernel.init();\n      return kernel;\n    }\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      var renderer = this.container.get(Renderer);\n      renderer.container = this.container;\n      renderer.init();\n      return renderer;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var systems = this.container.getAll(IDENTIFIER.Systems);\n      systems.forEach(function (system) {\n        if (system.tearDown) {\n          system.tearDown();\n        }\n      });\n      var engine = this.container.get(IDENTIFIER.RenderEngine);\n      engine.destroy();\n      var interactor = this.container.get(IDENTIFIER.InteractorService);\n      interactor.destroy();\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var worldContainer = createWorldContainer(); // bind render engine, fallback to WebGL\n\n      var engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n\n      if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n        worldContainer.bind(IDENTIFIER.RenderEngine) // @ts-ignore\n        .to(engineClazz).inSingletonScope();\n      }\n\n      worldContainer.bind(Renderer).toSelf();\n      worldContainer.bind(Kernel).toSelf();\n      worldContainer.bind(Renderable).toSelf();\n      worldContainer.bind(View).toSelf();\n      worldContainer.bind(Camera).toSelf();\n      worldContainer.bind(Scene).toSelf();\n      worldContainer.bind(World).toSelf();\n      worldContainer.bind(TextureCache).toSelf();\n      worldContainer.bind(Texture2D).toSelf(); // bind geometries\n\n      worldContainer.bind(IDENTIFIER.Geometry).to(Box).whenTargetNamed(Geometry.BOX);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Sphere).whenTargetNamed(Geometry.SPHERE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Plane).whenTargetNamed(Geometry.PLANE);\n      worldContainer.bind(IDENTIFIER.Geometry).to(Merged).whenTargetNamed(Geometry.MERGED); // bind materials\n\n      worldContainer.bind(IDENTIFIER.Material).to(Basic).whenTargetNamed(Material.BASIC); // bind renderables\n\n      worldContainer.bind(IDENTIFIER.Renderable).to(Point).whenTargetNamed(Renderable.POINT);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Line).whenTargetNamed(Renderable.LINE);\n      worldContainer.bind(IDENTIFIER.Renderable).to(Grid).whenTargetNamed(Renderable.GRID);\n      var world = worldContainer.get(World);\n      world.setContainer(worldContainer);\n      world.setConfig(config);\n      return world;\n    }\n  }]);\n\n  return World;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":{"version":3,"mappings":"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","names":["createEntity","createWorldContainer","IDENTIFIER","WebGLEngine","WebGPUEngine","WebGPUConstants","inject","injectable","Camera","Geometry","Box","Merged","Plane","Sphere","Kernel","Material","Basic","Grid","Line","Point","Renderable","Renderer","Scene","TextureCache","Texture2D","createCanvas","View","World","ConfigService","_classCallCheck","_initializerDefineProperty","container","_createClass","key","value","engine","get","RenderEngine","_this$configService$g","configService","canvas","engineOptions","_context","init","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","entity","manager","TransformComponentManager","getComponentByEntity","MeshComponentManager","config","set","type","renderable","getNamed","setConfig","setEntity","geometry","getComponent","material","texture","params","geometrySystem","Systems","GeometrySystem","createBufferGeometry","createInstancedBufferGeometry","materialSystem","MaterialSystem","createShaderMaterial","precompiledBundle","kernel","setBundle","JSON","parse","renderer","systems","getAll","forEach","system","tearDown","destroy","interactor","InteractorService","worldContainer","engineClazz","navigator","gpu","isBound","bind","to","inSingletonScope","toSelf","whenTargetNamed","BOX","SPHERE","PLANE","MERGED","BASIC","POINT","LINE","GRID","world","setContainer","configurable","enumerable","writable","initializer"],"sources":["../src/World.ts"],"sourcesContent":["// tslint:disable-next-line:no-reference\n/// <reference path=\"../../../node_modules/@webgpu/types/dist/index.d.ts\" />\nimport {\n  ComponentManager,\n  createEntity,\n  createWorldContainer,\n  Entity,\n  GeometrySystem,\n  // container,\n  IConfig,\n  IConfigService,\n  IDENTIFIER,\n  IInteractorService,\n  IRendererService,\n  ISystem,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n  KernelBundle,\n  MaterialSystem,\n  MeshComponent,\n  TransformComponent,\n} from '@antv/g-webgpu-core';\nimport { WebGLEngine, WebGPUEngine } from '@antv/g-webgpu-engine';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { Container, inject, injectable } from 'inversify';\nimport { Camera } from './camera/Camera';\nimport { Geometry, IGeometry } from './geometry';\nimport { Box } from './geometry/Box';\nimport { Merged } from './geometry/Merged';\nimport { Plane } from './geometry/Plane';\nimport { Sphere } from './geometry/Sphere';\nimport { Kernel } from './Kernel';\nimport { IMaterial, Material } from './material';\nimport { Basic } from './material/basic';\nimport { Grid } from './renderable/grid';\nimport { Line } from './renderable/line';\nimport { Point } from './renderable/point';\nimport { IRenderable, Renderable } from './renderable/Renderable';\nimport { Renderer } from './Renderer';\nimport { Scene } from './Scene';\nimport { TextureCache } from './texture/Cache';\nimport { Texture2D } from './texture/Texture2D';\nimport { createCanvas } from './utils/canvas';\nimport { View } from './View';\n\n@injectable()\nexport class World {\n  public static create(config: Partial<IConfig> = {}) {\n    const worldContainer = createWorldContainer();\n\n    // bind render engine, fallback to WebGL\n    const engineClazz = !navigator.gpu ? WebGLEngine : WebGPUEngine;\n    if (!worldContainer.isBound(IDENTIFIER.RenderEngine)) {\n      worldContainer\n        .bind<IRendererService>(IDENTIFIER.RenderEngine)\n        // @ts-ignore\n        .to(engineClazz)\n        .inSingletonScope();\n    }\n\n    worldContainer.bind(Renderer).toSelf();\n    worldContainer.bind(Kernel).toSelf();\n    worldContainer.bind(Renderable).toSelf();\n    worldContainer.bind(View).toSelf();\n    worldContainer.bind(Camera).toSelf();\n    worldContainer.bind(Scene).toSelf();\n    worldContainer.bind(World).toSelf();\n    worldContainer.bind(TextureCache).toSelf();\n    worldContainer.bind(Texture2D).toSelf();\n\n    // bind geometries\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Box)\n      .whenTargetNamed(Geometry.BOX);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Sphere)\n      .whenTargetNamed(Geometry.SPHERE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Plane)\n      .whenTargetNamed(Geometry.PLANE);\n    worldContainer\n      .bind<IGeometry<unknown>>(IDENTIFIER.Geometry)\n      .to(Merged)\n      .whenTargetNamed(Geometry.MERGED);\n\n    // bind materials\n    worldContainer\n      .bind<IMaterial<unknown>>(IDENTIFIER.Material)\n      .to(Basic)\n      .whenTargetNamed(Material.BASIC);\n\n    // bind renderables\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Point)\n      .whenTargetNamed(Renderable.POINT);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Line)\n      .whenTargetNamed(Renderable.LINE);\n    worldContainer\n      .bind<IRenderable<unknown>>(IDENTIFIER.Renderable)\n      .to(Grid)\n      .whenTargetNamed(Renderable.GRID);\n\n    const world = worldContainer.get(World);\n    world.setContainer(worldContainer);\n    world.setConfig(config);\n    return world;\n  }\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private container: Container;\n\n  public async getEngine() {\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    const { canvas, engineOptions } = this.configService.get();\n    await engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n    return engine;\n  }\n\n  /**\n   * get transform component\n   * @param entity\n   */\n  public getTransformComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<TransformComponent>>(\n      IDENTIFIER.TransformComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public getMeshComponent(entity: Entity) {\n    const manager = this.container.get<ComponentManager<MeshComponent>>(\n      IDENTIFIER.MeshComponentManager,\n    );\n    return manager.getComponentByEntity(entity);\n  }\n\n  public setConfig(config: Partial<IConfig>) {\n    this.configService.set(config);\n  }\n\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public createEntity() {\n    return createEntity();\n  }\n\n  public createScene() {\n    return this.container.get(Scene);\n  }\n\n  public createCamera() {\n    return this.container.get(Camera);\n  }\n\n  public createView() {\n    return this.container.get(View);\n  }\n\n  // public createLight(type: string,) {\n  //   return this.container.getNamed(IDENTIFIER.Light, type)\n  // }\n\n  public createRenderable<T>(type?: string, config?: T) {\n    const renderable: Renderable = type\n      ? this.container.getNamed(IDENTIFIER.Renderable, type)\n      : this.container.get(Renderable);\n    const entity = createEntity();\n    renderable.setConfig(config || {});\n    renderable.setEntity(entity);\n    return renderable;\n  }\n\n  public createGeometry<T>(type: string, config?: T) {\n    const geometry: Geometry = this.container.getNamed(\n      IDENTIFIER.Geometry,\n      type,\n    );\n    const entity = createEntity();\n    geometry.setConfig(config || {});\n    geometry.setEntity(entity);\n    return geometry.getComponent();\n  }\n\n  public createMaterial<T>(type: string, config?: T) {\n    const material: Material = this.container.getNamed(\n      IDENTIFIER.Material,\n      type,\n    );\n    const entity = createEntity();\n    material.setConfig(config || {});\n    material.setEntity(entity, type);\n    return material.getComponent();\n  }\n\n  public createTexture2D(\n    config: ITexture2DInitializationOptions & { url: string },\n  ) {\n    const texture = this.container.get(Texture2D);\n    texture.setConfig(config);\n    return texture;\n  }\n\n  public createBufferGeometry(params?: { vertexCount: number }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createBufferGeometry(params);\n  }\n\n  public createInstancedBufferGeometry(params: {\n    maxInstancedCount: number;\n    vertexCount: number;\n  }) {\n    const geometrySystem = this.container.getNamed<GeometrySystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.GeometrySystem,\n    );\n    return geometrySystem.createInstancedBufferGeometry(params);\n  }\n\n  public createShaderMaterial(params: {\n    vertexShader: string;\n    fragmentShader: string;\n  }) {\n    const materialSystem = this.container.getNamed<MaterialSystem>(\n      IDENTIFIER.Systems,\n      IDENTIFIER.MaterialSystem,\n    );\n    return materialSystem.createShaderMaterial(params);\n  }\n\n  public createKernel(precompiledBundle: KernelBundle | string) {\n    const kernel = this.container.get(Kernel);\n    if (typeof precompiledBundle === 'string') {\n      kernel.setBundle(JSON.parse(precompiledBundle));\n    } else {\n      kernel.setBundle(precompiledBundle);\n    }\n    kernel.init();\n    return kernel;\n  }\n\n  public createRenderer() {\n    const renderer = this.container.get(Renderer);\n    renderer.container = this.container;\n    renderer.init();\n    return renderer;\n  }\n\n  public destroy() {\n    const systems = this.container.getAll<ISystem>(IDENTIFIER.Systems);\n    systems.forEach((system) => {\n      if (system.tearDown) {\n        system.tearDown();\n      }\n    });\n    const engine = this.container.get<IRendererService>(\n      IDENTIFIER.RenderEngine,\n    );\n    engine.destroy();\n    const interactor = this.container.get<IInteractorService>(\n      IDENTIFIER.InteractorService,\n    );\n    interactor.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}