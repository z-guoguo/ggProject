{"ast":null,"code":"/**\n * The namespace for JSON-specific functions.\n */\nexport var JSONExt;\n\n(function (JSONExt) {\n  /**\n   * A shared frozen empty JSONObject\n   */\n  JSONExt.emptyObject = Object.freeze({});\n  /**\n   * A shared frozen empty JSONArray\n   */\n\n  JSONExt.emptyArray = Object.freeze([]);\n  /**\n   * Test whether a JSON value is a primitive.\n   *\n   * @param value - The JSON value of interest.\n   *\n   * @returns `true` if the value is a primitive,`false` otherwise.\n   */\n\n  function isPrimitive(value) {\n    return value === null || value === undefined || typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string';\n  }\n\n  JSONExt.isPrimitive = isPrimitive;\n\n  function isArray(value) {\n    return Array.isArray(value);\n  }\n\n  JSONExt.isArray = isArray;\n\n  function isObject(value) {\n    return !isPrimitive(value) && !isArray(value);\n  }\n\n  JSONExt.isObject = isObject;\n  /**\n   * Compare two JSON values for deep equality.\n   *\n   * @param first - The first JSON value of interest.\n   *\n   * @param second - The second JSON value of interest.\n   *\n   * @returns `true` if the values are equivalent, `false` otherwise.\n   */\n\n  function deepEqual(first, second) {\n    // Check referential and primitive equality first.\n    if (first === second) {\n      return true;\n    } // If one is a primitive, the `===` check ruled out the other.\n\n\n    if (isPrimitive(first) || isPrimitive(second)) {\n      return false;\n    } // Test whether they are arrays.\n\n\n    const a1 = isArray(first);\n    const a2 = isArray(second); // Bail if the types are different.\n\n    if (a1 !== a2) {\n      return false;\n    } // If they are both arrays, compare them.\n\n\n    if (a1 && a2) {\n      return deepArrayEqual(first, second);\n    } // At this point, they must both be objects.\n\n\n    return deepObjectEqual(first, second);\n  }\n\n  JSONExt.deepEqual = deepEqual;\n  /**\n   * Create a deep copy of a JSON value.\n   *\n   * @param value - The JSON value to copy.\n   *\n   * @returns A deep copy of the given JSON value.\n   */\n\n  function deepCopy(value) {\n    // Do nothing for primitive values.\n    if (isPrimitive(value)) {\n      return value;\n    } // Deep copy an array.\n\n\n    if (isArray(value)) {\n      return deepArrayCopy(value);\n    } // Deep copy an object.\n\n\n    return deepObjectCopy(value);\n  }\n\n  JSONExt.deepCopy = deepCopy;\n  /**\n   * Compare two JSON arrays for deep equality.\n   */\n\n  function deepArrayEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    } // Test the arrays for equal length.\n\n\n    if (first.length !== second.length) {\n      return false;\n    } // Compare the values for equality.\n\n\n    for (let i = 0, n = first.length; i < n; i += 1) {\n      if (!deepEqual(first[i], second[i])) {\n        return false;\n      }\n    } // At this point, the arrays are equal.\n\n\n    return true;\n  }\n  /**\n   * Compare two JSON objects for deep equality.\n   */\n\n\n  function deepObjectEqual(first, second) {\n    // Check referential equality first.\n    if (first === second) {\n      return true;\n    } // Check for the first object's keys in the second object.\n    // eslint-disable-next-line\n\n\n    for (const key in first) {\n      if (!(key in second)) {\n        return false;\n      }\n    } // Check for the second object's keys in the first object.\n    // eslint-disable-next-line\n\n\n    for (const key in second) {\n      if (!(key in first)) {\n        return false;\n      }\n    } // Compare the values for equality.\n    // eslint-disable-next-line\n\n\n    for (const key in first) {\n      if (!deepEqual(first[key], second[key])) {\n        return false;\n      }\n    } // At this point, the objects are equal.\n\n\n    return true;\n  }\n  /**\n   * Create a deep copy of a JSON array.\n   */\n\n\n  function deepArrayCopy(value) {\n    const result = new Array(value.length); // eslint-disable-line\n\n    for (let i = 0, n = value.length; i < n; i += 1) {\n      result[i] = deepCopy(value[i]);\n    }\n\n    return result;\n  }\n  /**\n   * Create a deep copy of a JSON object.\n   */\n\n\n  function deepObjectCopy(value) {\n    const result = {};\n    Object.keys(value).forEach(key => {\n      result[key] = deepCopy(value[key]);\n    });\n    return result;\n  }\n})(JSONExt || (JSONExt = {}));","map":{"version":3,"mappings":"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","names":["JSONExt","Object","freeze","isPrimitive","value","undefined","isArray","Array","isObject","deepEqual","first","second","a1","a2","deepArrayEqual","deepObjectEqual","deepCopy","deepArrayCopy","deepObjectCopy","length","i","n","key","result","keys","forEach"],"sourceRoot":"","sources":["../../../src/util/json/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}