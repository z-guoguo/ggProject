{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nexport class Disposable {\n  get disposed() {\n    return this._disposed === true;\n  }\n\n  dispose() {\n    this._disposed = true;\n  }\n\n}\n\n(function (Disposable) {\n  function dispose() {\n    return (target, methodName, descriptor) => {\n      const raw = descriptor.value;\n      const proto = target.__proto__; // eslint-disable-line\n\n      descriptor.value = function () {\n        if (this.disposed) {\n          return;\n        }\n\n        raw.call(this);\n        proto.dispose.call(this);\n      };\n    };\n  }\n\n  Disposable.dispose = dispose;\n})(Disposable || (Disposable = {}));\n/**\n * A disposable object which delegates to a callback function.\n */\n\n\nexport class DisposableDelegate {\n  /**\n   * Construct a new disposable delegate.\n   *\n   * @param callback - The callback function to invoke on dispose.\n   */\n  constructor(callback) {\n    this.callback = callback;\n  }\n  /**\n   * Test whether the delegate has been disposed.\n   */\n\n\n  get disposed() {\n    return !this.callback;\n  }\n  /**\n   * Dispose of the delegate and invoke the callback function.\n   */\n\n\n  dispose() {\n    if (!this.callback) {\n      return;\n    }\n\n    const callback = this.callback;\n    this.callback = null;\n    callback();\n  }\n\n}\n/**\n * An object which manages a collection of disposable items.\n */\n\nexport class DisposableSet {\n  constructor() {\n    this.isDisposed = false; // eslint-disable-line:variable-name\n\n    this.items = new Set();\n  }\n  /**\n   * Test whether the set has been disposed.\n   */\n\n\n  get disposed() {\n    return this.isDisposed;\n  }\n  /**\n   * Dispose of the set and the items it contains.\n   *\n   * #### Notes\n   * Items are disposed in the order they are added to the set.\n   */\n\n\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this.isDisposed = true;\n    this.items.forEach(item => {\n      item.dispose();\n    });\n    this.items.clear();\n  }\n  /**\n   * Test whether the set contains a specific item.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns `true` if the set contains the item, `false` otherwise.\n   */\n\n\n  contains(item) {\n    return this.items.has(item);\n  }\n  /**\n   * Add a disposable item to the set.\n   *\n   * @param item - The item to add to the set.\n   *\n   * #### Notes\n   * If the item is already contained in the set, this is a no-op.\n   */\n\n\n  add(item) {\n    this.items.add(item);\n  }\n  /**\n   * Remove a disposable item from the set.\n   *\n   * @param item - The item to remove from the set.\n   *\n   * #### Notes\n   * If the item is not contained in the set, this is a no-op.\n   */\n\n\n  remove(item) {\n    this.items.delete(item);\n  }\n  /**\n   * Remove all items from the set.\n   */\n\n\n  clear() {\n    this.items.clear();\n  }\n\n}\n\n(function (DisposableSet) {\n  /**\n   * Create a disposable set from an iterable of items.\n   *\n   * @param items - The iterable or array-like object of interest.\n   *\n   * @returns A new disposable initialized with the given items.\n   */\n  function from(items) {\n    const set = new DisposableSet();\n    items.forEach(item => {\n      set.add(item);\n    });\n    return set;\n  }\n\n  DisposableSet.from = from;\n})(DisposableSet || (DisposableSet = {}));","map":{"version":3,"mappings":"AAAA;AA4BA,OAAM,MAAOA,UAAP,CAAiB;EAYT,IAARC,QAAQ;IACV,OAAO,KAAKC,SAAL,KAAmB,IAA1B;EACD;;EAEMC,OAAO;IACZ,KAAKD,SAAL,GAAiB,IAAjB;EACD;;AAlBoB;;AAqBvB,WAAiBF,UAAjB,EAA2B;EACzB,SAAgBG,OAAhB,GAAuB;IACrB,OAAO,CACLC,MADK,EAELC,UAFK,EAGLC,UAHK,KAIH;MACF,MAAMC,GAAG,GAAGD,UAAU,CAACE,KAAvB;MACA,MAAMC,KAAK,GAAGL,MAAM,CAACM,SAArB,CAFE,CAE4C;;MAC9CJ,UAAU,CAACE,KAAX,GAAmB;QACjB,IAAI,KAAKP,QAAT,EAAmB;UACjB;QACD;;QACDM,GAAG,CAACI,IAAJ,CAAS,IAAT;QACAF,KAAK,CAACN,OAAN,CAAcQ,IAAd,CAAmB,IAAnB;MACD,CAND;IAOD,CAdD;EAeD;;EAhBeX,qBAAOG,OAAP;AAiBjB,CAlBD,EAAiBH,UAAU,KAAVA,UAAU,MAA3B;AAoBA;;;;;AAGA,OAAM,MAAOY,kBAAP,CAAyB;EAG7B;;;;;EAKAC,YAAYC,QAAZ,EAAgC;IAC9B,KAAKA,QAAL,GAAgBA,QAAhB;EACD;EAED;;;;;EAGY,IAARb,QAAQ;IACV,OAAO,CAAC,KAAKa,QAAb;EACD;EAED;;;;;EAGAX,OAAO;IACL,IAAI,CAAC,KAAKW,QAAV,EAAoB;MAClB;IACD;;IACD,MAAMA,QAAQ,GAAG,KAAKA,QAAtB;IACA,KAAKA,QAAL,GAAgB,IAAhB;IACAA,QAAQ;EACT;;AA7B4B;AAgC/B;;;;AAGA,OAAM,MAAOC,aAAP,CAAoB;EAA1BF;IACU,kBAAa,KAAb,CADV,CAC6B;;IAEnB,aAAQ,IAAIG,GAAJ,EAAR;EAoET;EAlEC;;;;;EAGY,IAARf,QAAQ;IACV,OAAO,KAAKgB,UAAZ;EACD;EAED;;;;;;;;EAMAd,OAAO;IACL,IAAI,KAAKc,UAAT,EAAqB;MACnB;IACD;;IACD,KAAKA,UAAL,GAAkB,IAAlB;IAEA,KAAKC,KAAL,CAAWC,OAAX,CAAoBC,IAAD,IAAS;MAC1BA,IAAI,CAACjB,OAAL;IACD,CAFD;IAGA,KAAKe,KAAL,CAAWG,KAAX;EACD;EAED;;;;;;;;;EAOAC,QAAQ,CAACF,IAAD,EAAkB;IACxB,OAAO,KAAKF,KAAL,CAAWK,GAAX,CAAeH,IAAf,CAAP;EACD;EAED;;;;;;;;;;EAQAI,GAAG,CAACJ,IAAD,EAAkB;IACnB,KAAKF,KAAL,CAAWM,GAAX,CAAeJ,IAAf;EACD;EAED;;;;;;;;;;EAQAK,MAAM,CAACL,IAAD,EAAkB;IACtB,KAAKF,KAAL,CAAWQ,MAAX,CAAkBN,IAAlB;EACD;EAED;;;;;EAGAC,KAAK;IACH,KAAKH,KAAL,CAAWG,KAAX;EACD;;AAtEuB;;AAyE1B,WAAiBN,aAAjB,EAA8B;EAC5B;;;;;;;EAOA,SAAgBY,IAAhB,CAAqBT,KAArB,EAAyC;IACvC,MAAMU,GAAG,GAAG,IAAIb,aAAJ,EAAZ;IACAG,KAAK,CAACC,OAAN,CAAeC,IAAD,IAAS;MACrBQ,GAAG,CAACJ,GAAJ,CAAQJ,IAAR;IACD,CAFD;IAGA,OAAOQ,GAAP;EACD;;EANeb,qBAAIY,IAAJ;AAOjB,CAfD,EAAiBZ,aAAa,KAAbA,aAAa,MAA9B","names":["Disposable","disposed","_disposed","dispose","target","methodName","descriptor","raw","value","proto","__proto__","call","DisposableDelegate","constructor","callback","DisposableSet","Set","isDisposed","items","forEach","item","clear","contains","has","add","remove","delete","from","set"],"sourceRoot":"","sources":["../../src/common/disposable.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}