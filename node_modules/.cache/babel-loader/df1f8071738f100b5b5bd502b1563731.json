{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { ObjectExt, ArrayExt, Dom, FunctionExt, StringExt, Scheduler } from '../util';\nimport { Point } from '../geometry';\nimport { Dictionary } from '../common';\nimport { Attr } from '../registry/attr';\nimport { View } from './view';\nexport class AttrManager {\n  constructor(view) {\n    this.view = view;\n  }\n\n  get cell() {\n    return this.view.cell;\n  }\n\n  getDefinition(attrName) {\n    return this.cell.getAttrDefinition(attrName);\n  }\n\n  processAttrs(elem, raw) {\n    let normal;\n    let set;\n    let offset;\n    let position;\n    let delay;\n    const specials = []; // divide the attributes between normal and special\n\n    Object.keys(raw).forEach(name => {\n      const val = raw[name];\n      const definition = this.getDefinition(name);\n      const isValid = FunctionExt.call(Attr.isValidDefinition, this.view, definition, val, {\n        elem,\n        attrs: raw,\n        cell: this.cell,\n        view: this.view\n      });\n\n      if (definition && isValid) {\n        if (typeof definition === 'string') {\n          if (normal == null) {\n            normal = {};\n          }\n\n          normal[definition] = val;\n        } else if (val !== null) {\n          specials.push({\n            name,\n            definition\n          });\n        }\n      } else {\n        if (normal == null) {\n          normal = {};\n        }\n\n        const normalName = AttrManager.CASE_SENSITIVE_ATTR.includes(name) ? name : StringExt.kebabCase(name);\n        normal[normalName] = val;\n      }\n    });\n    specials.forEach(({\n      name,\n      definition\n    }) => {\n      const val = raw[name];\n      const setDefine = definition;\n\n      if (typeof setDefine.set === 'function') {\n        if (!Dom.isHTMLElement(elem) && AttrManager.DELAY_ATTRS.includes(name)) {\n          if (delay == null) {\n            delay = {};\n          }\n\n          delay[name] = val;\n        } else {\n          if (set == null) {\n            set = {};\n          }\n\n          set[name] = val;\n        }\n      }\n\n      const offsetDefine = definition;\n\n      if (typeof offsetDefine.offset === 'function') {\n        if (offset == null) {\n          offset = {};\n        }\n\n        offset[name] = val;\n      }\n\n      const positionDefine = definition;\n\n      if (typeof positionDefine.position === 'function') {\n        if (position == null) {\n          position = {};\n        }\n\n        position[name] = val;\n      }\n    });\n    return {\n      raw,\n      normal,\n      set,\n      offset,\n      position,\n      delay\n    };\n  }\n\n  mergeProcessedAttrs(allProcessedAttrs, roProcessedAttrs) {\n    allProcessedAttrs.set = Object.assign(Object.assign({}, allProcessedAttrs.set), roProcessedAttrs.set);\n    allProcessedAttrs.position = Object.assign(Object.assign({}, allProcessedAttrs.position), roProcessedAttrs.position);\n    allProcessedAttrs.offset = Object.assign(Object.assign({}, allProcessedAttrs.offset), roProcessedAttrs.offset); // Handle also the special transform property.\n\n    const transform = allProcessedAttrs.normal && allProcessedAttrs.normal.transform;\n\n    if (transform != null && roProcessedAttrs.normal) {\n      roProcessedAttrs.normal.transform = transform;\n    }\n\n    allProcessedAttrs.normal = roProcessedAttrs.normal;\n  }\n\n  findAttrs(cellAttrs, rootNode, selectorCache, selectors) {\n    const merge = [];\n    const result = new Dictionary();\n    Object.keys(cellAttrs).forEach(selector => {\n      const attrs = cellAttrs[selector];\n\n      if (!ObjectExt.isPlainObject(attrs)) {\n        return;\n      }\n\n      const {\n        isCSSSelector,\n        elems\n      } = View.find(selector, rootNode, selectors);\n      selectorCache[selector] = elems;\n\n      for (let i = 0, l = elems.length; i < l; i += 1) {\n        const elem = elems[i];\n        const unique = selectors && selectors[selector] === elem;\n        const prev = result.get(elem);\n\n        if (prev) {\n          if (!prev.array) {\n            merge.push(elem);\n            prev.array = true;\n            prev.attrs = [prev.attrs];\n            prev.priority = [prev.priority];\n          }\n\n          const attributes = prev.attrs;\n          const selectedLength = prev.priority;\n\n          if (unique) {\n            // node referenced by `selector`\n            attributes.unshift(attrs);\n            selectedLength.unshift(-1);\n          } else {\n            // node referenced by `groupSelector` or CSSSelector\n            const sortIndex = ArrayExt.sortedIndex(selectedLength, isCSSSelector ? -1 : l);\n            attributes.splice(sortIndex, 0, attrs);\n            selectedLength.splice(sortIndex, 0, l);\n          }\n        } else {\n          result.set(elem, {\n            elem,\n            attrs,\n            priority: unique ? -1 : l,\n            array: false\n          });\n        }\n      }\n    });\n    merge.forEach(node => {\n      const item = result.get(node);\n      const arr = item.attrs;\n      item.attrs = arr.reduceRight((memo, attrs) => ObjectExt.merge(memo, attrs), {});\n    });\n    return result;\n  }\n\n  updateRelativeAttrs(elem, processedAttrs, refBBox, options) {\n    const rawAttrs = processedAttrs.raw || {};\n    let nodeAttrs = processedAttrs.normal || {};\n    const setAttrs = processedAttrs.set;\n    const positionAttrs = processedAttrs.position;\n    const offsetAttrs = processedAttrs.offset;\n    const delayAttrs = processedAttrs.delay;\n\n    const getOptions = () => ({\n      elem,\n      cell: this.cell,\n      view: this.view,\n      attrs: rawAttrs,\n      refBBox: refBBox.clone()\n    });\n\n    if (setAttrs != null) {\n      Object.keys(setAttrs).forEach(name => {\n        const val = setAttrs[name];\n        const def = this.getDefinition(name);\n\n        if (def != null) {\n          const ret = FunctionExt.call(def.set, this.view, val, getOptions());\n\n          if (typeof ret === 'object') {\n            nodeAttrs = Object.assign(Object.assign({}, nodeAttrs), ret);\n          } else if (ret != null) {\n            nodeAttrs[name] = ret;\n          }\n        }\n      });\n    }\n\n    if (Dom.isHTMLElement(elem)) {\n      // TODO: setting the `transform` attribute on HTMLElements\n      // via `node.style.transform = 'matrix(...)';` would introduce\n      // a breaking change (e.g. basic.TextBlock).\n      this.view.setAttrs(nodeAttrs, elem);\n      return;\n    } // The final translation of the subelement.\n\n\n    const nodeTransform = nodeAttrs.transform;\n    const transform = nodeTransform ? `${nodeTransform}` : null;\n    const nodeMatrix = Dom.transformStringToMatrix(transform);\n    const nodePosition = new Point(nodeMatrix.e, nodeMatrix.f);\n\n    if (nodeTransform) {\n      delete nodeAttrs.transform;\n      nodeMatrix.e = 0;\n      nodeMatrix.f = 0;\n    } // Calculates node scale determined by the scalable group.\n\n\n    let sx = 1;\n    let sy = 1;\n\n    if (positionAttrs || offsetAttrs) {\n      const scale = this.view.getScaleOfElement(elem, options.scalableNode);\n      sx = scale.sx;\n      sy = scale.sy;\n    }\n\n    let positioned = false;\n\n    if (positionAttrs != null) {\n      Object.keys(positionAttrs).forEach(name => {\n        const val = positionAttrs[name];\n        const def = this.getDefinition(name);\n\n        if (def != null) {\n          const ts = FunctionExt.call(def.position, this.view, val, getOptions());\n\n          if (ts != null) {\n            positioned = true;\n            nodePosition.translate(Point.create(ts).scale(sx, sy));\n          }\n        }\n      });\n    } // The node bounding box could depend on the `size`\n    // set from the previous loop.\n\n\n    this.view.setAttrs(nodeAttrs, elem);\n    let offseted = false;\n\n    if (offsetAttrs != null) {\n      // Check if the node is visible\n      const nodeBoundingRect = this.view.getBoundingRectOfElement(elem);\n\n      if (nodeBoundingRect.width > 0 && nodeBoundingRect.height > 0) {\n        const nodeBBox = Dom.transformRectangle(nodeBoundingRect, nodeMatrix).scale(1 / sx, 1 / sy);\n        Object.keys(offsetAttrs).forEach(name => {\n          const val = offsetAttrs[name];\n          const def = this.getDefinition(name);\n\n          if (def != null) {\n            const ts = FunctionExt.call(def.offset, this.view, val, {\n              elem,\n              cell: this.cell,\n              view: this.view,\n              attrs: rawAttrs,\n              refBBox: nodeBBox\n            });\n\n            if (ts != null) {\n              offseted = true;\n              nodePosition.translate(Point.create(ts).scale(sx, sy));\n            }\n          }\n        });\n      }\n    }\n\n    if (nodeTransform != null || positioned || offseted) {\n      nodePosition.round(1);\n      nodeMatrix.e = nodePosition.x;\n      nodeMatrix.f = nodePosition.y;\n      elem.setAttribute('transform', Dom.matrixToTransformString(nodeMatrix));\n    } // delay render\n\n\n    const updateDelayAttrs = () => {\n      if (delayAttrs != null) {\n        Object.keys(delayAttrs).forEach(name => {\n          const val = delayAttrs[name];\n          const def = this.getDefinition(name);\n\n          if (def != null) {\n            const ret = FunctionExt.call(def.set, this.view, val, getOptions());\n\n            if (typeof ret === 'object') {\n              this.view.setAttrs(ret, elem);\n            } else if (ret != null) {\n              this.view.setAttrs({\n                [name]: ret\n              }, elem);\n            }\n          }\n        });\n      }\n    };\n\n    if (options.forceSync) {\n      updateDelayAttrs();\n    } else {\n      Scheduler.scheduleTask(updateDelayAttrs);\n    }\n  }\n\n  update(rootNode, attrs, options) {\n    const selectorCache = {};\n    const nodesAttrs = this.findAttrs(options.attrs || attrs, rootNode, selectorCache, options.selectors); // `nodesAttrs` are different from all attributes, when\n    // rendering only attributes sent to this method.\n\n    const nodesAllAttrs = options.attrs ? this.findAttrs(attrs, rootNode, selectorCache, options.selectors) : nodesAttrs;\n    const specialItems = [];\n    nodesAttrs.each(data => {\n      const node = data.elem;\n      const nodeAttrs = data.attrs;\n      const processed = this.processAttrs(node, nodeAttrs);\n\n      if (processed.set == null && processed.position == null && processed.offset == null && processed.delay == null) {\n        this.view.setAttrs(processed.normal, node);\n      } else {\n        const data = nodesAllAttrs.get(node);\n        const nodeAllAttrs = data ? data.attrs : null;\n        const refSelector = nodeAllAttrs && nodeAttrs.ref == null ? nodeAllAttrs.ref : nodeAttrs.ref;\n        let refNode;\n\n        if (refSelector) {\n          refNode = (selectorCache[refSelector] || this.view.find(refSelector, rootNode, options.selectors))[0];\n\n          if (!refNode) {\n            throw new Error(`\"${refSelector}\" reference does not exist.`);\n          }\n        } else {\n          refNode = null;\n        }\n\n        const item = {\n          node,\n          refNode,\n          attributes: nodeAllAttrs,\n          processedAttributes: processed\n        }; // If an element in the list is positioned relative to this one, then\n        // we want to insert this one before it in the list.\n\n        const index = specialItems.findIndex(item => item.refNode === node);\n\n        if (index > -1) {\n          specialItems.splice(index, 0, item);\n        } else {\n          specialItems.push(item);\n        }\n      }\n    });\n    const bboxCache = new Dictionary();\n    let rotatableMatrix;\n    specialItems.forEach(item => {\n      const node = item.node;\n      const refNode = item.refNode;\n      let unrotatedRefBBox;\n      const isRefNodeRotatable = refNode != null && options.rotatableNode != null && Dom.contains(options.rotatableNode, refNode); // Find the reference element bounding box. If no reference was\n      // provided, we use the optional bounding box.\n\n      if (refNode) {\n        unrotatedRefBBox = bboxCache.get(refNode);\n      }\n\n      if (!unrotatedRefBBox) {\n        const target = isRefNodeRotatable ? options.rotatableNode : rootNode;\n        unrotatedRefBBox = refNode ? Dom.getBBox(refNode, {\n          target\n        }) : options.rootBBox;\n\n        if (refNode) {\n          bboxCache.set(refNode, unrotatedRefBBox);\n        }\n      }\n\n      let processedAttrs;\n\n      if (options.attrs && item.attributes) {\n        // If there was a special attribute affecting the position amongst\n        // passed-in attributes we have to merge it with the rest of the\n        // element's attributes as they are necessary to update the position\n        // relatively (i.e `ref-x` && 'ref-dx').\n        processedAttrs = this.processAttrs(node, item.attributes);\n        this.mergeProcessedAttrs(processedAttrs, item.processedAttributes);\n      } else {\n        processedAttrs = item.processedAttributes;\n      }\n\n      let refBBox = unrotatedRefBBox;\n\n      if (isRefNodeRotatable && options.rotatableNode != null && !options.rotatableNode.contains(node)) {\n        // If the referenced node is inside the rotatable group while the\n        // updated node is outside, we need to take the rotatable node\n        // transformation into account.\n        if (!rotatableMatrix) {\n          rotatableMatrix = Dom.transformStringToMatrix(Dom.attr(options.rotatableNode, 'transform'));\n        }\n\n        refBBox = Dom.transformRectangle(unrotatedRefBBox, rotatableMatrix);\n      }\n\n      const caller = specialItems.find(item => item.refNode === node);\n\n      if (caller) {\n        options.forceSync = true;\n      }\n\n      this.updateRelativeAttrs(node, processedAttrs, refBBox, options);\n    });\n  }\n\n}\n\n(function (AttrManager) {\n  AttrManager.CASE_SENSITIVE_ATTR = ['viewBox'];\n  AttrManager.DELAY_ATTRS = ['text', 'textWrap', 'sourceMarker', 'targetMarker'];\n})(AttrManager || (AttrManager = {}));","map":{"version":3,"mappings":";;AAAA,SACEA,SADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,SANF,QAOO,SAPP;AAQA,SAAoBC,KAApB,QAAiC,aAAjC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AAIA,OAAM,MAAOC,WAAP,CAAkB;EACtBC,YAAsBC,IAAtB,EAAoC;IAAd;EAAkB;;EAEtB,IAAJC,IAAI;IAChB,OAAO,KAAKD,IAAL,CAAUC,IAAjB;EACD;;EAESC,aAAa,CAACC,QAAD,EAAiB;IACtC,OAAO,KAAKF,IAAL,CAAUG,iBAAV,CAA4BD,QAA5B,CAAP;EACD;;EAESE,YAAY,CACpBC,IADoB,EAEpBC,GAFoB,EAEE;IAEtB,IAAIC,MAAJ;IACA,IAAIC,GAAJ;IACA,IAAIC,MAAJ;IACA,IAAIC,QAAJ;IACA,IAAIC,KAAJ;IAEA,MAAMC,QAAQ,GAAoD,EAAlE,CARsB,CAUtB;;IACAC,MAAM,CAACC,IAAP,CAAYR,GAAZ,EAAiBS,OAAjB,CAA0BC,IAAD,IAAS;MAChC,MAAMC,GAAG,GAAGX,GAAG,CAACU,IAAD,CAAf;MACA,MAAME,UAAU,GAAG,KAAKjB,aAAL,CAAmBe,IAAnB,CAAnB;MACA,MAAMG,OAAO,GAAG7B,WAAW,CAAC8B,IAAZ,CACdzB,IAAI,CAAC0B,iBADS,EAEd,KAAKtB,IAFS,EAGdmB,UAHc,EAIdD,GAJc,EAKd;QACEZ,IADF;QAEEiB,KAAK,EAAEhB,GAFT;QAGEN,IAAI,EAAE,KAAKA,IAHb;QAIED,IAAI,EAAE,KAAKA;MAJb,CALc,CAAhB;;MAaA,IAAImB,UAAU,IAAIC,OAAlB,EAA2B;QACzB,IAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;UAClC,IAAIX,MAAM,IAAI,IAAd,EAAoB;YAClBA,MAAM,GAAG,EAAT;UACD;;UACDA,MAAM,CAACW,UAAD,CAAN,GAAqBD,GAArB;QACD,CALD,MAKO,IAAIA,GAAG,KAAK,IAAZ,EAAkB;UACvBL,QAAQ,CAACW,IAAT,CAAc;YAAEP,IAAF;YAAQE;UAAR,CAAd;QACD;MACF,CATD,MASO;QACL,IAAIX,MAAM,IAAI,IAAd,EAAoB;UAClBA,MAAM,GAAG,EAAT;QACD;;QACD,MAAMiB,UAAU,GAAG3B,WAAW,CAAC4B,mBAAZ,CAAgCC,QAAhC,CAAyCV,IAAzC,IACfA,IADe,GAEfzB,SAAS,CAACoC,SAAV,CAAoBX,IAApB,CAFJ;QAGAT,MAAM,CAACiB,UAAD,CAAN,GAAqBP,GAArB;MACD;IACF,CAlCD;IAoCAL,QAAQ,CAACG,OAAT,CAAiB,CAAC;MAAEC,IAAF;MAAQE;IAAR,CAAD,KAAyB;MACxC,MAAMD,GAAG,GAAGX,GAAG,CAACU,IAAD,CAAf;MAEA,MAAMY,SAAS,GAAGV,UAAlB;;MACA,IAAI,OAAOU,SAAS,CAACpB,GAAjB,KAAyB,UAA7B,EAAyC;QACvC,IACE,CAACnB,GAAG,CAACwC,aAAJ,CAAkBxB,IAAlB,CAAD,IACAR,WAAW,CAACiC,WAAZ,CAAwBJ,QAAxB,CAAiCV,IAAjC,CAFF,EAGE;UACA,IAAIL,KAAK,IAAI,IAAb,EAAmB;YACjBA,KAAK,GAAG,EAAR;UACD;;UACDA,KAAK,CAACK,IAAD,CAAL,GAAcC,GAAd;QACD,CARD,MAQO;UACL,IAAIT,GAAG,IAAI,IAAX,EAAiB;YACfA,GAAG,GAAG,EAAN;UACD;;UACDA,GAAG,CAACQ,IAAD,CAAH,GAAYC,GAAZ;QACD;MACF;;MAED,MAAMc,YAAY,GAAGb,UAArB;;MACA,IAAI,OAAOa,YAAY,CAACtB,MAApB,KAA+B,UAAnC,EAA+C;QAC7C,IAAIA,MAAM,IAAI,IAAd,EAAoB;UAClBA,MAAM,GAAG,EAAT;QACD;;QACDA,MAAM,CAACO,IAAD,CAAN,GAAeC,GAAf;MACD;;MAED,MAAMe,cAAc,GAAGd,UAAvB;;MACA,IAAI,OAAOc,cAAc,CAACtB,QAAtB,KAAmC,UAAvC,EAAmD;QACjD,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;UACpBA,QAAQ,GAAG,EAAX;QACD;;QACDA,QAAQ,CAACM,IAAD,CAAR,GAAiBC,GAAjB;MACD;IACF,CApCD;IAsCA,OAAO;MACLX,GADK;MAELC,MAFK;MAGLC,GAHK;MAILC,MAJK;MAKLC,QALK;MAMLC;IANK,CAAP;EAQD;;EAESsB,mBAAmB,CAC3BC,iBAD2B,EAE3BC,gBAF2B,EAEiB;IAE5CD,iBAAiB,CAAC1B,GAAlB,GAAqBK,gCAChBqB,iBAAiB,CAAC1B,GADF,GAEhB2B,gBAAgB,CAAC3B,GAFD,CAArB;IAKA0B,iBAAiB,CAACxB,QAAlB,GAA0BG,gCACrBqB,iBAAiB,CAACxB,QADG,GAErByB,gBAAgB,CAACzB,QAFI,CAA1B;IAKAwB,iBAAiB,CAACzB,MAAlB,GAAwBI,gCACnBqB,iBAAiB,CAACzB,MADC,GAEnB0B,gBAAgB,CAAC1B,MAFE,CAAxB,CAZ4C,CAiB5C;;IACA,MAAM2B,SAAS,GACbF,iBAAiB,CAAC3B,MAAlB,IAA4B2B,iBAAiB,CAAC3B,MAAlB,CAAyB6B,SADvD;;IAEA,IAAIA,SAAS,IAAI,IAAb,IAAqBD,gBAAgB,CAAC5B,MAA1C,EAAkD;MAChD4B,gBAAgB,CAAC5B,MAAjB,CAAwB6B,SAAxB,GAAoCA,SAApC;IACD;;IACDF,iBAAiB,CAAC3B,MAAlB,GAA2B4B,gBAAgB,CAAC5B,MAA5C;EACD;;EAES8B,SAAS,CACjBC,SADiB,EAEjBC,QAFiB,EAGjBC,aAHiB,EAIjBC,SAJiB,EAIU;IAE3B,MAAMC,KAAK,GAAc,EAAzB;IACA,MAAMC,MAAM,GAQR,IAAIjD,UAAJ,EARJ;IAUAmB,MAAM,CAACC,IAAP,CAAYwB,SAAZ,EAAuBvB,OAAvB,CAAgC6B,QAAD,IAAa;MAC1C,MAAMtB,KAAK,GAAGgB,SAAS,CAACM,QAAD,CAAvB;;MACA,IAAI,CAACzD,SAAS,CAAC0D,aAAV,CAAwBvB,KAAxB,CAAL,EAAqC;QACnC;MACD;;MAED,MAAM;QAAEwB,aAAF;QAAiBC;MAAjB,IAA2BnD,IAAI,CAACoD,IAAL,CAAUJ,QAAV,EAAoBL,QAApB,EAA8BE,SAA9B,CAAjC;MACAD,aAAa,CAACI,QAAD,CAAb,GAA0BG,KAA1B;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;QAC/C,MAAM5C,IAAI,GAAG0C,KAAK,CAACE,CAAD,CAAlB;QACA,MAAMG,MAAM,GAAGX,SAAS,IAAIA,SAAS,CAACG,QAAD,CAAT,KAAwBvC,IAApD;QACA,MAAMgD,IAAI,GAAGV,MAAM,CAACW,GAAP,CAAWjD,IAAX,CAAb;;QACA,IAAIgD,IAAJ,EAAU;UACR,IAAI,CAACA,IAAI,CAACE,KAAV,EAAiB;YACfb,KAAK,CAACnB,IAAN,CAAWlB,IAAX;YACAgD,IAAI,CAACE,KAAL,GAAa,IAAb;YACAF,IAAI,CAAC/B,KAAL,GAAa,CAAC+B,IAAI,CAAC/B,KAAN,CAAb;YACA+B,IAAI,CAACG,QAAL,GAAgB,CAACH,IAAI,CAACG,QAAN,CAAhB;UACD;;UAED,MAAMC,UAAU,GAAGJ,IAAI,CAAC/B,KAAxB;UACA,MAAMoC,cAAc,GAAGL,IAAI,CAACG,QAA5B;;UACA,IAAIJ,MAAJ,EAAY;YACV;YACAK,UAAU,CAACE,OAAX,CAAmBrC,KAAnB;YACAoC,cAAc,CAACC,OAAf,CAAuB,CAAC,CAAxB;UACD,CAJD,MAIO;YACL;YACA,MAAMC,SAAS,GAAGxE,QAAQ,CAACyE,WAAT,CAChBH,cADgB,EAEhBZ,aAAa,GAAG,CAAC,CAAJ,GAAQI,CAFL,CAAlB;YAKAO,UAAU,CAACK,MAAX,CAAkBF,SAAlB,EAA6B,CAA7B,EAAgCtC,KAAhC;YACAoC,cAAc,CAACI,MAAf,CAAsBF,SAAtB,EAAiC,CAAjC,EAAoCV,CAApC;UACD;QACF,CAxBD,MAwBO;UACLP,MAAM,CAACnC,GAAP,CAAWH,IAAX,EAAiB;YACfA,IADe;YAEfiB,KAFe;YAGfkC,QAAQ,EAAEJ,MAAM,GAAG,CAAC,CAAJ,GAAQF,CAHT;YAIfK,KAAK,EAAE;UAJQ,CAAjB;QAMD;MACF;IACF,CA7CD;IA+CAb,KAAK,CAAC3B,OAAN,CAAegD,IAAD,IAAS;MACrB,MAAMC,IAAI,GAAGrB,MAAM,CAACW,GAAP,CAAWS,IAAX,CAAb;MACA,MAAME,GAAG,GAAGD,IAAI,CAAC1C,KAAjB;MACA0C,IAAI,CAAC1C,KAAL,GAAa2C,GAAG,CAACC,WAAJ,CACX,CAACC,IAAD,EAAO7C,KAAP,KAAiBnC,SAAS,CAACuD,KAAV,CAAgByB,IAAhB,EAAsB7C,KAAtB,CADN,EAEX,EAFW,CAAb;IAID,CAPD;IASA,OAAOqB,MAAP;EASD;;EAESyB,mBAAmB,CAC3B/D,IAD2B,EAE3BgE,cAF2B,EAG3BC,OAH2B,EAI3BC,OAJ2B,EAIO;IAElC,MAAMC,QAAQ,GAAGH,cAAc,CAAC/D,GAAf,IAAsB,EAAvC;IACA,IAAImE,SAAS,GAAGJ,cAAc,CAAC9D,MAAf,IAAyB,EAAzC;IACA,MAAMmE,QAAQ,GAAGL,cAAc,CAAC7D,GAAhC;IACA,MAAMmE,aAAa,GAAGN,cAAc,CAAC3D,QAArC;IACA,MAAMkE,WAAW,GAAGP,cAAc,CAAC5D,MAAnC;IACA,MAAMoE,UAAU,GAAGR,cAAc,CAAC1D,KAAlC;;IAEA,MAAMmE,UAAU,GAAG,OAAO;MACxBzE,IADwB;MAExBL,IAAI,EAAE,KAAKA,IAFa;MAGxBD,IAAI,EAAE,KAAKA,IAHa;MAIxBuB,KAAK,EAAEkD,QAJiB;MAKxBF,OAAO,EAAEA,OAAO,CAACS,KAAR;IALe,CAAP,CAAnB;;IAQA,IAAIL,QAAQ,IAAI,IAAhB,EAAsB;MACpB7D,MAAM,CAACC,IAAP,CAAY4D,QAAZ,EAAsB3D,OAAtB,CAA+BC,IAAD,IAAS;QACrC,MAAMC,GAAG,GAAGyD,QAAQ,CAAC1D,IAAD,CAApB;QACA,MAAMgE,GAAG,GAAG,KAAK/E,aAAL,CAAmBe,IAAnB,CAAZ;;QACA,IAAIgE,GAAG,IAAI,IAAX,EAAiB;UACf,MAAMC,GAAG,GAAG3F,WAAW,CAAC8B,IAAZ,CACT4D,GAA0B,CAACxE,GADlB,EAEV,KAAKT,IAFK,EAGVkB,GAHU,EAIV6D,UAAU,EAJA,CAAZ;;UAMA,IAAI,OAAOG,GAAP,KAAe,QAAnB,EAA6B;YAC3BR,SAAS,mCACJA,SADI,GAEJQ,GAFI,CAAT;UAID,CALD,MAKO,IAAIA,GAAG,IAAI,IAAX,EAAiB;YACtBR,SAAS,CAACzD,IAAD,CAAT,GAAkBiE,GAAlB;UACD;QACF;MACF,CAnBD;IAoBD;;IAED,IAAI5F,GAAG,CAACwC,aAAJ,CAAkBxB,IAAlB,CAAJ,EAA6B;MAC3B;MACA;MACA;MACA,KAAKN,IAAL,CAAU2E,QAAV,CAAmBD,SAAnB,EAA8BpE,IAA9B;MACA;IACD,CA9CiC,CAgDlC;;;IACA,MAAM6E,aAAa,GAAGT,SAAS,CAACrC,SAAhC;IACA,MAAMA,SAAS,GAAG8C,aAAa,GAAG,GAAGA,aAAa,EAAnB,GAAwB,IAAvD;IACA,MAAMC,UAAU,GAAG9F,GAAG,CAAC+F,uBAAJ,CAA4BhD,SAA5B,CAAnB;IACA,MAAMiD,YAAY,GAAG,IAAI5F,KAAJ,CAAU0F,UAAU,CAACG,CAArB,EAAwBH,UAAU,CAACI,CAAnC,CAArB;;IACA,IAAIL,aAAJ,EAAmB;MACjB,OAAOT,SAAS,CAACrC,SAAjB;MACA+C,UAAU,CAACG,CAAX,GAAe,CAAf;MACAH,UAAU,CAACI,CAAX,GAAe,CAAf;IACD,CAzDiC,CA2DlC;;;IACA,IAAIC,EAAE,GAAG,CAAT;IACA,IAAIC,EAAE,GAAG,CAAT;;IACA,IAAId,aAAa,IAAIC,WAArB,EAAkC;MAChC,MAAMc,KAAK,GAAG,KAAK3F,IAAL,CAAU4F,iBAAV,CACZtF,IADY,EAEZkE,OAAO,CAACqB,YAFI,CAAd;MAIAJ,EAAE,GAAGE,KAAK,CAACF,EAAX;MACAC,EAAE,GAAGC,KAAK,CAACD,EAAX;IACD;;IAED,IAAII,UAAU,GAAG,KAAjB;;IACA,IAAIlB,aAAa,IAAI,IAArB,EAA2B;MACzB9D,MAAM,CAACC,IAAP,CAAY6D,aAAZ,EAA2B5D,OAA3B,CAAoCC,IAAD,IAAS;QAC1C,MAAMC,GAAG,GAAG0D,aAAa,CAAC3D,IAAD,CAAzB;QACA,MAAMgE,GAAG,GAAG,KAAK/E,aAAL,CAAmBe,IAAnB,CAAZ;;QACA,IAAIgE,GAAG,IAAI,IAAX,EAAiB;UACf,MAAMc,EAAE,GAAGxG,WAAW,CAAC8B,IAAZ,CACR4D,GAA+B,CAACtE,QADxB,EAET,KAAKX,IAFI,EAGTkB,GAHS,EAIT6D,UAAU,EAJD,CAAX;;UAOA,IAAIgB,EAAE,IAAI,IAAV,EAAgB;YACdD,UAAU,GAAG,IAAb;YACAR,YAAY,CAACU,SAAb,CAAuBtG,KAAK,CAACuG,MAAN,CAAaF,EAAb,EAAiBJ,KAAjB,CAAuBF,EAAvB,EAA2BC,EAA3B,CAAvB;UACD;QACF;MACF,CAhBD;IAiBD,CA1FiC,CA4FlC;IACA;;;IACA,KAAK1F,IAAL,CAAU2E,QAAV,CAAmBD,SAAnB,EAA8BpE,IAA9B;IAEA,IAAI4F,QAAQ,GAAG,KAAf;;IACA,IAAIrB,WAAW,IAAI,IAAnB,EAAyB;MACvB;MACA,MAAMsB,gBAAgB,GAAG,KAAKnG,IAAL,CAAUoG,wBAAV,CAAmC9F,IAAnC,CAAzB;;MACA,IAAI6F,gBAAgB,CAACE,KAAjB,GAAyB,CAAzB,IAA8BF,gBAAgB,CAACG,MAAjB,GAA0B,CAA5D,EAA+D;QAC7D,MAAMC,QAAQ,GAAGjH,GAAG,CAACkH,kBAAJ,CACfL,gBADe,EAEff,UAFe,EAGfO,KAHe,CAGT,IAAIF,EAHK,EAGD,IAAIC,EAHH,CAAjB;QAKA5E,MAAM,CAACC,IAAP,CAAY8D,WAAZ,EAAyB7D,OAAzB,CAAkCC,IAAD,IAAS;UACxC,MAAMC,GAAG,GAAG2D,WAAW,CAAC5D,IAAD,CAAvB;UACA,MAAMgE,GAAG,GAAG,KAAK/E,aAAL,CAAmBe,IAAnB,CAAZ;;UACA,IAAIgE,GAAG,IAAI,IAAX,EAAiB;YACf,MAAMc,EAAE,GAAGxG,WAAW,CAAC8B,IAAZ,CACR4D,GAA6B,CAACvE,MADtB,EAET,KAAKV,IAFI,EAGTkB,GAHS,EAIT;cACEZ,IADF;cAEEL,IAAI,EAAE,KAAKA,IAFb;cAGED,IAAI,EAAE,KAAKA,IAHb;cAIEuB,KAAK,EAAEkD,QAJT;cAKEF,OAAO,EAAEgC;YALX,CAJS,CAAX;;YAaA,IAAIR,EAAE,IAAI,IAAV,EAAgB;cACdG,QAAQ,GAAG,IAAX;cACAZ,YAAY,CAACU,SAAb,CAAuBtG,KAAK,CAACuG,MAAN,CAAaF,EAAb,EAAiBJ,KAAjB,CAAuBF,EAAvB,EAA2BC,EAA3B,CAAvB;YACD;UACF;QACF,CAtBD;MAuBD;IACF;;IAED,IAAIP,aAAa,IAAI,IAAjB,IAAyBW,UAAzB,IAAuCI,QAA3C,EAAqD;MACnDZ,YAAY,CAACmB,KAAb,CAAmB,CAAnB;MACArB,UAAU,CAACG,CAAX,GAAeD,YAAY,CAACoB,CAA5B;MACAtB,UAAU,CAACI,CAAX,GAAeF,YAAY,CAACqB,CAA5B;MACArG,IAAI,CAACsG,YAAL,CAAkB,WAAlB,EAA+BtH,GAAG,CAACuH,uBAAJ,CAA4BzB,UAA5B,CAA/B;IACD,CAzIiC,CA2IlC;;;IACA,MAAM0B,gBAAgB,GAAG,MAAK;MAC5B,IAAIhC,UAAU,IAAI,IAAlB,EAAwB;QACtBhE,MAAM,CAACC,IAAP,CAAY+D,UAAZ,EAAwB9D,OAAxB,CAAiCC,IAAD,IAAS;UACvC,MAAMC,GAAG,GAAG4D,UAAU,CAAC7D,IAAD,CAAtB;UACA,MAAMgE,GAAG,GAAG,KAAK/E,aAAL,CAAmBe,IAAnB,CAAZ;;UACA,IAAIgE,GAAG,IAAI,IAAX,EAAiB;YACf,MAAMC,GAAG,GAAG3F,WAAW,CAAC8B,IAAZ,CACT4D,GAA0B,CAACxE,GADlB,EAEV,KAAKT,IAFK,EAGVkB,GAHU,EAIV6D,UAAU,EAJA,CAAZ;;YAMA,IAAI,OAAOG,GAAP,KAAe,QAAnB,EAA6B;cAC3B,KAAKlF,IAAL,CAAU2E,QAAV,CAAmBO,GAAnB,EAAwB5E,IAAxB;YACD,CAFD,MAEO,IAAI4E,GAAG,IAAI,IAAX,EAAiB;cACtB,KAAKlF,IAAL,CAAU2E,QAAV,CACE;gBACE,CAAC1D,IAAD,GAAQiE;cADV,CADF,EAIE5E,IAJF;YAMD;UACF;QACF,CArBD;MAsBD;IACF,CAzBD;;IA0BA,IAAIkE,OAAO,CAACuC,SAAZ,EAAuB;MACrBD,gBAAgB;IACjB,CAFD,MAEO;MACLrH,SAAS,CAACuH,YAAV,CAAuBF,gBAAvB;IACD;EACF;;EAEDG,MAAM,CACJzE,QADI,EAEJjB,KAFI,EAGJiD,OAHI,EAG8B;IAElC,MAAM/B,aAAa,GAAsC,EAAzD;IACA,MAAMyE,UAAU,GAAG,KAAK5E,SAAL,CACjBkC,OAAO,CAACjD,KAAR,IAAiBA,KADA,EAEjBiB,QAFiB,EAGjBC,aAHiB,EAIjB+B,OAAO,CAAC9B,SAJS,CAAnB,CAHkC,CAUlC;IACA;;IACA,MAAMyE,aAAa,GAAG3C,OAAO,CAACjD,KAAR,GAClB,KAAKe,SAAL,CAAef,KAAf,EAAsBiB,QAAtB,EAAgCC,aAAhC,EAA+C+B,OAAO,CAAC9B,SAAvD,CADkB,GAElBwE,UAFJ;IAIA,MAAME,YAAY,GAKZ,EALN;IAOAF,UAAU,CAACG,IAAX,CAAiBC,IAAD,IAAS;MACvB,MAAMtD,IAAI,GAAGsD,IAAI,CAAChH,IAAlB;MACA,MAAMoE,SAAS,GAAG4C,IAAI,CAAC/F,KAAvB;MACA,MAAMgG,SAAS,GAAG,KAAKlH,YAAL,CAAkB2D,IAAlB,EAAwBU,SAAxB,CAAlB;;MACA,IACE6C,SAAS,CAAC9G,GAAV,IAAiB,IAAjB,IACA8G,SAAS,CAAC5G,QAAV,IAAsB,IADtB,IAEA4G,SAAS,CAAC7G,MAAV,IAAoB,IAFpB,IAGA6G,SAAS,CAAC3G,KAAV,IAAmB,IAJrB,EAKE;QACA,KAAKZ,IAAL,CAAU2E,QAAV,CAAmB4C,SAAS,CAAC/G,MAA7B,EAAqCwD,IAArC;MACD,CAPD,MAOO;QACL,MAAMsD,IAAI,GAAGH,aAAa,CAAC5D,GAAd,CAAkBS,IAAlB,CAAb;QACA,MAAMwD,YAAY,GAAGF,IAAI,GAAGA,IAAI,CAAC/F,KAAR,GAAgB,IAAzC;QACA,MAAMkG,WAAW,GACfD,YAAY,IAAI9C,SAAS,CAACgD,GAAV,IAAiB,IAAjC,GACIF,YAAY,CAACE,GADjB,GAEIhD,SAAS,CAACgD,GAHhB;QAKA,IAAIC,OAAJ;;QACA,IAAIF,WAAJ,EAAiB;UACfE,OAAO,GAAG,CAAClF,aAAa,CAACgF,WAAD,CAAb,IACT,KAAKzH,IAAL,CAAUiD,IAAV,CACEwE,WADF,EAEEjF,QAFF,EAGEgC,OAAO,CAAC9B,SAHV,CADQ,EAKL,CALK,CAAV;;UAMA,IAAI,CAACiF,OAAL,EAAc;YACZ,MAAM,IAAIC,KAAJ,CAAU,IAAIH,WAAW,6BAAzB,CAAN;UACD;QACF,CAVD,MAUO;UACLE,OAAO,GAAG,IAAV;QACD;;QAED,MAAM1D,IAAI,GAAG;UACXD,IADW;UAEX2D,OAFW;UAGXjE,UAAU,EAAE8D,YAHD;UAIXK,mBAAmB,EAAEN;QAJV,CAAb,CAvBK,CA8BL;QACA;;QACA,MAAMO,KAAK,GAAGV,YAAY,CAACW,SAAb,CAAwB9D,IAAD,IAAUA,IAAI,CAAC0D,OAAL,KAAiB3D,IAAlD,CAAd;;QACA,IAAI8D,KAAK,GAAG,CAAC,CAAb,EAAgB;UACdV,YAAY,CAACrD,MAAb,CAAoB+D,KAApB,EAA2B,CAA3B,EAA8B7D,IAA9B;QACD,CAFD,MAEO;UACLmD,YAAY,CAAC5F,IAAb,CAAkByC,IAAlB;QACD;MACF;IACF,CAlDD;IAoDA,MAAM+D,SAAS,GAAmC,IAAIrI,UAAJ,EAAlD;IACA,IAAIsI,eAAJ;IACAb,YAAY,CAACpG,OAAb,CAAsBiD,IAAD,IAAS;MAC5B,MAAMD,IAAI,GAAGC,IAAI,CAACD,IAAlB;MACA,MAAM2D,OAAO,GAAG1D,IAAI,CAAC0D,OAArB;MAEA,IAAIO,gBAAJ;MACA,MAAMC,kBAAkB,GACtBR,OAAO,IAAI,IAAX,IACAnD,OAAO,CAAC4D,aAAR,IAAyB,IADzB,IAEA9I,GAAG,CAAC+I,QAAJ,CAAa7D,OAAO,CAAC4D,aAArB,EAAoCT,OAApC,CAHF,CAL4B,CAU5B;MACA;;MACA,IAAIA,OAAJ,EAAa;QACXO,gBAAgB,GAAGF,SAAS,CAACzE,GAAV,CAAcoE,OAAd,CAAnB;MACD;;MAED,IAAI,CAACO,gBAAL,EAAuB;QACrB,MAAMI,MAAM,GACVH,kBAAkB,GAAG3D,OAAO,CAAC4D,aAAX,GAA4B5F,QADhD;QAIA0F,gBAAgB,GAAGP,OAAO,GACtBrI,GAAG,CAACiJ,OAAJ,CAAYZ,OAAZ,EAAmC;UAAEW;QAAF,CAAnC,CADsB,GAEtB9D,OAAO,CAACgE,QAFZ;;QAIA,IAAIb,OAAJ,EAAa;UACXK,SAAS,CAACvH,GAAV,CAAckH,OAAd,EAAuBO,gBAAvB;QACD;MACF;;MAED,IAAI5D,cAAJ;;MACA,IAAIE,OAAO,CAACjD,KAAR,IAAiB0C,IAAI,CAACP,UAA1B,EAAsC;QACpC;QACA;QACA;QACA;QACAY,cAAc,GAAG,KAAKjE,YAAL,CAAkB2D,IAAlB,EAAwBC,IAAI,CAACP,UAA7B,CAAjB;QACA,KAAKxB,mBAAL,CAAyBoC,cAAzB,EAAyCL,IAAI,CAAC4D,mBAA9C;MACD,CAPD,MAOO;QACLvD,cAAc,GAAGL,IAAI,CAAC4D,mBAAtB;MACD;;MAED,IAAItD,OAAO,GAAG2D,gBAAd;;MACA,IACEC,kBAAkB,IAClB3D,OAAO,CAAC4D,aAAR,IAAyB,IADzB,IAEA,CAAC5D,OAAO,CAAC4D,aAAR,CAAsBC,QAAtB,CAA+BrE,IAA/B,CAHH,EAIE;QACA;QACA;QACA;QACA,IAAI,CAACiE,eAAL,EAAsB;UACpBA,eAAe,GAAG3I,GAAG,CAAC+F,uBAAJ,CAChB/F,GAAG,CAACmJ,IAAJ,CAASjE,OAAO,CAAC4D,aAAjB,EAAgC,WAAhC,CADgB,CAAlB;QAGD;;QACD7D,OAAO,GAAGjF,GAAG,CAACkH,kBAAJ,CAAuB0B,gBAAvB,EAA0CD,eAA1C,CAAV;MACD;;MAED,MAAMS,MAAM,GAAGtB,YAAY,CAACnE,IAAb,CAAmBgB,IAAD,IAAUA,IAAI,CAAC0D,OAAL,KAAiB3D,IAA7C,CAAf;;MACA,IAAI0E,MAAJ,EAAY;QACVlE,OAAO,CAACuC,SAAR,GAAoB,IAApB;MACD;;MAED,KAAK1C,mBAAL,CAAyBL,IAAzB,EAA+BM,cAA/B,EAA+CC,OAA/C,EAAwDC,OAAxD;IACD,CAjED;EAkED;;AA/hBqB;;AAkiBxB,WAAiB1E,WAAjB,EAA4B;EAyBbA,kCAAsB,CAAC,SAAD,CAAtB;EACAA,0BAAc,CACzB,MADyB,EAEzB,UAFyB,EAGzB,cAHyB,EAIzB,cAJyB,CAAd;AAMd,CAhCD,EAAiBA,WAAW,KAAXA,WAAW,MAA5B","names":["ObjectExt","ArrayExt","Dom","FunctionExt","StringExt","Scheduler","Point","Dictionary","Attr","View","AttrManager","constructor","view","cell","getDefinition","attrName","getAttrDefinition","processAttrs","elem","raw","normal","set","offset","position","delay","specials","Object","keys","forEach","name","val","definition","isValid","call","isValidDefinition","attrs","push","normalName","CASE_SENSITIVE_ATTR","includes","kebabCase","setDefine","isHTMLElement","DELAY_ATTRS","offsetDefine","positionDefine","mergeProcessedAttrs","allProcessedAttrs","roProcessedAttrs","transform","findAttrs","cellAttrs","rootNode","selectorCache","selectors","merge","result","selector","isPlainObject","isCSSSelector","elems","find","i","l","length","unique","prev","get","array","priority","attributes","selectedLength","unshift","sortIndex","sortedIndex","splice","node","item","arr","reduceRight","memo","updateRelativeAttrs","processedAttrs","refBBox","options","rawAttrs","nodeAttrs","setAttrs","positionAttrs","offsetAttrs","delayAttrs","getOptions","clone","def","ret","nodeTransform","nodeMatrix","transformStringToMatrix","nodePosition","e","f","sx","sy","scale","getScaleOfElement","scalableNode","positioned","ts","translate","create","offseted","nodeBoundingRect","getBoundingRectOfElement","width","height","nodeBBox","transformRectangle","round","x","y","setAttribute","matrixToTransformString","updateDelayAttrs","forceSync","scheduleTask","update","nodesAttrs","nodesAllAttrs","specialItems","each","data","processed","nodeAllAttrs","refSelector","ref","refNode","Error","processedAttributes","index","findIndex","bboxCache","rotatableMatrix","unrotatedRefBBox","isRefNodeRotatable","rotatableNode","contains","target","getBBox","rootBBox","attr","caller"],"sourceRoot":"","sources":["../../src/view/attr.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}