{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.LinkedListNode = void 0;\n\nvar defaultComparator = function defaultComparator(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * 链表中单个元素节点\n */\n\n\nvar LinkedListNode =\n/** @class */\nfunction () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n\n    this.value = value;\n    this.next = next;\n  }\n\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\".concat(this.value);\n  };\n\n  return LinkedListNode;\n}();\n\nexports.LinkedListNode = LinkedListNode;\n\nvar LinkedList =\n/** @class */\nfunction () {\n  function LinkedList(comparator) {\n    if (comparator === void 0) {\n      comparator = defaultComparator;\n    }\n\n    this.head = null;\n    this.tail = null;\n    this.compare = comparator;\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n\n\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n\n\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value); // 如果不存在头节点，则将创建的新节点作为头节点\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    } // 将新节点附加到链表末尾\n\n\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n\n\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n\n    var deleteNode = null; // 如果删除的是头部元素，则将next作为头元素\n\n    while (this.head && this.compare(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n\n    var currentNode = this.head;\n\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    } // 检查尾部节点是否被删除\n\n\n    if (this.compare(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n\n\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n        value = _b === void 0 ? undefined : _b,\n        _c = _a.callback,\n        callback = _c === void 0 ? undefined : _c;\n\n    if (!this.head) {\n      return null;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      } // 如果指定了 value，则按 value 查找\n\n\n      if (value !== undefined && this.compare(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      currentNode = currentNode.next;\n    }\n\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n\n\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n\n\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n\n    var deletedHead = this.head;\n\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n\n\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n\n\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n\n\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next; // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n\n      currentNode.next = prevNode; // 将 prevNode 和 currentNode 向前移动一步\n\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n\n  return LinkedList;\n}();\n\nvar _default = LinkedList;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","LinkedListNode","defaultComparator","a","b","next","prototype","toString","callback","concat","LinkedList","comparator","head","tail","compare","prepend","newNode","append","delete","deleteNode","currentNode","find","_a","_b","undefined","_c","deleteTail","deletedTail","deleteHead","deletedHead","fromArray","values","_this","forEach","toArray","nodes","push","reverse","prevNode","nextNode","map","node","_default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/lib/structs/linked-list.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.LinkedListNode = void 0;\n\nvar defaultComparator = function defaultComparator(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * 链表中单个元素节点\n */\n\n\nvar LinkedListNode =\n/** @class */\nfunction () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n\n    this.value = value;\n    this.next = next;\n  }\n\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\".concat(this.value);\n  };\n\n  return LinkedListNode;\n}();\n\nexports.LinkedListNode = LinkedListNode;\n\nvar LinkedList =\n/** @class */\nfunction () {\n  function LinkedList(comparator) {\n    if (comparator === void 0) {\n      comparator = defaultComparator;\n    }\n\n    this.head = null;\n    this.tail = null;\n    this.compare = comparator;\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n\n\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n\n\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value); // 如果不存在头节点，则将创建的新节点作为头节点\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    } // 将新节点附加到链表末尾\n\n\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n\n\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n\n    var deleteNode = null; // 如果删除的是头部元素，则将next作为头元素\n\n    while (this.head && this.compare(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n\n    var currentNode = this.head;\n\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    } // 检查尾部节点是否被删除\n\n\n    if (this.compare(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n\n\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n        value = _b === void 0 ? undefined : _b,\n        _c = _a.callback,\n        callback = _c === void 0 ? undefined : _c;\n\n    if (!this.head) {\n      return null;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      } // 如果指定了 value，则按 value 查找\n\n\n      if (value !== undefined && this.compare(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      currentNode = currentNode.next;\n    }\n\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n\n\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n\n\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n\n    var deletedHead = this.head;\n\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n\n\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n\n\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n\n\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next; // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n\n      currentNode.next = prevNode; // 将 prevNode 和 currentNode 向前移动一步\n\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n\n  return LinkedList;\n}();\n\nvar _default = LinkedList;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}