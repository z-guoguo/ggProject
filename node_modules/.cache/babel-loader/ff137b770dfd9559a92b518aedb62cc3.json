{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { ArrayExt } from '../../../util';\nimport { Point } from '../../../geometry';\n/**\n * Helper structure to identify whether a point lies inside an obstacle.\n */\n\nexport class ObstacleMap {\n  constructor(options) {\n    this.options = options;\n    this.mapGridSize = 100;\n    this.map = {};\n  }\n  /**\n   * Builds a map of all nodes for quicker obstacle queries i.e. is a point\n   * contained in any obstacle?\n   *\n   * A simplified grid search.\n   */\n\n\n  build(model, edge) {\n    const options = this.options; // source or target node could be excluded from set of obstacles\n\n    const excludedTerminals = options.excludeTerminals.reduce((memo, type) => {\n      const terminal = edge[type];\n\n      if (terminal) {\n        const cell = model.getCell(terminal.cell);\n\n        if (cell) {\n          memo.push(cell);\n        }\n      }\n\n      return memo;\n    }, []);\n    let excludedAncestors = [];\n    const source = model.getCell(edge.getSourceCellId());\n\n    if (source) {\n      excludedAncestors = ArrayExt.union(excludedAncestors, source.getAncestors().map(cell => cell.id));\n    }\n\n    const target = model.getCell(edge.getTargetCellId());\n\n    if (target) {\n      excludedAncestors = ArrayExt.union(excludedAncestors, target.getAncestors().map(cell => cell.id));\n    } // The graph is divided into smaller cells, where each holds information\n    // about which node belong to it. When we query whether a point lies\n    // inside an obstacle we don't need to go through all obstacles, we check\n    // only those in a particular cell.\n\n\n    const mapGridSize = this.mapGridSize;\n    model.getNodes().reduce((map, node) => {\n      const shape = node.shape;\n      const excludeShapes = options.excludeShapes;\n      const excType = shape ? excludeShapes.includes(shape) : false;\n      const excTerminal = excludedTerminals.some(cell => cell.id === node.id);\n      const excNode = options.excludeNodes.includes(node);\n      const excAncestor = excludedAncestors.includes(node.id);\n      const excHidden = options.excludeHiddenNodes && !node.isVisible();\n      const excluded = excType || excTerminal || excNode || excAncestor || excHidden;\n\n      if (!excluded) {\n        const bbox = node.getBBox().moveAndExpand(options.paddingBox);\n        const origin = bbox.getOrigin().snapToGrid(mapGridSize);\n        const corner = bbox.getCorner().snapToGrid(mapGridSize);\n\n        for (let x = origin.x; x <= corner.x; x += mapGridSize) {\n          for (let y = origin.y; y <= corner.y; y += mapGridSize) {\n            const key = new Point(x, y).toString();\n\n            if (map[key] == null) {\n              map[key] = [];\n            }\n\n            map[key].push(bbox);\n          }\n        }\n      }\n\n      return map;\n    }, this.map);\n    return this;\n  }\n\n  isAccessible(point) {\n    const key = point.clone().snapToGrid(this.mapGridSize).toString();\n    const rects = this.map[key];\n    return rects ? rects.every(rect => !rect.containsPoint(point)) : true;\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,eAAzB;AAEA,SAAoBC,KAApB,QAAiC,mBAAjC;AAIA;;;;AAGA,OAAM,MAAOC,WAAP,CAAkB;EAUtBC,YAAYC,OAAZ,EAAoC;IAClC,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmB,GAAnB;IACA,KAAKC,GAAL,GAAW,EAAX;EACD;EAED;;;;;;;;EAMAC,KAAK,CAACC,KAAD,EAAeC,IAAf,EAAyB;IAC5B,MAAML,OAAO,GAAG,KAAKA,OAArB,CAD4B,CAE5B;;IACA,MAAMM,iBAAiB,GAAGN,OAAO,CAACO,gBAAR,CAAyBC,MAAzB,CACxB,CAACC,IAAD,EAAOC,IAAP,KAAe;MACb,MAAMC,QAAQ,GAAGN,IAAI,CAACK,IAAD,CAArB;;MACA,IAAIC,QAAJ,EAAc;QACZ,MAAMC,IAAI,GAAGR,KAAK,CAACS,OAAN,CAAeF,QAAkC,CAACC,IAAlD,CAAb;;QACA,IAAIA,IAAJ,EAAU;UACRH,IAAI,CAACK,IAAL,CAAUF,IAAV;QACD;MACF;;MAED,OAAOH,IAAP;IACD,CAXuB,EAYxB,EAZwB,CAA1B;IAeA,IAAIM,iBAAiB,GAAa,EAAlC;IAEA,MAAMC,MAAM,GAAGZ,KAAK,CAACS,OAAN,CAAcR,IAAI,CAACY,eAAL,EAAd,CAAf;;IACA,IAAID,MAAJ,EAAY;MACVD,iBAAiB,GAAGnB,QAAQ,CAACsB,KAAT,CAClBH,iBADkB,EAElBC,MAAM,CAACG,YAAP,GAAsBjB,GAAtB,CAA2BU,IAAD,IAAUA,IAAI,CAACQ,EAAzC,CAFkB,CAApB;IAID;;IAED,MAAMC,MAAM,GAAGjB,KAAK,CAACS,OAAN,CAAcR,IAAI,CAACiB,eAAL,EAAd,CAAf;;IACA,IAAID,MAAJ,EAAY;MACVN,iBAAiB,GAAGnB,QAAQ,CAACsB,KAAT,CAClBH,iBADkB,EAElBM,MAAM,CAACF,YAAP,GAAsBjB,GAAtB,CAA2BU,IAAD,IAAUA,IAAI,CAACQ,EAAzC,CAFkB,CAApB;IAID,CAlC2B,CAoC5B;IACA;IACA;IACA;;;IACA,MAAMnB,WAAW,GAAG,KAAKA,WAAzB;IAEAG,KAAK,CAACmB,QAAN,GAAiBf,MAAjB,CAAwB,CAACN,GAAD,EAAMsB,IAAN,KAAc;MACpC,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;MACA,MAAMC,aAAa,GAAG1B,OAAO,CAAC0B,aAA9B;MACA,MAAMC,OAAO,GAAGF,KAAK,GAAGC,aAAa,CAACE,QAAd,CAAuBH,KAAvB,CAAH,GAAmC,KAAxD;MACA,MAAMI,WAAW,GAAGvB,iBAAiB,CAACwB,IAAlB,CAAwBlB,IAAD,IAAUA,IAAI,CAACQ,EAAL,KAAYI,IAAI,CAACJ,EAAlD,CAApB;MACA,MAAMW,OAAO,GAAG/B,OAAO,CAACgC,YAAR,CAAqBJ,QAArB,CAA8BJ,IAA9B,CAAhB;MACA,MAAMS,WAAW,GAAGlB,iBAAiB,CAACa,QAAlB,CAA2BJ,IAAI,CAACJ,EAAhC,CAApB;MACA,MAAMc,SAAS,GAAGlC,OAAO,CAACmC,kBAAR,IAA8B,CAACX,IAAI,CAACY,SAAL,EAAjD;MACA,MAAMC,QAAQ,GACZV,OAAO,IAAIE,WAAX,IAA0BE,OAA1B,IAAqCE,WAArC,IAAoDC,SADtD;;MAGA,IAAI,CAACG,QAAL,EAAe;QACb,MAAMC,IAAI,GAAGd,IAAI,CAACe,OAAL,GAAeC,aAAf,CAA6BxC,OAAO,CAACyC,UAArC,CAAb;QACA,MAAMC,MAAM,GAAGJ,IAAI,CAACK,SAAL,GAAiBC,UAAjB,CAA4B3C,WAA5B,CAAf;QACA,MAAM4C,MAAM,GAAGP,IAAI,CAACQ,SAAL,GAAiBF,UAAjB,CAA4B3C,WAA5B,CAAf;;QAEA,KAAK,IAAI8C,CAAC,GAAGL,MAAM,CAACK,CAApB,EAAuBA,CAAC,IAAIF,MAAM,CAACE,CAAnC,EAAsCA,CAAC,IAAI9C,WAA3C,EAAwD;UACtD,KAAK,IAAI+C,CAAC,GAAGN,MAAM,CAACM,CAApB,EAAuBA,CAAC,IAAIH,MAAM,CAACG,CAAnC,EAAsCA,CAAC,IAAI/C,WAA3C,EAAwD;YACtD,MAAMgD,GAAG,GAAG,IAAIpD,KAAJ,CAAUkD,CAAV,EAAaC,CAAb,EAAgBE,QAAhB,EAAZ;;YACA,IAAIhD,GAAG,CAAC+C,GAAD,CAAH,IAAY,IAAhB,EAAsB;cACpB/C,GAAG,CAAC+C,GAAD,CAAH,GAAW,EAAX;YACD;;YACD/C,GAAG,CAAC+C,GAAD,CAAH,CAASnC,IAAT,CAAcwB,IAAd;UACD;QACF;MACF;;MACD,OAAOpC,GAAP;IACD,CA3BD,EA2BG,KAAKA,GA3BR;IA6BA,OAAO,IAAP;EACD;;EAEDiD,YAAY,CAACC,KAAD,EAAa;IACvB,MAAMH,GAAG,GAAGG,KAAK,CAACC,KAAN,GAAcT,UAAd,CAAyB,KAAK3C,WAA9B,EAA2CiD,QAA3C,EAAZ;IAEA,MAAMI,KAAK,GAAG,KAAKpD,GAAL,CAAS+C,GAAT,CAAd;IACA,OAAOK,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAaC,IAAD,IAAU,CAACA,IAAI,CAACC,aAAL,CAAmBL,KAAnB,CAAvB,CAAH,GAAuD,IAAnE;EACD;;AArGqB","names":["ArrayExt","Point","ObstacleMap","constructor","options","mapGridSize","map","build","model","edge","excludedTerminals","excludeTerminals","reduce","memo","type","terminal","cell","getCell","push","excludedAncestors","source","getSourceCellId","union","getAncestors","id","target","getTargetCellId","getNodes","node","shape","excludeShapes","excType","includes","excTerminal","some","excNode","excludeNodes","excAncestor","excHidden","excludeHiddenNodes","isVisible","excluded","bbox","getBBox","moveAndExpand","paddingBox","origin","getOrigin","snapToGrid","corner","getCorner","x","y","key","toString","isAccessible","point","clone","rects","every","rect","containsPoint"],"sourceRoot":"","sources":["../../../../src/registry/router/manhattan/obstacle-map.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}