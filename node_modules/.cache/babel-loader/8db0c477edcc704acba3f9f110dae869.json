{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _class3, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { gl } from '../gl';\nexport var RenderPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.GeometryComponentManager), _dec4 = inject(IDENTIFIER.MaterialComponentManager), _dec5 = inject(IDENTIFIER.CullableComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec7 = inject(IDENTIFIER.HierarchyComponentManager), _dec8 = inject(IDENTIFIER.Systems), _dec9 = named(IDENTIFIER.FrameGraphSystem), _dec10 = inject(IDENTIFIER.RenderEngine), _dec11 = inject(IDENTIFIER.ResourcePool), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function RenderPass() {\n    var _this = this;\n\n    _classCallCheck(this, RenderPass);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"geometry\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"material\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"cullable\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"frameGraphSystem\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor9, this);\n\n    this.modelCache = {};\n\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'color buffer', {\n        width: 1,\n        height: 1,\n        usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      };\n    };\n\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var resourceNode, framebuffer, _iterator, _step, view, canvas;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resourceNode = fg.getResourceNode(pass.data.output);\n                framebuffer = _this.resourcePool.getOrCreateResource(resourceNode.resource); // initialize model of each mesh\n\n                _iterator = _createForOfIteratorHelper(views);\n                _context.prev = 3;\n\n                _iterator.s();\n\n              case 5:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 11;\n                  break;\n                }\n\n                view = _step.value;\n                _context.next = 9;\n                return _this.initView(view);\n\n              case 9:\n                _context.next = 5;\n                break;\n\n              case 11:\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](3);\n\n                _iterator.e(_context.t0);\n\n              case 16:\n                _context.prev = 16;\n\n                _iterator.f();\n\n                return _context.finish(16);\n\n              case 19:\n                canvas = _this.engine.getCanvas();\n                framebuffer.resize({\n                  width: canvas.width,\n                  height: canvas.height\n                });\n\n                _this.engine.setScissor({\n                  enable: false\n                });\n\n                _this.engine.clear({\n                  framebuffer: framebuffer,\n                  color: views[0].getClearColor(),\n                  // TODO: use clearColor defined in view\n                  depth: 1\n                });\n\n                _this.engine.useFramebuffer(framebuffer, function () {\n                  var _iterator2 = _createForOfIteratorHelper(views),\n                      _step2;\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      var view = _step2.value; // must do rendering in a sync way\n\n                      _this.renderView(view);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                });\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 13, 16, 19]]);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(RenderPass, [{\n    key: \"renderView\",\n    value: function renderView(view) {\n      var scene = view.getScene();\n      var camera = view.getCamera(); // get VP matrix from camera\n\n      var viewMatrix = camera.getViewTransform();\n      var viewProjectionMatrix = mat4.multiply(mat4.create(), camera.getPerspective(), viewMatrix); // TODO: use cached planes if camera was not changed\n\n      camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n      var _view$getViewport = view.getViewport(),\n          x = _view$getViewport.x,\n          y = _view$getViewport.y,\n          width = _view$getViewport.width,\n          height = _view$getViewport.height;\n\n      this.engine.viewport({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }); // this.engine.setScissor({\n      //   enable: true,\n      //   box: { x, y, width, height },\n      // });\n      // this.engine.clear({\n      //   // framebuffer,\n      //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n      //   depth: 1,\n      // });\n\n      var _iterator3 = _createForOfIteratorHelper(scene.getEntities()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var meshEntity = _step3.value;\n          this.renderMesh(meshEntity, {\n            camera: camera,\n            view: view,\n            viewMatrix: viewMatrix\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"renderMesh\",\n    value: function renderMesh(meshEntity, _ref2) {\n      var camera = _ref2.camera,\n          view = _ref2.view,\n          viewMatrix = _ref2.viewMatrix;\n      var mesh = this.mesh.getComponentByEntity(meshEntity);\n\n      if (!mesh || !mesh.visible) {\n        return;\n      } // filter meshes with frustum culling\n      // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n      //   return;\n      // }\n\n\n      var material = mesh.material;\n      var geometry = mesh.geometry; // geometry 在自己的 System 中完成脏检查后的更新\n\n      if (!geometry || geometry.dirty || !material) {\n        return;\n      } // get model matrix from mesh\n\n\n      var transform = this.transform.getComponentByEntity(meshEntity);\n      var modelViewMatrix = mat4.multiply(mat4.create(), viewMatrix, transform.worldTransform);\n\n      var _view$getViewport2 = view.getViewport(),\n          width = _view$getViewport2.width,\n          height = _view$getViewport2.height; // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n\n\n      material.setUniform({\n        projectionMatrix: camera.getPerspective(),\n        modelViewMatrix: modelViewMatrix,\n        modelMatrix: transform.worldTransform,\n        viewMatrix: viewMatrix,\n        cameraPosition: camera.getPosition(),\n        u_viewport: [width, height]\n      });\n\n      if (mesh.model) {\n        mesh.model.draw({\n          uniforms: material.uniforms.reduce(function (cur, prev) {\n            cur[prev.name] = prev.data;\n            return cur;\n          }, {})\n        });\n        material.uniforms.forEach(function (u) {\n          u.dirty = false;\n        });\n        material.dirty = false;\n      }\n    }\n  }, {\n    key: \"initMesh\",\n    value: function () {\n      var _initMesh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(meshEntity, view) {\n        var mesh, material, geometry, modelCacheKey, _this$engine, createModel, createAttribute, modelInitializationOptions;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                mesh = this.mesh.getComponentByEntity(meshEntity);\n\n                if (mesh) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                material = mesh.material;\n                geometry = mesh.geometry;\n\n                if (!(!geometry || geometry.dirty || !material)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 7:\n                if (mesh.model) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                modelCacheKey = \"m-\".concat(material.entity, \"-g-\").concat(geometry.entity);\n\n                if (!this.modelCache[modelCacheKey]) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                mesh.model = this.modelCache[modelCacheKey];\n                return _context2.abrupt(\"return\");\n\n              case 12:\n                material.setUniform({\n                  projectionMatrix: 1,\n                  modelViewMatrix: 1,\n                  modelMatrix: 1,\n                  viewMatrix: 1,\n                  cameraPosition: 1,\n                  u_viewport: 1\n                });\n                _this$engine = this.engine, createModel = _this$engine.createModel, createAttribute = _this$engine.createAttribute;\n                modelInitializationOptions = {\n                  vs: material.vertexShaderGLSL,\n                  fs: material.fragmentShaderGLSL,\n                  defines: material.defines,\n                  attributes: geometry.attributes.reduce(function (cur, prev) {\n                    if (prev.data && prev.buffer) {\n                      cur[prev.name] = createAttribute({\n                        buffer: prev.buffer,\n                        attributes: prev.attributes,\n                        arrayStride: prev.arrayStride,\n                        stepMode: prev.stepMode,\n                        divisor: prev.stepMode === 'vertex' ? 0 : 1\n                      });\n                    }\n\n                    return cur;\n                  }, {}),\n                  uniforms: material.uniforms.reduce(function (cur, prev) {\n                    cur[prev.name] = prev.data;\n                    return cur;\n                  }, {}),\n                  scissor: {\n                    enable: true,\n                    // @ts-ignore\n                    box: function box() {\n                      return view.getViewport();\n                    }\n                  }\n                };\n\n                if (material.cull) {\n                  modelInitializationOptions.cull = material.cull;\n                }\n\n                if (material.depth) {\n                  modelInitializationOptions.depth = material.depth;\n                }\n\n                if (material.blend) {\n                  modelInitializationOptions.blend = material.blend;\n                }\n\n                if (geometry.indicesBuffer) {\n                  modelInitializationOptions.elements = geometry.indicesBuffer;\n                }\n\n                if (geometry.maxInstancedCount) {\n                  modelInitializationOptions.instances = geometry.maxInstancedCount;\n                  modelInitializationOptions.count = geometry.vertexCount || 3;\n                }\n\n                _context2.next = 22;\n                return createModel(modelInitializationOptions);\n\n              case 22:\n                mesh.model = _context2.sent;\n                this.modelCache[modelCacheKey] = mesh.model;\n\n              case 24:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initMesh(_x4, _x5) {\n        return _initMesh.apply(this, arguments);\n      }\n\n      return initMesh;\n    }()\n  }, {\n    key: \"initView\",\n    value: function () {\n      var _initView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(view) {\n        var scene, _iterator4, _step4, meshEntity;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                scene = view.getScene();\n                _iterator4 = _createForOfIteratorHelper(scene.getEntities());\n                _context3.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                meshEntity = _step4.value;\n                _context3.next = 8;\n                return this.initMesh(meshEntity, view);\n\n              case 8:\n                _context3.next = 4;\n                break;\n\n              case 10:\n                _context3.next = 15;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](2);\n\n                _iterator4.e(_context3.t0);\n\n              case 15:\n                _context3.prev = 15;\n\n                _iterator4.f();\n\n                return _context3.finish(15);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 12, 15, 18]]);\n      }));\n\n      function initView(_x6) {\n        return _initView.apply(this, arguments);\n      }\n\n      return initView;\n    }()\n  }]);\n\n  return RenderPass;\n}(), _class3.IDENTIFIER = 'Render Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"frameGraphSystem\", [_dec8, _dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec10], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"mappings":"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","names":["mat4","inject","injectable","named","IDENTIFIER","gl","RenderPass","MeshComponentManager","GeometryComponentManager","MaterialComponentManager","CullableComponentManager","TransformComponentManager","HierarchyComponentManager","Systems","FrameGraphSystem","RenderEngine","ResourcePool","_classCallCheck","_initializerDefineProperty","modelCache","setup","fg","passNode","pass","output","createRenderTarget","width","height","usage","RENDER_ATTACHMENT","SAMPLED","COPY_SRC","data","write","execute","views","resourceNode","getResourceNode","framebuffer","_this","resourcePool","getOrCreateResource","resource","_iterator","_context","view","initView","canvas","engine","getCanvas","resize","setScissor","enable","clear","color","getClearColor","depth","useFramebuffer","renderView","_iterator2","_createClass","key","value","scene","getScene","camera","getCamera","viewMatrix","getViewTransform","viewProjectionMatrix","multiply","create","getPerspective","getFrustum","extractFromVPMatrix","getViewport","x","y","viewport","getEntities","meshEntity","renderMesh","_iterator3","mesh","getComponentByEntity","visible","material","geometry","dirty","transform","modelViewMatrix","worldTransform","setUniform","projectionMatrix","modelMatrix","cameraPosition","getPosition","u_viewport","model","draw","uniforms","reduce","cur","prev","name","forEach","u","_context2","modelCacheKey","entity","_this$engine","createModel","createAttribute","modelInitializationOptions","vs","vertexShaderGLSL","fs","fragmentShaderGLSL","defines","attributes","buffer","arrayStride","stepMode","divisor","scissor","box","cull","blend","indicesBuffer","elements","maxInstancedCount","instances","count","vertexCount","_iterator4","_context3","initMesh","configurable","enumerable","writable","initializer"],"sources":["../../../../src/components/renderer/passes/RenderPass.ts"],"sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable, named } from 'inversify';\nimport { Entity } from '../../..';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { GeometryComponent } from '../../geometry/GeometryComponent';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { CullableComponent } from '../../mesh/CullableComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { HierarchyComponent } from '../../scenegraph/HierarchyComponent';\nimport { TransformComponent } from '../../scenegraph/TransformComponent';\nimport { gl } from '../gl';\nimport { IAttribute } from '../IAttribute';\nimport { IModel, IModelInitializationOptions } from '../IModel';\nimport { ICamera, IRendererService, IView } from '../IRendererService';\nimport { IUniform } from '../IUniform';\nimport { IRenderPass } from './IRenderPass';\n\nexport interface RenderPassData {\n  output: FrameGraphHandle;\n}\n\n@injectable()\nexport class RenderPass implements IRenderPass<RenderPassData> {\n  public static IDENTIFIER = 'Render Pass';\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  @inject(IDENTIFIER.GeometryComponentManager)\n  private readonly geometry: ComponentManager<GeometryComponent>;\n\n  @inject(IDENTIFIER.MaterialComponentManager)\n  private readonly material: ComponentManager<MaterialComponent>;\n\n  @inject(IDENTIFIER.CullableComponentManager)\n  private readonly cullable: ComponentManager<CullableComponent>;\n\n  @inject(IDENTIFIER.TransformComponentManager)\n  private readonly transform: ComponentManager<TransformComponent>;\n\n  @inject(IDENTIFIER.HierarchyComponentManager)\n  private readonly hierarchy: ComponentManager<HierarchyComponent>;\n\n  @inject(IDENTIFIER.Systems)\n  @named(IDENTIFIER.FrameGraphSystem)\n  private readonly frameGraphSystem: FrameGraphSystem;\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  private modelCache: Record<string, IModel> = {};\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<RenderPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'color buffer', {\n      width: 1,\n      height: 1,\n      usage: gl.RENDER_ATTACHMENT | gl.SAMPLED | gl.COPY_SRC,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<RenderPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    const resourceNode = fg.getResourceNode(pass.data.output);\n    const framebuffer = this.resourcePool.getOrCreateResource(\n      resourceNode.resource,\n    );\n\n    // initialize model of each mesh\n    for (const view of views) {\n      await this.initView(view);\n    }\n\n    const canvas = this.engine.getCanvas();\n    framebuffer.resize({\n      width: canvas.width,\n      height: canvas.height,\n    });\n\n    this.engine.setScissor({\n      enable: false,\n    });\n    this.engine.clear({\n      framebuffer,\n      color: views[0].getClearColor(), // TODO: use clearColor defined in view\n      depth: 1,\n    });\n\n    this.engine.useFramebuffer(framebuffer, () => {\n      for (const view of views) {\n        // must do rendering in a sync way\n        this.renderView(view);\n      }\n    });\n  };\n\n  public renderView(view: IView) {\n    const scene = view.getScene();\n    const camera = view.getCamera();\n\n    // get VP matrix from camera\n    const viewMatrix = camera.getViewTransform()!;\n    const viewProjectionMatrix = mat4.multiply(\n      mat4.create(),\n      camera.getPerspective(),\n      viewMatrix,\n    );\n    // TODO: use cached planes if camera was not changed\n    camera.getFrustum().extractFromVPMatrix(viewProjectionMatrix);\n\n    const { x, y, width, height } = view.getViewport();\n    this.engine.viewport({\n      x,\n      y,\n      width,\n      height,\n    });\n    // this.engine.setScissor({\n    //   enable: true,\n    //   box: { x, y, width, height },\n    // });\n    // this.engine.clear({\n    //   // framebuffer,\n    //   color: [1, 1, 1, 1], // TODO: use clearColor defined in view\n    //   depth: 1,\n    // });\n\n    for (const meshEntity of scene.getEntities()) {\n      this.renderMesh(meshEntity, {\n        camera,\n        view,\n        viewMatrix,\n      });\n    }\n  }\n\n  private renderMesh(\n    meshEntity: Entity,\n    {\n      camera,\n      view,\n      viewMatrix,\n    }: {\n      camera: ICamera;\n      view: IView;\n      viewMatrix: mat4;\n    },\n  ) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh || !mesh.visible) {\n      return;\n    }\n\n    // filter meshes with frustum culling\n    // if (!this.cullable.getComponentByEntity(meshEntity)?.visible) {\n    //   return;\n    // }\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    // geometry 在自己的 System 中完成脏检查后的更新\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    // get model matrix from mesh\n    const transform = this.transform.getComponentByEntity(meshEntity)!;\n\n    const modelViewMatrix = mat4.multiply(\n      mat4.create(),\n      viewMatrix,\n      transform.worldTransform,\n    );\n    const { width, height } = view.getViewport();\n\n    // set MVP matrix, other builtin uniforms @see https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\n    material.setUniform({\n      projectionMatrix: camera.getPerspective(),\n      modelViewMatrix,\n      modelMatrix: transform.worldTransform,\n      viewMatrix,\n      cameraPosition: camera.getPosition(),\n      u_viewport: [width, height],\n    });\n\n    if (mesh.model) {\n      mesh.model.draw({\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n      });\n\n      material.uniforms.forEach((u) => {\n        u.dirty = false;\n      });\n      material.dirty = false;\n    }\n  }\n\n  private async initMesh(meshEntity: Entity, view: IView) {\n    const mesh = this.mesh.getComponentByEntity(meshEntity);\n\n    if (!mesh) {\n      return;\n    }\n\n    const material = mesh.material;\n    const geometry = mesh.geometry;\n\n    if (!geometry || geometry.dirty || !material) {\n      return;\n    }\n\n    if (!mesh.model) {\n      const modelCacheKey = `m-${material.entity}-g-${geometry.entity}`;\n      if (this.modelCache[modelCacheKey]) {\n        mesh.model = this.modelCache[modelCacheKey];\n        return;\n      }\n\n      material.setUniform({\n        projectionMatrix: 1,\n        modelViewMatrix: 1,\n        modelMatrix: 1,\n        viewMatrix: 1,\n        cameraPosition: 1,\n        u_viewport: 1,\n      });\n\n      const { createModel, createAttribute } = this.engine;\n      const modelInitializationOptions: IModelInitializationOptions = {\n        vs: material.vertexShaderGLSL,\n        fs: material.fragmentShaderGLSL,\n        defines: material.defines,\n        attributes: geometry.attributes.reduce(\n          (cur: { [key: string]: IAttribute }, prev) => {\n            if (prev.data && prev.buffer) {\n              cur[prev.name] = createAttribute({\n                buffer: prev.buffer,\n                attributes: prev.attributes,\n                arrayStride: prev.arrayStride,\n                stepMode: prev.stepMode,\n                divisor: prev.stepMode === 'vertex' ? 0 : 1,\n              });\n            }\n            return cur;\n          },\n          {},\n        ),\n        uniforms: material.uniforms.reduce(\n          (cur: { [key: string]: IUniform }, prev) => {\n            cur[prev.name] = prev.data;\n            return cur;\n          },\n          {},\n        ),\n        scissor: {\n          enable: true,\n          // @ts-ignore\n          box: () => view.getViewport(),\n        },\n      };\n\n      if (material.cull) {\n        modelInitializationOptions.cull = material.cull;\n      }\n      if (material.depth) {\n        modelInitializationOptions.depth = material.depth;\n      }\n      if (material.blend) {\n        modelInitializationOptions.blend = material.blend;\n      }\n\n      if (geometry.indicesBuffer) {\n        modelInitializationOptions.elements = geometry.indicesBuffer;\n      }\n\n      if (geometry.maxInstancedCount) {\n        modelInitializationOptions.instances = geometry.maxInstancedCount;\n        modelInitializationOptions.count = geometry.vertexCount || 3;\n      }\n\n      mesh.model = await createModel(modelInitializationOptions);\n      this.modelCache[modelCacheKey] = mesh.model;\n    }\n  }\n\n  private async initView(view: IView) {\n    const scene = view.getScene();\n    for (const meshEntity of scene.getEntities()) {\n      await this.initMesh(meshEntity, view);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}