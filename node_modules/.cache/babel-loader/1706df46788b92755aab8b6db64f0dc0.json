{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar init_order_1 = __importDefault(require(\"./init-order\"));\n\nvar cross_count_1 = __importDefault(require(\"./cross-count\"));\n\nvar build_layer_graph_1 = __importDefault(require(\"./build-layer-graph\"));\n\nvar add_subgraph_constraints_1 = __importDefault(require(\"./add-subgraph-constraints\"));\n\nvar sort_subgraph_1 = __importDefault(require(\"./sort-subgraph\"));\n\nvar util_1 = require(\"../../../../util\");\n\nvar graph_1 = require(\"../../graph\");\n\nvar util_2 = require(\"../util\");\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\n\n\nvar order = function (g) {\n  var mxRank = (0, util_2.maxRank)(g);\n  var range1 = [];\n  var range2 = [];\n\n  for (var i = 1; i < mxRank + 1; i++) range1.push(i);\n\n  for (var i = mxRank - 1; i > -1; i--) range2.push(i);\n\n  var downLayerGraphs = buildLayerGraphs(g, range1, \"inEdges\");\n  var upLayerGraphs = buildLayerGraphs(g, range2, \"outEdges\");\n  var layering = (0, init_order_1.default)(g);\n  assignOrder(g, layering);\n  var bestCC = Number.POSITIVE_INFINITY;\n  var best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n    layering = (0, util_2.buildLayerMatrix)(g);\n    var cc = (0, cross_count_1.default)(g, layering);\n\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = (0, util_1.clone)(layering);\n      bestCC = cc;\n    }\n  } // consider use previous result, maybe somewhat reduendant\n\n\n  layering = (0, init_order_1.default)(g);\n  assignOrder(g, layering);\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true);\n    layering = (0, util_2.buildLayerMatrix)(g);\n    var cc = (0, cross_count_1.default)(g, layering);\n\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = (0, util_1.clone)(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n};\n\nvar buildLayerGraphs = function (g, ranks, relationship) {\n  return ranks.map(function (rank) {\n    return (0, build_layer_graph_1.default)(g, rank, relationship);\n  });\n};\n\nvar sweepLayerGraphs = function (layerGraphs, biasRight, usePrev) {\n  var cg = new graph_1.Graph();\n  layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach(function (lg) {\n    var _a;\n\n    var root = lg.graph().root;\n    var sorted = (0, sort_subgraph_1.default)(lg, root, cg, biasRight, usePrev);\n\n    for (var i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n      var lnode = lg.node(sorted.vs[i]);\n\n      if (lnode) {\n        lnode.order = i;\n      }\n    }\n\n    (0, add_subgraph_constraints_1.default)(lg, cg, sorted.vs);\n  });\n};\n\nvar assignOrder = function (g, layering) {\n  layering === null || layering === void 0 ? void 0 : layering.forEach(function (layer) {\n    layer === null || layer === void 0 ? void 0 : layer.forEach(function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n};\n\nexports.default = order;","map":{"version":3,"mappings":"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","names":["order","g","mxRank","range1","range2","i","push","downLayerGraphs","buildLayerGraphs","upLayerGraphs","layering","assignOrder","bestCC","Number","POSITIVE_INFINITY","best","lastBest","sweepLayerGraphs","cc","ranks","relationship","map","rank","layerGraphs","biasRight","usePrev","cg","graph_1","forEach","lg","root","graph","sorted","vs","_a","length","lnode","node","layer","v","exports"],"sourceRoot":"","sources":["../../../../../src/layout/dagre/src/order/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}