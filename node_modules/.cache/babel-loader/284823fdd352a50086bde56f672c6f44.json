{"ast":null,"code":"import * as util from './util';\nimport { Angle } from './angle';\nimport { Geometry } from './geometry';\nexport class Point extends Geometry {\n  constructor(x, y) {\n    super();\n    this.x = x == null ? 0 : x;\n    this.y = y == null ? 0 : y;\n  }\n\n  get [Symbol.toStringTag]() {\n    return Point.toStringTag;\n  }\n  /**\n   * Rounds the point to the given precision.\n   */\n\n\n  round(precision = 0) {\n    this.x = util.round(this.x, precision);\n    this.y = util.round(this.y, precision);\n    return this;\n  }\n\n  add(x, y) {\n    const p = Point.create(x, y);\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  }\n\n  update(x, y) {\n    const p = Point.create(x, y);\n    this.x = p.x;\n    this.y = p.y;\n    return this;\n  }\n\n  translate(dx, dy) {\n    const t = Point.create(dx, dy);\n    this.x += t.x;\n    this.y += t.y;\n    return this;\n  }\n  /**\n   * Rotate the point by `degree` around `center`.\n   */\n\n\n  rotate(degree, center) {\n    const p = Point.rotate(this, degree, center);\n    this.x = p.x;\n    this.y = p.y;\n    return this;\n  }\n  /**\n   * Scale point by `sx` and `sy` around the given `origin`. If origin is not\n   * specified, the point is scaled around `0,0`.\n   */\n\n\n  scale(sx, sy, origin = new Point()) {\n    const ref = Point.create(origin);\n    this.x = ref.x + sx * (this.x - ref.x);\n    this.y = ref.y + sy * (this.y - ref.y);\n    return this;\n  }\n  /**\n   * Chooses the point closest to this point from among `points`. If `points`\n   * is an empty array, `null` is returned.\n   */\n\n\n  closest(points) {\n    if (points.length === 1) {\n      return Point.create(points[0]);\n    }\n\n    let ret = null;\n    let min = Infinity;\n    points.forEach(p => {\n      const dist = this.squaredDistance(p);\n\n      if (dist < min) {\n        ret = p;\n        min = dist;\n      }\n    });\n    return ret ? Point.create(ret) : null;\n  }\n  /**\n   * Returns the distance between the point and another point `p`.\n   */\n\n\n  distance(p) {\n    return Math.sqrt(this.squaredDistance(p));\n  }\n  /**\n   * Returns the squared distance between the point and another point `p`.\n   *\n   * Useful for distance comparisons in which real distance is not necessary\n   * (saves one `Math.sqrt()` operation).\n   */\n\n\n  squaredDistance(p) {\n    const ref = Point.create(p);\n    const dx = this.x - ref.x;\n    const dy = this.y - ref.y;\n    return dx * dx + dy * dy;\n  }\n\n  manhattanDistance(p) {\n    const ref = Point.create(p);\n    return Math.abs(ref.x - this.x) + Math.abs(ref.y - this.y);\n  }\n  /**\n   * Returns the magnitude of the point vector.\n   *\n   * @see http://en.wikipedia.org/wiki/Magnitude_(mathematics)\n   */\n\n\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y) || 0.01;\n  }\n  /**\n   * Returns the angle(in degrees) between vector from this point to `p` and\n   * the x-axis.\n   */\n\n\n  theta(p = new Point()) {\n    const ref = Point.create(p);\n    const y = -(ref.y - this.y); // invert the y-axis.\n\n    const x = ref.x - this.x;\n    let rad = Math.atan2(y, x); // Correction for III. and IV. quadrant.\n\n    if (rad < 0) {\n      rad = 2 * Math.PI + rad;\n    }\n\n    return 180 * rad / Math.PI;\n  }\n  /**\n   * Returns the angle(in degrees) between vector from this point to `p1` and\n   * the vector from this point to `p2`.\n   *\n   * The ordering of points `p1` and `p2` is important.\n   *\n   * The function returns a value between `0` and `180` when the angle (in the\n   * direction from `p1` to `p2`) is clockwise, and a value between `180` and\n   * `360` when the angle is counterclockwise.\n   *\n   * Returns `NaN` if either of the points `p1` and `p2` is equal with this point.\n   */\n\n\n  angleBetween(p1, p2) {\n    if (this.equals(p1) || this.equals(p2)) {\n      return NaN;\n    }\n\n    let angle = this.theta(p2) - this.theta(p1);\n\n    if (angle < 0) {\n      angle += 360;\n    }\n\n    return angle;\n  }\n  /**\n   * Returns the angle(in degrees) between the line from `(0,0)` and this point\n   * and the line from `(0,0)` to `p`.\n   *\n   * The function returns a value between `0` and `180` when the angle (in the\n   * direction from this point to `p`) is clockwise, and a value between `180`\n   * and `360` when the angle is counterclockwise. Returns `NaN` if called from\n   * point `(0,0)` or if `p` is `(0,0)`.\n   */\n\n\n  vectorAngle(p) {\n    const zero = new Point(0, 0);\n    return zero.angleBetween(this, p);\n  }\n  /**\n   * Converts rectangular to polar coordinates.\n   */\n\n\n  toPolar(origin) {\n    this.update(Point.toPolar(this, origin));\n    return this;\n  }\n  /**\n   * Returns the change in angle(in degrees) that is the result of moving the\n   * point from its previous position to its current position.\n   *\n   * More specifically, this function computes the angle between the line from\n   * the ref point to the previous position of this point(i.e. current position\n   * `-dx`, `-dy`) and the line from the `ref` point to the current position of\n   * this point.\n   *\n   * The function returns a positive value between `0` and `180` when the angle\n   * (in the direction from previous position of this point to its current\n   * position) is clockwise, and a negative value between `0` and `-180` when\n   * the angle is counterclockwise.\n   *\n   * The function returns `0` if the previous and current positions of this\n   * point are the same (i.e. both `dx` and `dy` are `0`).\n   */\n\n\n  changeInAngle(dx, dy, ref = new Point()) {\n    // Revert the translation and measure the change in angle around x-axis.\n    return this.clone().translate(-dx, -dy).theta(ref) - this.theta(ref);\n  }\n  /**\n   * If the point lies outside the rectangle `rect`, adjust the point so that\n   * it becomes the nearest point on the boundary of `rect`.\n   */\n\n\n  adhereToRect(rect) {\n    if (!util.containsPoint(rect, this)) {\n      this.x = Math.min(Math.max(this.x, rect.x), rect.x + rect.width);\n      this.y = Math.min(Math.max(this.y, rect.y), rect.y + rect.height);\n    }\n\n    return this;\n  }\n  /**\n   * Returns the bearing(cardinal direction) between me and the given point.\n   *\n   * @see https://en.wikipedia.org/wiki/Cardinal_direction\n   */\n\n\n  bearing(p) {\n    const ref = Point.create(p);\n    const lat1 = Angle.toRad(this.y);\n    const lat2 = Angle.toRad(ref.y);\n    const lon1 = this.x;\n    const lon2 = ref.x;\n    const dLon = Angle.toRad(lon2 - lon1);\n    const y = Math.sin(dLon) * Math.cos(lat2);\n    const x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);\n    const brng = Angle.toDeg(Math.atan2(y, x));\n    const bearings = ['NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', 'N'];\n    let index = brng - 22.5;\n\n    if (index < 0) {\n      index += 360;\n    }\n\n    index = parseInt(index / 45, 10);\n    return bearings[index];\n  }\n  /**\n   * Returns the cross product of the vector from me to `p1` and the vector\n   * from me to `p2`.\n   *\n   * The left-hand rule is used because the coordinate system is left-handed.\n   */\n\n\n  cross(p1, p2) {\n    if (p1 != null && p2 != null) {\n      const a = Point.create(p1);\n      const b = Point.create(p2);\n      return (b.x - this.x) * (a.y - this.y) - (b.y - this.y) * (a.x - this.x);\n    }\n\n    return NaN;\n  }\n  /**\n   * Returns the dot product of this point with given other point.\n   */\n\n\n  dot(p) {\n    const ref = Point.create(p);\n    return this.x * ref.x + this.y * ref.y;\n  }\n\n  diff(dx, dy) {\n    if (typeof dx === 'number') {\n      return new Point(this.x - dx, this.y - dy);\n    }\n\n    const p = Point.create(dx);\n    return new Point(this.x - p.x, this.y - p.y);\n  }\n  /**\n   * Returns an interpolation between me and point `p` for a parametert in\n   * the closed interval `[0, 1]`.\n   */\n\n\n  lerp(p, t) {\n    const ref = Point.create(p);\n    return new Point((1 - t) * this.x + t * ref.x, (1 - t) * this.y + t * ref.y);\n  }\n  /**\n   * Normalize the point vector, scale the line segment between `(0, 0)`\n   * and the point in order for it to have the given length. If length is\n   * not specified, it is considered to be `1`; in that case, a unit vector\n   * is computed.\n   */\n\n\n  normalize(length = 1) {\n    const scale = length / this.magnitude();\n    return this.scale(scale, scale);\n  }\n  /**\n   * Moves this point along the line starting from `ref` to this point by a\n   * certain `distance`.\n   */\n\n\n  move(ref, distance) {\n    const p = Point.create(ref);\n    const rad = Angle.toRad(p.theta(this));\n    return this.translate(Math.cos(rad) * distance, -Math.sin(rad) * distance);\n  }\n  /**\n   * Returns a point that is the reflection of me with the center of inversion\n   * in `ref` point.\n   */\n\n\n  reflection(ref) {\n    return Point.create(ref).move(this, this.distance(ref));\n  }\n\n  snapToGrid(gx, gy) {\n    this.x = util.snapToGrid(this.x, gx);\n    this.y = util.snapToGrid(this.y, gy == null ? gx : gy);\n    return this;\n  }\n\n  equals(p) {\n    const ref = Point.create(p);\n    return ref != null && ref.x === this.x && ref.y === this.y;\n  }\n\n  clone() {\n    return Point.clone(this);\n  }\n  /**\n   * Returns the point as a simple JSON object. For example: `{ x: 0, y: 0 }`.\n   */\n\n\n  toJSON() {\n    return Point.toJSON(this);\n  }\n\n  serialize() {\n    return `${this.x} ${this.y}`;\n  }\n\n}\n\n(function (Point) {\n  Point.toStringTag = `X6.Geometry.${Point.name}`;\n\n  function isPoint(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Point) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const point = instance;\n\n    if ((tag == null || tag === Point.toStringTag) && typeof point.x === 'number' && typeof point.y === 'number' && typeof point.toPolar === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  Point.isPoint = isPoint;\n})(Point || (Point = {}));\n\n(function (Point) {\n  function isPointLike(p) {\n    return p != null && typeof p === 'object' && typeof p.x === 'number' && typeof p.y === 'number';\n  }\n\n  Point.isPointLike = isPointLike;\n\n  function isPointData(p) {\n    return p != null && Array.isArray(p) && p.length === 2 && typeof p[0] === 'number' && typeof p[1] === 'number';\n  }\n\n  Point.isPointData = isPointData;\n})(Point || (Point = {}));\n\n(function (Point) {\n  function create(x, y) {\n    if (x == null || typeof x === 'number') {\n      return new Point(x, y);\n    }\n\n    return clone(x);\n  }\n\n  Point.create = create;\n\n  function clone(p) {\n    if (Point.isPoint(p)) {\n      return new Point(p.x, p.y);\n    }\n\n    if (Array.isArray(p)) {\n      return new Point(p[0], p[1]);\n    }\n\n    return new Point(p.x, p.y);\n  }\n\n  Point.clone = clone;\n\n  function toJSON(p) {\n    if (Point.isPoint(p)) {\n      return {\n        x: p.x,\n        y: p.y\n      };\n    }\n\n    if (Array.isArray(p)) {\n      return {\n        x: p[0],\n        y: p[1]\n      };\n    }\n\n    return {\n      x: p.x,\n      y: p.y\n    };\n  }\n\n  Point.toJSON = toJSON;\n  /**\n   * Returns a new Point object from the given polar coordinates.\n   * @see http://en.wikipedia.org/wiki/Polar_coordinate_system\n   */\n\n  function fromPolar(r, rad, origin = new Point()) {\n    let x = Math.abs(r * Math.cos(rad));\n    let y = Math.abs(r * Math.sin(rad));\n    const org = clone(origin);\n    const deg = Angle.normalize(Angle.toDeg(rad));\n\n    if (deg < 90) {\n      y = -y;\n    } else if (deg < 180) {\n      x = -x;\n      y = -y;\n    } else if (deg < 270) {\n      x = -x;\n    }\n\n    return new Point(org.x + x, org.y + y);\n  }\n\n  Point.fromPolar = fromPolar;\n  /**\n   * Converts rectangular to polar coordinates.\n   */\n\n  function toPolar(point, origin = new Point()) {\n    const p = clone(point);\n    const o = clone(origin);\n    const dx = p.x - o.x;\n    const dy = p.y - o.y;\n    return new Point(Math.sqrt(dx * dx + dy * dy), // r\n    Angle.toRad(o.theta(p)));\n  }\n\n  Point.toPolar = toPolar;\n\n  function equals(p1, p2) {\n    if (p1 === p2) {\n      return true;\n    }\n\n    if (p1 != null && p2 != null) {\n      return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    return false;\n  }\n\n  Point.equals = equals;\n\n  function equalPoints(p1, p2) {\n    if (p1 == null && p2 != null || p1 != null && p2 == null || p1 != null && p2 != null && p1.length !== p2.length) {\n      return false;\n    }\n\n    if (p1 != null && p2 != null) {\n      for (let i = 0, ii = p1.length; i < ii; i += 1) {\n        if (!equals(p1[i], p2[i])) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  Point.equalPoints = equalPoints;\n  /**\n   * Returns a point with random coordinates that fall within the range\n   * `[x1, x2]` and `[y1, y2]`.\n   */\n\n  function random(x1, x2, y1, y2) {\n    return new Point(util.random(x1, x2), util.random(y1, y2));\n  }\n\n  Point.random = random;\n\n  function rotate(point, angle, center) {\n    const rad = Angle.toRad(Angle.normalize(-angle));\n    const sin = Math.sin(rad);\n    const cos = Math.cos(rad);\n    return rotateEx(point, cos, sin, center);\n  }\n\n  Point.rotate = rotate;\n\n  function rotateEx(point, cos, sin, center = new Point()) {\n    const source = clone(point);\n    const origin = clone(center);\n    const dx = source.x - origin.x;\n    const dy = source.y - origin.y;\n    const x1 = dx * cos - dy * sin;\n    const y1 = dy * cos + dx * sin;\n    return new Point(x1 + origin.x, y1 + origin.y);\n  }\n\n  Point.rotateEx = rotateEx;\n})(Point || (Point = {}));","map":{"version":3,"mappings":"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","names":["util","Angle","Geometry","Point","constructor","x","y","Symbol","toStringTag","round","precision","add","p","create","update","translate","dx","dy","t","rotate","degree","center","scale","sx","sy","origin","ref","closest","points","length","ret","min","Infinity","forEach","dist","squaredDistance","distance","Math","sqrt","manhattanDistance","abs","magnitude","theta","rad","atan2","PI","angleBetween","p1","p2","equals","NaN","angle","vectorAngle","zero","toPolar","changeInAngle","clone","adhereToRect","rect","containsPoint","max","width","height","bearing","lat1","toRad","lat2","lon1","lon2","dLon","sin","cos","brng","toDeg","bearings","index","parseInt","cross","a","b","dot","diff","lerp","normalize","move","reflection","snapToGrid","gx","gy","toJSON","serialize","name","isPoint","instance","tag","point","isPointLike","isPointData","Array","isArray","fromPolar","r","org","deg","o","equalPoints","i","ii","random","x1","x2","y1","y2","rotateEx","source"],"sourceRoot":"","sources":["../../src/geometry/point.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}