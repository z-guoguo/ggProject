{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\n/**\n * @description DFS traversal.\n * @description.zh-CN DFS 遍历。\n */\nvar doDFS = function doDFS(graph, node, postorder, visited, navigator, result) {\n  if (!visited.includes(node)) {\n    visited.push(node);\n\n    if (!postorder) {\n      result.push(node);\n    }\n\n    navigator(node).forEach(function (n) {\n      return doDFS(graph, n, postorder, visited, navigator, result);\n    });\n\n    if (postorder) {\n      result.push(node);\n    }\n  }\n};\n/**\n * @description DFS traversal.\n * @description.zh-CN DFS 遍历。\n */\n\n\nvar dfs = function dfs(graph, node, order) {\n  var nodes = Array.isArray(node) ? node : [node];\n\n  var navigator = function navigator(n) {\n    return graph.isDirected() ? graph.successors(n) : graph.neighbors(n);\n  };\n\n  var results = [];\n  var visited = [];\n  nodes.forEach(function (node) {\n    if (!graph.hasNode(node)) {\n      throw new Error('Graph does not have node: ' + node);\n    } else {\n      doDFS(graph, node, order === 'post', visited, navigator, results);\n    }\n  });\n  return results;\n};\n\nexport default dfs;","map":{"version":3,"names":["doDFS","graph","node","postorder","visited","navigator","result","includes","push","forEach","n","dfs","order","nodes","Array","isArray","isDirected","successors","neighbors","results","hasNode","Error"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/graphlib/es/algorithm/dfs.js"],"sourcesContent":["/**\n * @description DFS traversal.\n * @description.zh-CN DFS 遍历。\n */\nvar doDFS = function doDFS(graph, node, postorder, visited, navigator, result) {\n  if (!visited.includes(node)) {\n    visited.push(node);\n\n    if (!postorder) {\n      result.push(node);\n    }\n\n    navigator(node).forEach(function (n) {\n      return doDFS(graph, n, postorder, visited, navigator, result);\n    });\n\n    if (postorder) {\n      result.push(node);\n    }\n  }\n};\n/**\n * @description DFS traversal.\n * @description.zh-CN DFS 遍历。\n */\n\n\nvar dfs = function dfs(graph, node, order) {\n  var nodes = Array.isArray(node) ? node : [node];\n\n  var navigator = function navigator(n) {\n    return graph.isDirected() ? graph.successors(n) : graph.neighbors(n);\n  };\n\n  var results = [];\n  var visited = [];\n  nodes.forEach(function (node) {\n    if (!graph.hasNode(node)) {\n      throw new Error('Graph does not have node: ' + node);\n    } else {\n      doDFS(graph, node, order === 'post', visited, navigator, results);\n    }\n  });\n  return results;\n};\n\nexport default dfs;"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,IAAIA,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA2DC,MAA3D,EAAmE;EAC7E,IAAI,CAACF,OAAO,CAACG,QAAR,CAAiBL,IAAjB,CAAL,EAA6B;IAC3BE,OAAO,CAACI,IAAR,CAAaN,IAAb;;IAEA,IAAI,CAACC,SAAL,EAAgB;MACdG,MAAM,CAACE,IAAP,CAAYN,IAAZ;IACD;;IAEDG,SAAS,CAACH,IAAD,CAAT,CAAgBO,OAAhB,CAAwB,UAAUC,CAAV,EAAa;MACnC,OAAOV,KAAK,CAACC,KAAD,EAAQS,CAAR,EAAWP,SAAX,EAAsBC,OAAtB,EAA+BC,SAA/B,EAA0CC,MAA1C,CAAZ;IACD,CAFD;;IAIA,IAAIH,SAAJ,EAAe;MACbG,MAAM,CAACE,IAAP,CAAYN,IAAZ;IACD;EACF;AACF,CAhBD;AAiBA;AACA;AACA;AACA;;;AAGA,IAAIS,GAAG,GAAG,SAASA,GAAT,CAAaV,KAAb,EAAoBC,IAApB,EAA0BU,KAA1B,EAAiC;EACzC,IAAIC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcb,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAAzC;;EAEA,IAAIG,SAAS,GAAG,SAASA,SAAT,CAAmBK,CAAnB,EAAsB;IACpC,OAAOT,KAAK,CAACe,UAAN,KAAqBf,KAAK,CAACgB,UAAN,CAAiBP,CAAjB,CAArB,GAA2CT,KAAK,CAACiB,SAAN,CAAgBR,CAAhB,CAAlD;EACD,CAFD;;EAIA,IAAIS,OAAO,GAAG,EAAd;EACA,IAAIf,OAAO,GAAG,EAAd;EACAS,KAAK,CAACJ,OAAN,CAAc,UAAUP,IAAV,EAAgB;IAC5B,IAAI,CAACD,KAAK,CAACmB,OAAN,CAAclB,IAAd,CAAL,EAA0B;MACxB,MAAM,IAAImB,KAAJ,CAAU,+BAA+BnB,IAAzC,CAAN;IACD,CAFD,MAEO;MACLF,KAAK,CAACC,KAAD,EAAQC,IAAR,EAAcU,KAAK,KAAK,MAAxB,EAAgCR,OAAhC,EAAyCC,SAAzC,EAAoDc,OAApD,CAAL;IACD;EACF,CAND;EAOA,OAAOA,OAAP;AACD,CAjBD;;AAmBA,eAAeR,GAAf"},"metadata":{},"sourceType":"module"}