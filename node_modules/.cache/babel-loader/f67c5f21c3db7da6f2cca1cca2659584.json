{"ast":null,"code":"/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  } // 若未指定 type ，则返回所有邻居\n\n\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\n\nexport var uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var random1 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  var random2 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  return \"\".concat(index, \"-\").concat(random1).concat(random2);\n};","map":{"version":3,"names":["getNeighbors","nodeId","edges","type","currentEdges","filter","edge","source","target","neighhborsConverter_1","map","neighhborsConverter_2","neighhborsConverter","getOutEdgesNodeId","getEdgesByNodeId","uniqueId","index","random1","concat","Math","random","split","substr","random2"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/es/util.js"],"sourcesContent":["/**\n * 获取指定节点的所有邻居\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n * @param type 邻居类型\n */\nexport var getNeighbors = function getNeighbors(nodeId, edges, type) {\n  if (edges === void 0) {\n    edges = [];\n  }\n\n  var currentEdges = edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n\n  if (type === 'target') {\n    // 当前节点为 source，它所指向的目标节点\n    var neighhborsConverter_1 = function neighhborsConverter_1(edge) {\n      return edge.source === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_1).map(function (edge) {\n      return edge.target;\n    });\n  }\n\n  if (type === 'source') {\n    // 当前节点为 target，它所指向的源节点\n    var neighhborsConverter_2 = function neighhborsConverter_2(edge) {\n      return edge.target === nodeId;\n    };\n\n    return currentEdges.filter(neighhborsConverter_2).map(function (edge) {\n      return edge.source;\n    });\n  } // 若未指定 type ，则返回所有邻居\n\n\n  var neighhborsConverter = function neighhborsConverter(edge) {\n    return edge.source === nodeId ? edge.target : edge.source;\n  };\n\n  return currentEdges.map(neighhborsConverter);\n};\n/**\n * 获取指定节点的出边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\nexport var getOutEdgesNodeId = function getOutEdgesNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId;\n  });\n};\n/**\n * 获取指定节点的边，包括出边和入边\n * @param nodeId 节点 ID\n * @param edges 图中的所有边数据\n */\n\nexport var getEdgesByNodeId = function getEdgesByNodeId(nodeId, edges) {\n  return edges.filter(function (edge) {\n    return edge.source === nodeId || edge.target === nodeId;\n  });\n};\n/**\n * 生成唯一的 ID，规则是序号 + 时间戳\n * @param index 序号\n */\n\nexport var uniqueId = function uniqueId(index) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  var random1 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  var random2 = \"\".concat(Math.random()).split('.')[1].substr(0, 5);\n  return \"\".concat(index, \"-\").concat(random1).concat(random2);\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,YAAY,GAAG,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;EACnE,IAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;IACpBA,KAAK,GAAG,EAAR;EACD;;EAED,IAAIE,YAAY,GAAGF,KAAK,CAACG,MAAN,CAAa,UAAUC,IAAV,EAAgB;IAC9C,OAAOA,IAAI,CAACC,MAAL,KAAgBN,MAAhB,IAA0BK,IAAI,CAACE,MAAL,KAAgBP,MAAjD;EACD,CAFkB,CAAnB;;EAIA,IAAIE,IAAI,KAAK,QAAb,EAAuB;IACrB;IACA,IAAIM,qBAAqB,GAAG,SAASA,qBAAT,CAA+BH,IAA/B,EAAqC;MAC/D,OAAOA,IAAI,CAACC,MAAL,KAAgBN,MAAvB;IACD,CAFD;;IAIA,OAAOG,YAAY,CAACC,MAAb,CAAoBI,qBAApB,EAA2CC,GAA3C,CAA+C,UAAUJ,IAAV,EAAgB;MACpE,OAAOA,IAAI,CAACE,MAAZ;IACD,CAFM,CAAP;EAGD;;EAED,IAAIL,IAAI,KAAK,QAAb,EAAuB;IACrB;IACA,IAAIQ,qBAAqB,GAAG,SAASA,qBAAT,CAA+BL,IAA/B,EAAqC;MAC/D,OAAOA,IAAI,CAACE,MAAL,KAAgBP,MAAvB;IACD,CAFD;;IAIA,OAAOG,YAAY,CAACC,MAAb,CAAoBM,qBAApB,EAA2CD,GAA3C,CAA+C,UAAUJ,IAAV,EAAgB;MACpE,OAAOA,IAAI,CAACC,MAAZ;IACD,CAFM,CAAP;EAGD,CA7BkE,CA6BjE;;;EAGF,IAAIK,mBAAmB,GAAG,SAASA,mBAAT,CAA6BN,IAA7B,EAAmC;IAC3D,OAAOA,IAAI,CAACC,MAAL,KAAgBN,MAAhB,GAAyBK,IAAI,CAACE,MAA9B,GAAuCF,IAAI,CAACC,MAAnD;EACD,CAFD;;EAIA,OAAOH,YAAY,CAACM,GAAb,CAAiBE,mBAAjB,CAAP;AACD,CArCM;AAsCP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BZ,MAA3B,EAAmCC,KAAnC,EAA0C;EACvE,OAAOA,KAAK,CAACG,MAAN,CAAa,UAAUC,IAAV,EAAgB;IAClC,OAAOA,IAAI,CAACC,MAAL,KAAgBN,MAAvB;EACD,CAFM,CAAP;AAGD,CAJM;AAKP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIa,gBAAgB,GAAG,SAASA,gBAAT,CAA0Bb,MAA1B,EAAkCC,KAAlC,EAAyC;EACrE,OAAOA,KAAK,CAACG,MAAN,CAAa,UAAUC,IAAV,EAAgB;IAClC,OAAOA,IAAI,CAACC,MAAL,KAAgBN,MAAhB,IAA0BK,IAAI,CAACE,MAAL,KAAgBP,MAAjD;EACD,CAFM,CAAP;AAGD,CAJM;AAKP;AACA;AACA;AACA;;AAEA,OAAO,IAAIc,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;EAC7C,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;IACpBA,KAAK,GAAG,CAAR;EACD;;EAED,IAAIC,OAAO,GAAG,GAAGC,MAAH,CAAUC,IAAI,CAACC,MAAL,EAAV,EAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,EAAuCC,MAAvC,CAA8C,CAA9C,EAAiD,CAAjD,CAAd;EACA,IAAIC,OAAO,GAAG,GAAGL,MAAH,CAAUC,IAAI,CAACC,MAAL,EAAV,EAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,EAAuCC,MAAvC,CAA8C,CAA9C,EAAiD,CAAjD,CAAd;EACA,OAAO,GAAGJ,MAAH,CAAUF,KAAV,EAAiB,GAAjB,EAAsBE,MAAtB,CAA6BD,OAA7B,EAAsCC,MAAtC,CAA6CK,OAA7C,CAAP;AACD,CARM"},"metadata":{},"sourceType":"module"}