{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\nexport var Mask;\n\n(function (Mask) {\n  Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n  Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n  Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n})(Mask || (Mask = {}));\n\nexport var Frustum = /*#__PURE__*/function () {\n  function Frustum(planes) {\n    _classCallCheck(this, Frustum);\n\n    this.planes = [];\n\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n\n\n  _createClass(Frustum, [{\n    key: \"extractFromVPMatrix\",\n    value: function extractFromVPMatrix(vpMatrix) {\n      var _vpMatrix = _slicedToArray(vpMatrix, 16),\n          m0 = _vpMatrix[0],\n          m1 = _vpMatrix[1],\n          m2 = _vpMatrix[2],\n          m3 = _vpMatrix[3],\n          m4 = _vpMatrix[4],\n          m5 = _vpMatrix[5],\n          m6 = _vpMatrix[6],\n          m7 = _vpMatrix[7],\n          m8 = _vpMatrix[8],\n          m9 = _vpMatrix[9],\n          m10 = _vpMatrix[10],\n          m11 = _vpMatrix[11],\n          m12 = _vpMatrix[12],\n          m13 = _vpMatrix[13],\n          m14 = _vpMatrix[14],\n          m15 = _vpMatrix[15]; // right\n\n\n      vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n      this.planes[0].distance = -(m15 - m12); // left\n\n      vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n      this.planes[1].distance = -(m15 + m12); // bottom\n\n      vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n      this.planes[2].distance = -(m15 + m13); // top\n\n      vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n      this.planes[3].distance = -(m15 - m13); // far\n\n      vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n      this.planes[4].distance = -(m15 - m14); // near\n\n      vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n      this.planes[5].distance = -(m15 + m14);\n      this.planes.forEach(function (plane) {\n        plane.normalize();\n        plane.updatePNVertexFlag();\n      });\n    }\n  }]);\n\n  return Frustum;\n}();","map":{"version":3,"mappings":"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","names":["vec3","Plane","Mask","Frustum","planes","_classCallCheck","i","push","_createClass","key","value","vpMatrix","m0","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10","m11","m12","m13","m14","m15","set","normal","distance","forEach","plane","normalize","updatePNVertexFlag"],"sources":["../../src/shape/Frustum.ts"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { AABB } from './AABB';\nimport { Plane } from './Plane';\n\nexport enum Mask {\n  OUTSIDE = 0xffffffff,\n  INSIDE = 0x00000000,\n  INDETERMINATE = 0x7fffffff,\n}\n\nexport class Frustum {\n  public planes: Plane[] = [];\n\n  constructor(planes?: Plane[]) {\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (let i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n  public extractFromVPMatrix(vpMatrix: mat4) {\n    const [\n      m0,\n      m1,\n      m2,\n      m3,\n      m4,\n      m5,\n      m6,\n      m7,\n      m8,\n      m9,\n      m10,\n      m11,\n      m12,\n      m13,\n      m14,\n      m15,\n    ] = vpMatrix;\n\n    // right\n    vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n    this.planes[0].distance = -(m15 - m12);\n\n    // left\n    vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n    this.planes[1].distance = -(m15 + m12);\n\n    // bottom\n    vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n    this.planes[2].distance = -(m15 + m13);\n\n    // top\n    vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n    this.planes[3].distance = -(m15 - m13);\n\n    // far\n    vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n    this.planes[4].distance = -(m15 - m14);\n\n    // near\n    vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n    this.planes[5].distance = -(m15 + m14);\n\n    this.planes.forEach((plane) => {\n      plane.normalize();\n      plane.updatePNVertexFlag();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}