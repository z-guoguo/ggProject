{"ast":null,"code":"import { ObjectExt } from '../object';\nimport { mergeAttrs } from '../dom/attr';\nexport function annotate(t, annotations, opt = {}) {\n  const offset = opt.offset || 0;\n  const compacted = [];\n  const ret = [];\n  let curr;\n  let prev;\n  let batch = null;\n\n  for (let i = 0; i < t.length; i += 1) {\n    curr = ret[i] = t[i];\n\n    for (let j = 0, jj = annotations.length; j < jj; j += 1) {\n      const annotation = annotations[j];\n      const start = annotation.start + offset;\n      const end = annotation.end + offset;\n\n      if (i >= start && i < end) {\n        if (typeof curr === 'string') {\n          curr = ret[i] = {\n            t: t[i],\n            attrs: annotation.attrs\n          };\n        } else {\n          curr.attrs = mergeAttrs(mergeAttrs({}, curr.attrs), annotation.attrs);\n        }\n\n        if (opt.includeAnnotationIndices) {\n          if (curr.annotations == null) {\n            curr.annotations = [];\n          }\n\n          curr.annotations.push(j);\n        }\n      }\n    }\n\n    prev = ret[i - 1];\n\n    if (!prev) {\n      batch = curr;\n    } else if (ObjectExt.isObject(curr) && ObjectExt.isObject(prev)) {\n      batch = batch; // Both previous item and the current one are annotations.\n      // If the attributes didn't change, merge the text.\n\n      if (JSON.stringify(curr.attrs) === JSON.stringify(prev.attrs)) {\n        batch.t += curr.t;\n      } else {\n        compacted.push(batch);\n        batch = curr;\n      }\n    } else if (ObjectExt.isObject(curr)) {\n      // Previous item was a string, current item is an annotation.\n      batch = batch;\n      compacted.push(batch);\n      batch = curr;\n    } else if (ObjectExt.isObject(prev)) {\n      // Previous item was an annotation, current item is a string.\n      batch = batch;\n      compacted.push(batch);\n      batch = curr;\n    } else {\n      // Both previous and current item are strings.\n      batch = (batch || '') + curr;\n    }\n  }\n\n  if (batch != null) {\n    compacted.push(batch);\n  }\n\n  return compacted;\n}\nexport function findAnnotationsAtIndex(annotations, index) {\n  return annotations ? annotations.filter(a => a.start < index && index <= a.end) : [];\n}\nexport function findAnnotationsBetweenIndexes(annotations, start, end) {\n  return annotations ? annotations.filter(a => start >= a.start && start < a.end || end > a.start && end <= a.end || a.start >= start && a.end < end) : [];\n}\nexport function shiftAnnotations(annotations, index, offset) {\n  if (annotations) {\n    annotations.forEach(a => {\n      if (a.start < index && a.end >= index) {\n        a.end += offset;\n      } else if (a.start >= index) {\n        a.start += offset;\n        a.end += offset;\n      }\n    });\n  }\n\n  return annotations;\n}","map":{"version":3,"mappings":"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","names":["ObjectExt","mergeAttrs","annotate","t","annotations","opt","offset","compacted","ret","curr","prev","batch","i","length","j","jj","annotation","start","end","attrs","includeAnnotationIndices","push","isObject","JSON","stringify","findAnnotationsAtIndex","index","filter","a","findAnnotationsBetweenIndexes","shiftAnnotations","forEach"],"sourceRoot":"","sources":["../../../src/util/text/annotate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}