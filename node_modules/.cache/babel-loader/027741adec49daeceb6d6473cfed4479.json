{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { FunctionExt } from '../util';\nimport { Basecoat, Dijkstra } from '../common';\nimport { Rectangle } from '../geometry';\nimport { Cell } from './cell';\nimport { Edge } from './edge';\nimport { Node } from './node';\nimport { Collection } from './collection';\nexport class Model extends Basecoat {\n  constructor(cells = []) {\n    super();\n    this.batches = {};\n    this.addings = new WeakMap();\n    this.nodes = {};\n    this.edges = {};\n    this.outgoings = {};\n    this.incomings = {};\n    this.collection = new Collection(cells);\n    this.setup();\n  }\n\n  get [Symbol.toStringTag]() {\n    return Model.toStringTag;\n  }\n\n  notify(name, args) {\n    this.trigger(name, args);\n    const graph = this.graph;\n\n    if (graph) {\n      if (name === 'sorted' || name === 'reseted' || name === 'updated') {\n        graph.trigger(`model:${name}`, args);\n      } else {\n        graph.trigger(name, args);\n      }\n    }\n\n    return this;\n  }\n\n  setup() {\n    const collection = this.collection;\n    collection.on('sorted', () => this.notify('sorted', null));\n    collection.on('updated', args => this.notify('updated', args));\n    collection.on('cell:change:zIndex', () => this.sortOnChangeZ());\n    collection.on('added', ({\n      cell\n    }) => {\n      this.onCellAdded(cell);\n    });\n    collection.on('removed', args => {\n      const cell = args.cell;\n      this.onCellRemoved(cell, args.options); // Should trigger remove-event manually after cell was removed.\n\n      this.notify('cell:removed', args);\n\n      if (cell.isNode()) {\n        this.notify('node:removed', Object.assign(Object.assign({}, args), {\n          node: cell\n        }));\n      } else if (cell.isEdge()) {\n        this.notify('edge:removed', Object.assign(Object.assign({}, args), {\n          edge: cell\n        }));\n      }\n    });\n    collection.on('reseted', args => {\n      this.onReset(args.current);\n      this.notify('reseted', args);\n    });\n    collection.on('edge:change:source', ({\n      edge\n    }) => this.onEdgeTerminalChanged(edge, 'source'));\n    collection.on('edge:change:target', ({\n      edge\n    }) => {\n      this.onEdgeTerminalChanged(edge, 'target');\n    });\n  }\n\n  sortOnChangeZ() {\n    this.collection.sort();\n  }\n\n  onCellAdded(cell) {\n    const cellId = cell.id;\n\n    if (cell.isEdge()) {\n      // Auto update edge's parent\n      cell.updateParent();\n      this.edges[cellId] = true;\n      this.onEdgeTerminalChanged(cell, 'source');\n      this.onEdgeTerminalChanged(cell, 'target');\n    } else {\n      this.nodes[cellId] = true;\n    }\n  }\n\n  onCellRemoved(cell, options) {\n    const cellId = cell.id;\n\n    if (cell.isEdge()) {\n      delete this.edges[cellId];\n      const source = cell.getSource();\n      const target = cell.getTarget();\n\n      if (source && source.cell) {\n        const cache = this.outgoings[source.cell];\n        const index = cache ? cache.indexOf(cellId) : -1;\n\n        if (index >= 0) {\n          cache.splice(index, 1);\n\n          if (cache.length === 0) {\n            delete this.outgoings[source.cell];\n          }\n        }\n      }\n\n      if (target && target.cell) {\n        const cache = this.incomings[target.cell];\n        const index = cache ? cache.indexOf(cellId) : -1;\n\n        if (index >= 0) {\n          cache.splice(index, 1);\n\n          if (cache.length === 0) {\n            delete this.incomings[target.cell];\n          }\n        }\n      }\n    } else {\n      delete this.nodes[cellId];\n    }\n\n    if (!options.clear) {\n      if (options.disconnectEdges) {\n        this.disconnectConnectedEdges(cell, options);\n      } else {\n        this.removeConnectedEdges(cell, options);\n      }\n    }\n\n    if (cell.model === this) {\n      cell.model = null;\n    }\n  }\n\n  onReset(cells) {\n    this.nodes = {};\n    this.edges = {};\n    this.outgoings = {};\n    this.incomings = {};\n    cells.forEach(cell => this.onCellAdded(cell));\n  }\n\n  onEdgeTerminalChanged(edge, type) {\n    const ref = type === 'source' ? this.outgoings : this.incomings;\n    const prev = edge.previous(type);\n\n    if (prev && prev.cell) {\n      const cellId = Cell.isCell(prev.cell) ? prev.cell.id : prev.cell;\n      const cache = ref[cellId];\n      const index = cache ? cache.indexOf(edge.id) : -1;\n\n      if (index >= 0) {\n        cache.splice(index, 1);\n\n        if (cache.length === 0) {\n          delete ref[cellId];\n        }\n      }\n    }\n\n    const terminal = edge.getTerminal(type);\n\n    if (terminal && terminal.cell) {\n      const terminalId = Cell.isCell(terminal.cell) ? terminal.cell.id : terminal.cell;\n      const cache = ref[terminalId] || [];\n      const index = cache.indexOf(edge.id);\n\n      if (index === -1) {\n        cache.push(edge.id);\n      }\n\n      ref[terminalId] = cache;\n    }\n  }\n\n  prepareCell(cell, options) {\n    if (!cell.model && (!options || !options.dryrun)) {\n      cell.model = this;\n    }\n\n    if (cell.zIndex == null) {\n      cell.setZIndex(this.getMaxZIndex() + 1, {\n        silent: true\n      });\n    }\n\n    return cell;\n  }\n\n  resetCells(cells, options = {}) {\n    // Do not update model at this time. Because if we just update the graph\n    // with the same json-data, the edge will reference to the old nodes.\n    cells.map(cell => this.prepareCell(cell, Object.assign(Object.assign({}, options), {\n      dryrun: true\n    })));\n    this.collection.reset(cells, options); // Update model and trigger edge update it's references\n\n    cells.map(cell => this.prepareCell(cell, {\n      options\n    }));\n    return this;\n  }\n\n  clear(options = {}) {\n    const raw = this.getCells();\n\n    if (raw.length === 0) {\n      return this;\n    }\n\n    const localOptions = Object.assign(Object.assign({}, options), {\n      clear: true\n    });\n    this.batchUpdate('clear', () => {\n      // The nodes come after the edges.\n      const cells = raw.sort((a, b) => {\n        const v1 = a.isEdge() ? 1 : 2;\n        const v2 = b.isEdge() ? 1 : 2;\n        return v1 - v2;\n      });\n\n      while (cells.length > 0) {\n        // Note that all the edges are removed first, so it's safe to\n        // remove the nodes without removing the connected edges first.\n        const cell = cells.shift();\n\n        if (cell) {\n          cell.remove(localOptions);\n        }\n      }\n    }, localOptions);\n    return this;\n  }\n\n  addNode(metadata, options = {}) {\n    const node = Node.isNode(metadata) ? metadata : this.createNode(metadata);\n    this.addCell(node, options);\n    return node;\n  }\n\n  createNode(metadata) {\n    return Node.create(metadata);\n  }\n\n  addEdge(metadata, options = {}) {\n    const edge = Edge.isEdge(metadata) ? metadata : this.createEdge(metadata);\n    this.addCell(edge, options);\n    return edge;\n  }\n\n  createEdge(metadata) {\n    return Edge.create(metadata);\n  }\n\n  addCell(cell, options = {}) {\n    if (Array.isArray(cell)) {\n      return this.addCells(cell, options);\n    }\n\n    if (!this.collection.has(cell) && !this.addings.has(cell)) {\n      this.addings.set(cell, true);\n      this.collection.add(this.prepareCell(cell, options), options);\n      cell.eachChild(child => this.addCell(child, options));\n      this.addings.delete(cell);\n    }\n\n    return this;\n  }\n\n  addCells(cells, options = {}) {\n    const count = cells.length;\n\n    if (count === 0) {\n      return this;\n    }\n\n    const localOptions = Object.assign(Object.assign({}, options), {\n      position: count - 1,\n      maxPosition: count - 1\n    });\n    this.startBatch('add', Object.assign(Object.assign({}, localOptions), {\n      cells\n    }));\n    cells.forEach(cell => {\n      this.addCell(cell, localOptions);\n      localOptions.position -= 1;\n    });\n    this.stopBatch('add', Object.assign(Object.assign({}, localOptions), {\n      cells\n    }));\n    return this;\n  }\n\n  removeCell(obj, options = {}) {\n    const cell = typeof obj === 'string' ? this.getCell(obj) : obj;\n\n    if (cell && this.has(cell)) {\n      return this.collection.remove(cell, options);\n    }\n\n    return null;\n  }\n\n  updateCellId(cell, newId) {\n    this.startBatch('update', {\n      id: newId\n    });\n    cell.prop('id', newId);\n    const newCell = cell.clone({\n      keepId: true\n    });\n    this.addCell(newCell); // update connected edge terminal\n\n    const edges = this.getConnectedEdges(cell);\n    edges.forEach(edge => {\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (sourceCell === cell) {\n        edge.setSource(Object.assign(Object.assign({}, edge.getSource()), {\n          cell: newId\n        }));\n      }\n\n      if (targetCell === cell) {\n        edge.setTarget(Object.assign(Object.assign({}, edge.getTarget()), {\n          cell: newId\n        }));\n      }\n    });\n    this.removeCell(cell);\n    this.stopBatch('update', {\n      id: newId\n    });\n    return newCell;\n  }\n\n  removeCells(cells, options = {}) {\n    if (cells.length) {\n      return this.batchUpdate('remove', () => {\n        return cells.map(cell => this.removeCell(cell, options));\n      });\n    }\n\n    return [];\n  }\n\n  removeConnectedEdges(cell, options = {}) {\n    const edges = this.getConnectedEdges(cell);\n    edges.forEach(edge => {\n      edge.remove(options);\n    });\n    return edges;\n  }\n\n  disconnectConnectedEdges(cell, options = {}) {\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    this.getConnectedEdges(cell).forEach(edge => {\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (sourceCell && sourceCell.id === cellId) {\n        edge.setSource({\n          x: 0,\n          y: 0\n        }, options);\n      }\n\n      if (targetCell && targetCell.id === cellId) {\n        edge.setTarget({\n          x: 0,\n          y: 0\n        }, options);\n      }\n    });\n  }\n\n  has(obj) {\n    return this.collection.has(obj);\n  }\n\n  total() {\n    return this.collection.length;\n  }\n\n  indexOf(cell) {\n    return this.collection.indexOf(cell);\n  }\n  /**\n   * Returns a cell from the graph by its id.\n   */\n\n\n  getCell(id) {\n    return this.collection.get(id);\n  }\n  /**\n   * Returns all the nodes and edges in the graph.\n   */\n\n\n  getCells() {\n    return this.collection.toArray();\n  }\n  /**\n   * Returns the first cell (node or edge) in the graph. The first cell is\n   * defined as the cell with the lowest `zIndex`.\n   */\n\n\n  getFirstCell() {\n    return this.collection.first();\n  }\n  /**\n   * Returns the last cell (node or edge) in the graph. The last cell is\n   * defined as the cell with the highest `zIndex`.\n   */\n\n\n  getLastCell() {\n    return this.collection.last();\n  }\n  /**\n   * Returns the lowest `zIndex` value in the graph.\n   */\n\n\n  getMinZIndex() {\n    const first = this.collection.first();\n    return first ? first.getZIndex() || 0 : 0;\n  }\n  /**\n   * Returns the highest `zIndex` value in the graph.\n   */\n\n\n  getMaxZIndex() {\n    const last = this.collection.last();\n    return last ? last.getZIndex() || 0 : 0;\n  }\n\n  getCellsFromCache(cache) {\n    return cache ? Object.keys(cache).map(id => this.getCell(id)).filter(cell => cell != null) : [];\n  }\n  /**\n   * Returns all the nodes in the graph.\n   */\n\n\n  getNodes() {\n    return this.getCellsFromCache(this.nodes);\n  }\n  /**\n   * Returns all the edges in the graph.\n   */\n\n\n  getEdges() {\n    return this.getCellsFromCache(this.edges);\n  }\n  /**\n   * Returns all outgoing edges for the node.\n   */\n\n\n  getOutgoingEdges(cell) {\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    const cellIds = this.outgoings[cellId];\n    return cellIds ? cellIds.map(id => this.getCell(id)).filter(cell => cell && cell.isEdge()) : null;\n  }\n  /**\n   * Returns all incoming edges for the node.\n   */\n\n\n  getIncomingEdges(cell) {\n    const cellId = typeof cell === 'string' ? cell : cell.id;\n    const cellIds = this.incomings[cellId];\n    return cellIds ? cellIds.map(id => this.getCell(id)).filter(cell => cell && cell.isEdge()) : null;\n  }\n  /**\n   * Returns edges connected with cell.\n   */\n\n\n  getConnectedEdges(cell, options = {}) {\n    const result = [];\n    const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n\n    if (node == null) {\n      return result;\n    }\n\n    const cache = {};\n    const indirect = options.indirect;\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    const collect = (cell, isOutgoing) => {\n      const edges = isOutgoing ? this.getOutgoingEdges(cell) : this.getIncomingEdges(cell);\n\n      if (edges != null) {\n        edges.forEach(edge => {\n          if (cache[edge.id]) {\n            return;\n          }\n\n          result.push(edge);\n          cache[edge.id] = true;\n\n          if (indirect) {\n            if (incoming) {\n              collect(edge, false);\n            }\n\n            if (outgoing) {\n              collect(edge, true);\n            }\n          }\n        });\n      }\n\n      if (indirect && cell.isEdge()) {\n        const terminal = isOutgoing ? cell.getTargetCell() : cell.getSourceCell();\n\n        if (terminal && terminal.isEdge()) {\n          if (!cache[terminal.id]) {\n            result.push(terminal);\n            collect(terminal, isOutgoing);\n          }\n        }\n      }\n    };\n\n    if (outgoing) {\n      collect(node, true);\n    }\n\n    if (incoming) {\n      collect(node, false);\n    }\n\n    if (options.deep) {\n      const descendants = node.getDescendants({\n        deep: true\n      });\n      const embedsCache = {};\n      descendants.forEach(cell => {\n        if (cell.isNode()) {\n          embedsCache[cell.id] = true;\n        }\n      });\n\n      const collectSub = (cell, isOutgoing) => {\n        const edges = isOutgoing ? this.getOutgoingEdges(cell.id) : this.getIncomingEdges(cell.id);\n\n        if (edges != null) {\n          edges.forEach(edge => {\n            if (!cache[edge.id]) {\n              const sourceCell = edge.getSourceCell();\n              const targetCell = edge.getTargetCell();\n\n              if (!options.enclosed && sourceCell && embedsCache[sourceCell.id] && targetCell && embedsCache[targetCell.id]) {\n                return;\n              }\n\n              result.push(edge);\n              cache[edge.id] = true;\n            }\n          });\n        }\n      };\n\n      descendants.forEach(cell => {\n        if (cell.isEdge()) {\n          return;\n        }\n\n        if (outgoing) {\n          collectSub(cell, true);\n        }\n\n        if (incoming) {\n          collectSub(cell, false);\n        }\n      });\n    }\n\n    return result;\n  }\n\n  isBoundary(cell, isOrigin) {\n    const node = typeof cell === 'string' ? this.getCell(cell) : cell;\n    const arr = isOrigin ? this.getIncomingEdges(node) : this.getOutgoingEdges(node);\n    return arr == null || arr.length === 0;\n  }\n\n  getBoundaryNodes(isOrigin) {\n    const result = [];\n    Object.keys(this.nodes).forEach(nodeId => {\n      if (this.isBoundary(nodeId, isOrigin)) {\n        const node = this.getCell(nodeId);\n\n        if (node) {\n          result.push(node);\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * Returns an array of all the roots of the graph.\n   */\n\n\n  getRoots() {\n    return this.getBoundaryNodes(true);\n  }\n  /**\n   * Returns an array of all the leafs of the graph.\n   */\n\n\n  getLeafs() {\n    return this.getBoundaryNodes(false);\n  }\n  /**\n   * Returns `true` if the node is a root node, i.e. there is no edges\n   * coming to the node.\n   */\n\n\n  isRoot(cell) {\n    return this.isBoundary(cell, true);\n  }\n  /**\n   * Returns `true` if the node is a leaf node, i.e. there is no edges\n   * going out from the node.\n   */\n\n\n  isLeaf(cell) {\n    return this.isBoundary(cell, false);\n  }\n  /**\n   * Returns all the neighbors of node in the graph. Neighbors are all\n   * the nodes connected to node via either incoming or outgoing edge.\n   */\n\n\n  getNeighbors(cell, options = {}) {\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    const edges = this.getConnectedEdges(cell, options);\n    const map = edges.reduce((memo, edge) => {\n      const hasLoop = edge.hasLoop(options);\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (incoming && sourceCell && sourceCell.isNode() && !memo[sourceCell.id]) {\n        if (hasLoop || sourceCell !== cell && (!options.deep || !sourceCell.isDescendantOf(cell))) {\n          memo[sourceCell.id] = sourceCell;\n        }\n      }\n\n      if (outgoing && targetCell && targetCell.isNode() && !memo[targetCell.id]) {\n        if (hasLoop || targetCell !== cell && (!options.deep || !targetCell.isDescendantOf(cell))) {\n          memo[targetCell.id] = targetCell;\n        }\n      }\n\n      return memo;\n    }, {});\n\n    if (cell.isEdge()) {\n      if (incoming) {\n        const sourceCell = cell.getSourceCell();\n\n        if (sourceCell && sourceCell.isNode() && !map[sourceCell.id]) {\n          map[sourceCell.id] = sourceCell;\n        }\n      }\n\n      if (outgoing) {\n        const targetCell = cell.getTargetCell();\n\n        if (targetCell && targetCell.isNode() && !map[targetCell.id]) {\n          map[targetCell.id] = targetCell;\n        }\n      }\n    }\n\n    return Object.keys(map).map(id => map[id]);\n  }\n  /**\n   * Returns `true` if `cell2` is a neighbor of `cell1`.\n   */\n\n\n  isNeighbor(cell1, cell2, options = {}) {\n    let incoming = options.incoming;\n    let outgoing = options.outgoing;\n\n    if (incoming == null && outgoing == null) {\n      incoming = outgoing = true;\n    }\n\n    return this.getConnectedEdges(cell1, options).some(edge => {\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (incoming && sourceCell && sourceCell.id === cell2.id) {\n        return true;\n      }\n\n      if (outgoing && targetCell && targetCell.id === cell2.id) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  getSuccessors(cell, options = {}) {\n    const successors = [];\n    this.search(cell, (curr, distance) => {\n      if (curr !== cell && this.matchDistance(distance, options.distance)) {\n        successors.push(curr);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      outgoing: true\n    }));\n    return successors;\n  }\n  /**\n   * Returns `true` if `cell2` is a successor of `cell1`.\n   */\n\n\n  isSuccessor(cell1, cell2, options = {}) {\n    let result = false;\n    this.search(cell1, (curr, distance) => {\n      if (curr === cell2 && curr !== cell1 && this.matchDistance(distance, options.distance)) {\n        result = true;\n        return false;\n      }\n    }, Object.assign(Object.assign({}, options), {\n      outgoing: true\n    }));\n    return result;\n  }\n\n  getPredecessors(cell, options = {}) {\n    const predecessors = [];\n    this.search(cell, (curr, distance) => {\n      if (curr !== cell && this.matchDistance(distance, options.distance)) {\n        predecessors.push(curr);\n      }\n    }, Object.assign(Object.assign({}, options), {\n      incoming: true\n    }));\n    return predecessors;\n  }\n  /**\n   * Returns `true` if `cell2` is a predecessor of `cell1`.\n   */\n\n\n  isPredecessor(cell1, cell2, options = {}) {\n    let result = false;\n    this.search(cell1, (curr, distance) => {\n      if (curr === cell2 && curr !== cell1 && this.matchDistance(distance, options.distance)) {\n        result = true;\n        return false;\n      }\n    }, Object.assign(Object.assign({}, options), {\n      incoming: true\n    }));\n    return result;\n  }\n\n  matchDistance(distance, preset) {\n    if (preset == null) {\n      return true;\n    }\n\n    if (typeof preset === 'function') {\n      return preset(distance);\n    }\n\n    if (Array.isArray(preset) && preset.includes(distance)) {\n      return true;\n    }\n\n    return distance === preset;\n  }\n  /**\n   * Returns the common ancestor of the passed cells.\n   */\n\n\n  getCommonAncestor(...cells) {\n    const arr = [];\n    cells.forEach(item => {\n      if (item) {\n        if (Array.isArray(item)) {\n          arr.push(...item);\n        } else {\n          arr.push(item);\n        }\n      }\n    });\n    return Cell.getCommonAncestor(...arr);\n  }\n  /**\n   * Returns an array of cells that result from finding nodes/edges that\n   * are connected to any of the cells in the cells array. This function\n   * loops over cells and if the current cell is a edge, it collects its\n   * source/target nodes; if it is an node, it collects its incoming and\n   * outgoing edges if both the edge terminal (source/target) are in the\n   * cells array.\n   */\n\n\n  getSubGraph(cells, options = {}) {\n    const subgraph = [];\n    const cache = {};\n    const nodes = [];\n    const edges = [];\n\n    const collect = cell => {\n      if (!cache[cell.id]) {\n        subgraph.push(cell);\n        cache[cell.id] = cell;\n\n        if (cell.isEdge()) {\n          edges.push(cell);\n        }\n\n        if (cell.isNode()) {\n          nodes.push(cell);\n        }\n      }\n    };\n\n    cells.forEach(cell => {\n      collect(cell);\n\n      if (options.deep) {\n        const descendants = cell.getDescendants({\n          deep: true\n        });\n        descendants.forEach(descendant => collect(descendant));\n      }\n    });\n    edges.forEach(edge => {\n      // For edges, include their source & target\n      const sourceCell = edge.getSourceCell();\n      const targetCell = edge.getTargetCell();\n\n      if (sourceCell && !cache[sourceCell.id]) {\n        subgraph.push(sourceCell);\n        cache[sourceCell.id] = sourceCell;\n\n        if (sourceCell.isNode()) {\n          nodes.push(sourceCell);\n        }\n      }\n\n      if (targetCell && !cache[targetCell.id]) {\n        subgraph.push(targetCell);\n        cache[targetCell.id] = targetCell;\n\n        if (targetCell.isNode()) {\n          nodes.push(targetCell);\n        }\n      }\n    });\n    nodes.forEach(node => {\n      // For nodes, include their connected edges if their source/target\n      // is in the subgraph.\n      const edges = this.getConnectedEdges(node, options);\n      edges.forEach(edge => {\n        const sourceCell = edge.getSourceCell();\n        const targetCell = edge.getTargetCell();\n\n        if (!cache[edge.id] && sourceCell && cache[sourceCell.id] && targetCell && cache[targetCell.id]) {\n          subgraph.push(edge);\n          cache[edge.id] = edge;\n        }\n      });\n    });\n    return subgraph;\n  }\n  /**\n   * Clones the whole subgraph (including all the connected links whose\n   * source/target is in the subgraph). If `options.deep` is `true`, also\n   * take into account all the embedded cells of all the subgraph cells.\n   *\n   * Returns a map of the form: { [original cell ID]: [clone] }.\n   */\n\n\n  cloneSubGraph(cells, options = {}) {\n    const subgraph = this.getSubGraph(cells, options);\n    return this.cloneCells(subgraph);\n  }\n\n  cloneCells(cells) {\n    return Cell.cloneCells(cells);\n  }\n\n  getNodesFromPoint(x, y) {\n    const p = typeof x === 'number' ? {\n      x,\n      y: y || 0\n    } : x;\n    return this.getNodes().filter(node => {\n      return node.getBBox().containsPoint(p);\n    });\n  }\n\n  getNodesInArea(x, y, w, h, options) {\n    const rect = typeof x === 'number' ? new Rectangle(x, y, w, h) : Rectangle.create(x);\n    const opts = typeof x === 'number' ? options : y;\n    const strict = opts && opts.strict;\n    return this.getNodes().filter(node => {\n      const bbox = node.getBBox();\n      return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n    });\n  }\n\n  getEdgesInArea(x, y, w, h, options) {\n    const rect = typeof x === 'number' ? new Rectangle(x, y, w, h) : Rectangle.create(x);\n    const opts = typeof x === 'number' ? options : y;\n    const strict = opts && opts.strict;\n    return this.getEdges().filter(edge => {\n      const bbox = edge.getBBox();\n\n      if (bbox.width === 0) {\n        bbox.inflate(1, 0);\n      } else if (bbox.height === 0) {\n        bbox.inflate(0, 1);\n      }\n\n      return strict ? rect.containsRect(bbox) : rect.isIntersectWithRect(bbox);\n    });\n  }\n\n  getNodesUnderNode(node, options = {}) {\n    const bbox = node.getBBox();\n    const nodes = options.by == null || options.by === 'bbox' ? this.getNodesInArea(bbox) : this.getNodesFromPoint(bbox[options.by]);\n    return nodes.filter(curr => node.id !== curr.id && !curr.isDescendantOf(node));\n  }\n  /**\n   * Returns the bounding box that surrounds all cells in the graph.\n   */\n\n\n  getAllCellsBBox() {\n    return this.getCellsBBox(this.getCells());\n  }\n  /**\n   * Returns the bounding box that surrounds all the given cells.\n   */\n\n\n  getCellsBBox(cells, options = {}) {\n    return Cell.getCellsBBox(cells, options);\n  } // #region search\n\n\n  search(cell, iterator, options = {}) {\n    if (options.breadthFirst) {\n      this.breadthFirstSearch(cell, iterator, options);\n    } else {\n      this.depthFirstSearch(cell, iterator, options);\n    }\n  }\n\n  breadthFirstSearch(cell, iterator, options = {}) {\n    const queue = [];\n    const visited = {};\n    const distance = {};\n    queue.push(cell);\n    distance[cell.id] = 0;\n\n    while (queue.length > 0) {\n      const next = queue.shift();\n\n      if (next == null || visited[next.id]) {\n        continue;\n      }\n\n      visited[next.id] = true;\n\n      if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n        continue;\n      }\n\n      const neighbors = this.getNeighbors(next, options);\n      neighbors.forEach(neighbor => {\n        distance[neighbor.id] = distance[next.id] + 1;\n        queue.push(neighbor);\n      });\n    }\n  }\n\n  depthFirstSearch(cell, iterator, options = {}) {\n    const queue = [];\n    const visited = {};\n    const distance = {};\n    queue.push(cell);\n    distance[cell.id] = 0;\n\n    while (queue.length > 0) {\n      const next = queue.pop();\n\n      if (next == null || visited[next.id]) {\n        continue;\n      }\n\n      visited[next.id] = true;\n\n      if (FunctionExt.call(iterator, this, next, distance[next.id]) === false) {\n        continue;\n      }\n\n      const neighbors = this.getNeighbors(next, options);\n      const lastIndex = queue.length;\n      neighbors.forEach(neighbor => {\n        distance[neighbor.id] = distance[next.id] + 1;\n        queue.splice(lastIndex, 0, neighbor);\n      });\n    }\n  } // #endregion\n  // #region shortest path\n\n  /** *\n   * Returns an array of IDs of nodes on the shortest\n   * path between source and target.\n   */\n\n\n  getShortestPath(source, target, options = {}) {\n    const adjacencyList = {};\n    this.getEdges().forEach(edge => {\n      const sourceId = edge.getSourceCellId();\n      const targetId = edge.getTargetCellId();\n\n      if (sourceId && targetId) {\n        if (!adjacencyList[sourceId]) {\n          adjacencyList[sourceId] = [];\n        }\n\n        if (!adjacencyList[targetId]) {\n          adjacencyList[targetId] = [];\n        }\n\n        adjacencyList[sourceId].push(targetId);\n\n        if (!options.directed) {\n          adjacencyList[targetId].push(sourceId);\n        }\n      }\n    });\n    const sourceId = typeof source === 'string' ? source : source.id;\n    const previous = Dijkstra.run(adjacencyList, sourceId, options.weight);\n    const path = [];\n    let targetId = typeof target === 'string' ? target : target.id;\n\n    if (previous[targetId]) {\n      path.push(targetId);\n    }\n\n    while (targetId = previous[targetId]) {\n      path.unshift(targetId);\n    }\n\n    return path;\n  } // #endregion\n  // #region transform\n\n  /**\n   * Translate all cells in the graph by `tx` and `ty` pixels.\n   */\n\n\n  translate(tx, ty, options) {\n    this.getCells().filter(cell => !cell.hasParent()).forEach(cell => cell.translate(tx, ty, options));\n    return this;\n  }\n\n  resize(width, height, options) {\n    return this.resizeCells(width, height, this.getCells(), options);\n  }\n\n  resizeCells(width, height, cells, options = {}) {\n    const bbox = this.getCellsBBox(cells);\n\n    if (bbox) {\n      const sx = Math.max(width / bbox.width, 0);\n      const sy = Math.max(height / bbox.height, 0);\n      const origin = bbox.getOrigin();\n      cells.forEach(cell => cell.scale(sx, sy, origin, options));\n    }\n\n    return this;\n  } // #endregion\n  // #region serialize/deserialize\n\n\n  toJSON(options = {}) {\n    return Model.toJSON(this.getCells(), options);\n  }\n\n  parseJSON(data) {\n    return Model.fromJSON(data);\n  }\n\n  fromJSON(data, options = {}) {\n    const cells = this.parseJSON(data);\n    this.resetCells(cells, options);\n    return this;\n  } // #endregion\n  // #region batch\n\n\n  startBatch(name, data = {}) {\n    this.batches[name] = (this.batches[name] || 0) + 1;\n    this.notify('batch:start', {\n      name,\n      data\n    });\n    return this;\n  }\n\n  stopBatch(name, data = {}) {\n    this.batches[name] = (this.batches[name] || 0) - 1;\n    this.notify('batch:stop', {\n      name,\n      data\n    });\n    return this;\n  }\n\n  batchUpdate(name, execute, data = {}) {\n    this.startBatch(name, data);\n    const result = execute();\n    this.stopBatch(name, data);\n    return result;\n  }\n\n  hasActiveBatch(name = Object.keys(this.batches)) {\n    const names = Array.isArray(name) ? name : [name];\n    return names.some(batch => this.batches[batch] > 0);\n  }\n\n}\n\n(function (Model) {\n  Model.toStringTag = `X6.${Model.name}`;\n\n  function isModel(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Model) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const model = instance;\n\n    if ((tag == null || tag === Model.toStringTag) && typeof model.addNode === 'function' && typeof model.addEdge === 'function' && model.collection != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  Model.isModel = isModel;\n})(Model || (Model = {}));\n\n(function (Model) {\n  function toJSON(cells, options = {}) {\n    return {\n      cells: cells.map(cell => cell.toJSON(options))\n    };\n  }\n\n  Model.toJSON = toJSON;\n\n  function fromJSON(data) {\n    const cells = [];\n\n    if (Array.isArray(data)) {\n      cells.push(...data);\n    } else {\n      if (data.cells) {\n        cells.push(...data.cells);\n      }\n\n      if (data.nodes) {\n        data.nodes.forEach(node => {\n          if (node.shape == null) {\n            node.shape = 'rect';\n          }\n\n          cells.push(node);\n        });\n      }\n\n      if (data.edges) {\n        data.edges.forEach(edge => {\n          if (edge.shape == null) {\n            edge.shape = 'edge';\n          }\n\n          cells.push(edge);\n        });\n      }\n    }\n\n    return cells.map(cell => {\n      const type = cell.shape;\n\n      if (type) {\n        if (Node.registry.exist(type)) {\n          return Node.create(cell);\n        }\n\n        if (Edge.registry.exist(type)) {\n          return Edge.create(cell);\n        }\n      }\n\n      throw new Error('The `shape` should be specified when creating a node/edge instance');\n    });\n  }\n\n  Model.fromJSON = fromJSON;\n})(Model || (Model = {}));","map":{"version":3,"mappings":"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","names":["FunctionExt","Basecoat","Dijkstra","Rectangle","Cell","Edge","Node","Collection","Model","constructor","cells","WeakMap","collection","setup","Symbol","toStringTag","notify","name","args","trigger","graph","on","sortOnChangeZ","cell","onCellAdded","onCellRemoved","options","isNode","Object","node","isEdge","edge","onReset","current","onEdgeTerminalChanged","sort","cellId","id","updateParent","edges","nodes","source","getSource","target","getTarget","cache","outgoings","index","indexOf","splice","length","incomings","clear","disconnectEdges","disconnectConnectedEdges","removeConnectedEdges","model","forEach","type","ref","prev","previous","isCell","terminal","getTerminal","terminalId","push","prepareCell","dryrun","zIndex","setZIndex","getMaxZIndex","silent","resetCells","map","reset","raw","getCells","localOptions","batchUpdate","a","b","v1","v2","shift","remove","addNode","metadata","createNode","addCell","create","addEdge","createEdge","Array","isArray","addCells","has","addings","set","add","eachChild","child","delete","count","position","maxPosition","startBatch","stopBatch","removeCell","obj","getCell","updateCellId","newId","prop","newCell","clone","keepId","getConnectedEdges","sourceCell","getSourceCell","targetCell","getTargetCell","setSource","setTarget","removeCells","x","y","total","get","toArray","getFirstCell","first","getLastCell","last","getMinZIndex","getZIndex","getCellsFromCache","keys","filter","getNodes","getEdges","getOutgoingEdges","cellIds","getIncomingEdges","result","indirect","incoming","outgoing","collect","isOutgoing","deep","descendants","getDescendants","embedsCache","collectSub","enclosed","isBoundary","isOrigin","arr","getBoundaryNodes","nodeId","getRoots","getLeafs","isRoot","isLeaf","getNeighbors","reduce","memo","hasLoop","isDescendantOf","isNeighbor","cell1","cell2","some","getSuccessors","successors","search","curr","distance","matchDistance","isSuccessor","getPredecessors","predecessors","isPredecessor","preset","includes","getCommonAncestor","item","getSubGraph","subgraph","descendant","cloneSubGraph","cloneCells","getNodesFromPoint","p","getBBox","containsPoint","getNodesInArea","w","h","rect","opts","strict","bbox","containsRect","isIntersectWithRect","getEdgesInArea","width","inflate","height","getNodesUnderNode","by","getAllCellsBBox","getCellsBBox","iterator","breadthFirst","breadthFirstSearch","depthFirstSearch","queue","visited","next","call","neighbors","neighbor","pop","lastIndex","getShortestPath","adjacencyList","sourceId","getSourceCellId","targetId","getTargetCellId","directed","run","weight","path","unshift","translate","tx","ty","hasParent","resize","resizeCells","sx","Math","max","sy","origin","getOrigin","scale","toJSON","parseJSON","data","fromJSON","batches","execute","hasActiveBatch","names","batch","isModel","instance","tag","shape","registry","exist","Error"],"sourceRoot":"","sources":["../../src/model/model.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}