{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { Point } from './point';\nimport { Line } from './line';\nimport { Rectangle } from './rectangle';\nimport { Polyline } from './polyline';\nimport { Geometry } from './geometry';\nexport class Curve extends Geometry {\n  constructor(start, controlPoint1, controlPoint2, end) {\n    super();\n    this.PRECISION = 3;\n    this.start = Point.create(start);\n    this.controlPoint1 = Point.create(controlPoint1);\n    this.controlPoint2 = Point.create(controlPoint2);\n    this.end = Point.create(end);\n  }\n\n  get [Symbol.toStringTag]() {\n    return Curve.toStringTag;\n  }\n\n  bbox() {\n    const start = this.start;\n    const controlPoint1 = this.controlPoint1;\n    const controlPoint2 = this.controlPoint2;\n    const end = this.end;\n    const x0 = start.x;\n    const y0 = start.y;\n    const x1 = controlPoint1.x;\n    const y1 = controlPoint1.y;\n    const x2 = controlPoint2.x;\n    const y2 = controlPoint2.y;\n    const x3 = end.x;\n    const y3 = end.y;\n    const points = []; // local extremes\n\n    const tvalues = []; // t values of local extremes\n\n    const bounds = [[], []];\n    let a;\n    let b;\n    let c;\n    let t;\n    let t1;\n    let t2;\n    let b2ac;\n    let sqrtb2ac;\n\n    for (let i = 0; i < 2; i += 1) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n\n        t = -c / b;\n        if (t > 0 && t < 1) tvalues.push(t);\n        continue;\n      }\n\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) continue;\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (t1 > 0 && t1 < 1) tvalues.push(t1);\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (t2 > 0 && t2 < 1) tvalues.push(t2);\n    }\n\n    let x;\n    let y;\n    let mt;\n    let j = tvalues.length;\n    const jlen = j;\n\n    while (j) {\n      j -= 1;\n      t = tvalues[j];\n      mt = 1 - t;\n      x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n      bounds[0][j] = x;\n      y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n      bounds[1][j] = y;\n      points[j] = {\n        X: x,\n        Y: y\n      };\n    }\n\n    tvalues[jlen] = 0;\n    tvalues[jlen + 1] = 1;\n    points[jlen] = {\n      X: x0,\n      Y: y0\n    };\n    points[jlen + 1] = {\n      X: x3,\n      Y: y3\n    };\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    tvalues.length = jlen + 2;\n    bounds[0].length = jlen + 2;\n    bounds[1].length = jlen + 2;\n    points.length = jlen + 2;\n    const left = Math.min.apply(null, bounds[0]);\n    const top = Math.min.apply(null, bounds[1]);\n    const right = Math.max.apply(null, bounds[0]);\n    const bottom = Math.max.apply(null, bounds[1]);\n    return new Rectangle(left, top, right - left, bottom - top);\n  }\n\n  closestPoint(p, options = {}) {\n    return this.pointAtT(this.closestPointT(p, options));\n  }\n\n  closestPointLength(p, options = {}) {\n    const opts = this.getOptions(options);\n    return this.lengthAtT(this.closestPointT(p, opts), opts);\n  }\n\n  closestPointNormalizedLength(p, options = {}) {\n    const opts = this.getOptions(options);\n    const cpLength = this.closestPointLength(p, opts);\n\n    if (!cpLength) {\n      return 0;\n    }\n\n    const length = this.length(opts);\n\n    if (length === 0) {\n      return 0;\n    }\n\n    return cpLength / length;\n  }\n\n  closestPointT(p, options = {}) {\n    const precision = this.getPrecision(options);\n    const subdivisions = this.getDivisions(options);\n    const precisionRatio = Math.pow(10, -precision); // eslint-disable-line\n\n    let investigatedSubdivision = null;\n    let investigatedSubdivisionStartT = 0;\n    let investigatedSubdivisionEndT = 0;\n    let distFromStart = 0;\n    let distFromEnd = 0;\n    let chordLength = 0;\n    let minSumDist = null;\n    const count = subdivisions.length;\n    let piece = count > 0 ? 1 / count : 0;\n    subdivisions.forEach((division, i) => {\n      const startDist = division.start.distance(p);\n      const endDist = division.end.distance(p);\n      const sumDist = startDist + endDist;\n\n      if (minSumDist == null || sumDist < minSumDist) {\n        investigatedSubdivision = division;\n        investigatedSubdivisionStartT = i * piece;\n        investigatedSubdivisionEndT = (i + 1) * piece;\n        distFromStart = startDist;\n        distFromEnd = endDist;\n        minSumDist = sumDist;\n        chordLength = division.endpointDistance();\n      }\n    }); // Recursively divide investigated subdivision, until distance between\n    // baselinePoint and closest path endpoint is within `10^(-precision)`,\n    // then return the closest endpoint of that final subdivision.\n    // eslint-disable-next-line\n\n    while (true) {\n      // check if we have reached at least one required observed precision\n      // - calculated as: the difference in distances from point to start and end divided by the distance\n      // - note that this function is not monotonic = it doesn't converge stably but has \"teeth\"\n      // - the function decreases while one of the endpoints is fixed but \"jumps\" whenever we switch\n      // - this criterion works well for points lying far away from the curve\n      const startPrecisionRatio = distFromStart ? Math.abs(distFromStart - distFromEnd) / distFromStart : 0;\n      const endPrecisionRatio = distFromEnd != null ? Math.abs(distFromStart - distFromEnd) / distFromEnd : 0;\n      const hasRequiredPrecision = startPrecisionRatio < precisionRatio || endPrecisionRatio < precisionRatio; // check if we have reached at least one required minimal distance\n      // - calculated as: the subdivision chord length multiplied by precisionRatio\n      // - calculation is relative so it will work for arbitrarily large/small curves and their subdivisions\n      // - this is a backup criterion that works well for points lying \"almost at\" the curve\n\n      const hasMiniStartDistance = distFromStart ? distFromStart < chordLength * precisionRatio : true;\n      const hasMiniEndDistance = distFromEnd ? distFromEnd < chordLength * precisionRatio : true;\n      const hasMiniDistance = hasMiniStartDistance || hasMiniEndDistance;\n\n      if (hasRequiredPrecision || hasMiniDistance) {\n        return distFromStart <= distFromEnd ? investigatedSubdivisionStartT : investigatedSubdivisionEndT;\n      } // otherwise, set up for next iteration\n\n\n      const divided = investigatedSubdivision.divide(0.5);\n      piece /= 2;\n      const startDist1 = divided[0].start.distance(p);\n      const endDist1 = divided[0].end.distance(p);\n      const sumDist1 = startDist1 + endDist1;\n      const startDist2 = divided[1].start.distance(p);\n      const endDist2 = divided[1].end.distance(p);\n      const sumDist2 = startDist2 + endDist2;\n\n      if (sumDist1 <= sumDist2) {\n        investigatedSubdivision = divided[0];\n        investigatedSubdivisionEndT -= piece;\n        distFromStart = startDist1;\n        distFromEnd = endDist1;\n      } else {\n        investigatedSubdivision = divided[1];\n        investigatedSubdivisionStartT += piece;\n        distFromStart = startDist2;\n        distFromEnd = endDist2;\n      }\n    }\n  }\n\n  closestPointTangent(p, options = {}) {\n    return this.tangentAtT(this.closestPointT(p, options));\n  }\n\n  containsPoint(p, options = {}) {\n    const polyline = this.toPolyline(options);\n    return polyline.containsPoint(p);\n  }\n\n  divideAt(ratio, options = {}) {\n    if (ratio <= 0) {\n      return this.divideAtT(0);\n    }\n\n    if (ratio >= 1) {\n      return this.divideAtT(1);\n    }\n\n    const t = this.tAt(ratio, options);\n    return this.divideAtT(t);\n  }\n\n  divideAtLength(length, options = {}) {\n    const t = this.tAtLength(length, options);\n    return this.divideAtT(t);\n  }\n\n  divide(t) {\n    return this.divideAtT(t);\n  }\n\n  divideAtT(t) {\n    const start = this.start;\n    const controlPoint1 = this.controlPoint1;\n    const controlPoint2 = this.controlPoint2;\n    const end = this.end;\n\n    if (t <= 0) {\n      return [new Curve(start, start, start, start), new Curve(start, controlPoint1, controlPoint2, end)];\n    }\n\n    if (t >= 1) {\n      return [new Curve(start, controlPoint1, controlPoint2, end), new Curve(end, end, end, end)];\n    }\n\n    const dividerPoints = this.getSkeletonPoints(t);\n    const startControl1 = dividerPoints.startControlPoint1;\n    const startControl2 = dividerPoints.startControlPoint2;\n    const divider = dividerPoints.divider;\n    const dividerControl1 = dividerPoints.dividerControlPoint1;\n    const dividerControl2 = dividerPoints.dividerControlPoint2;\n    return [new Curve(start, startControl1, startControl2, divider), new Curve(divider, dividerControl1, dividerControl2, end)];\n  }\n\n  endpointDistance() {\n    return this.start.distance(this.end);\n  }\n\n  getSkeletonPoints(t) {\n    const start = this.start;\n    const control1 = this.controlPoint1;\n    const control2 = this.controlPoint2;\n    const end = this.end; // shortcuts for `t` values that are out of range\n\n    if (t <= 0) {\n      return {\n        startControlPoint1: start.clone(),\n        startControlPoint2: start.clone(),\n        divider: start.clone(),\n        dividerControlPoint1: control1.clone(),\n        dividerControlPoint2: control2.clone()\n      };\n    }\n\n    if (t >= 1) {\n      return {\n        startControlPoint1: control1.clone(),\n        startControlPoint2: control2.clone(),\n        divider: end.clone(),\n        dividerControlPoint1: end.clone(),\n        dividerControlPoint2: end.clone()\n      };\n    }\n\n    const midpoint1 = new Line(start, control1).pointAt(t);\n    const midpoint2 = new Line(control1, control2).pointAt(t);\n    const midpoint3 = new Line(control2, end).pointAt(t);\n    const subControl1 = new Line(midpoint1, midpoint2).pointAt(t);\n    const subControl2 = new Line(midpoint2, midpoint3).pointAt(t);\n    const divideLine = new Line(subControl1, subControl2).pointAt(t);\n    return {\n      startControlPoint1: midpoint1,\n      startControlPoint2: subControl1,\n      divider: divideLine,\n      dividerControlPoint1: subControl2,\n      dividerControlPoint2: midpoint3\n    };\n  }\n\n  getSubdivisions(options = {}) {\n    const precision = this.getPrecision(options);\n    let subdivisions = [new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end)];\n\n    if (precision === 0) {\n      return subdivisions;\n    }\n\n    let previousLength = this.endpointDistance();\n    const precisionRatio = Math.pow(10, -precision); // eslint-disable-line\n    // Recursively divide curve at `t = 0.5`, until the difference between\n    // observed length at subsequent iterations is lower than precision.\n\n    let iteration = 0; // eslint-disable-next-line\n\n    while (true) {\n      iteration += 1;\n      const divisions = [];\n      subdivisions.forEach(c => {\n        // dividing at t = 0.5 (not at middle length!)\n        const divided = c.divide(0.5);\n        divisions.push(divided[0], divided[1]);\n      }); // measure new length\n\n      const length = divisions.reduce((memo, c) => memo + c.endpointDistance(), 0); // check if we have reached required observed precision\n      // sine-like curves may have the same observed length in iteration 0 and 1 - skip iteration 1\n      // not a problem for further iterations because cubic curves cannot have more than two local extrema\n      // (i.e. cubic curves cannot intersect the baseline more than once)\n      // therefore two subsequent iterations cannot produce sampling with equal length\n\n      const ratio = length !== 0 ? (length - previousLength) / length : 0;\n\n      if (iteration > 1 && ratio < precisionRatio) {\n        return divisions;\n      }\n\n      subdivisions = divisions;\n      previousLength = length;\n    }\n  }\n\n  length(options = {}) {\n    const divisions = this.getDivisions(options);\n    return divisions.reduce((memo, c) => {\n      return memo + c.endpointDistance();\n    }, 0);\n  }\n\n  lengthAtT(t, options = {}) {\n    if (t <= 0) {\n      return 0;\n    }\n\n    const precision = options.precision === undefined ? this.PRECISION : options.precision;\n    const subCurve = this.divide(t)[0];\n    return subCurve.length({\n      precision\n    });\n  }\n\n  pointAt(ratio, options = {}) {\n    if (ratio <= 0) {\n      return this.start.clone();\n    }\n\n    if (ratio >= 1) {\n      return this.end.clone();\n    }\n\n    const t = this.tAt(ratio, options);\n    return this.pointAtT(t);\n  }\n\n  pointAtLength(length, options = {}) {\n    const t = this.tAtLength(length, options);\n    return this.pointAtT(t);\n  }\n\n  pointAtT(t) {\n    if (t <= 0) {\n      return this.start.clone();\n    }\n\n    if (t >= 1) {\n      return this.end.clone();\n    }\n\n    return this.getSkeletonPoints(t).divider;\n  }\n\n  isDifferentiable() {\n    const start = this.start;\n    const control1 = this.controlPoint1;\n    const control2 = this.controlPoint2;\n    const end = this.end;\n    return !(start.equals(control1) && control1.equals(control2) && control2.equals(end));\n  }\n\n  tangentAt(ratio, options = {}) {\n    if (!this.isDifferentiable()) return null;\n\n    if (ratio < 0) {\n      ratio = 0; // eslint-disable-line\n    } else if (ratio > 1) {\n      ratio = 1; // eslint-disable-line\n    }\n\n    const t = this.tAt(ratio, options);\n    return this.tangentAtT(t);\n  }\n\n  tangentAtLength(length, options = {}) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    const t = this.tAtLength(length, options);\n    return this.tangentAtT(t);\n  }\n\n  tangentAtT(t) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    if (t < 0) {\n      t = 0; // eslint-disable-line\n    }\n\n    if (t > 1) {\n      t = 1; // eslint-disable-line\n    }\n\n    const skeletonPoints = this.getSkeletonPoints(t);\n    const p1 = skeletonPoints.startControlPoint2;\n    const p2 = skeletonPoints.dividerControlPoint1;\n    const tangentStart = skeletonPoints.divider;\n    const tangentLine = new Line(p1, p2); // move so that tangent line starts at the point requested\n\n    tangentLine.translate(tangentStart.x - p1.x, tangentStart.y - p1.y);\n    return tangentLine;\n  }\n\n  getPrecision(options = {}) {\n    return options.precision == null ? this.PRECISION : options.precision;\n  }\n\n  getDivisions(options = {}) {\n    if (options.subdivisions != null) {\n      return options.subdivisions;\n    }\n\n    const precision = this.getPrecision(options);\n    return this.getSubdivisions({\n      precision\n    });\n  }\n\n  getOptions(options = {}) {\n    const precision = this.getPrecision(options);\n    const subdivisions = this.getDivisions(options);\n    return {\n      precision,\n      subdivisions\n    };\n  }\n\n  tAt(ratio, options = {}) {\n    if (ratio <= 0) {\n      return 0;\n    }\n\n    if (ratio >= 1) {\n      return 1;\n    }\n\n    const opts = this.getOptions(options);\n    const total = this.length(opts);\n    const length = total * ratio;\n    return this.tAtLength(length, opts);\n  }\n\n  tAtLength(length, options = {}) {\n    let fromStart = true;\n\n    if (length < 0) {\n      fromStart = false;\n      length = -length; // eslint-disable-line\n    }\n\n    const precision = this.getPrecision(options);\n    const subdivisions = this.getDivisions(options);\n    const opts = {\n      precision,\n      subdivisions\n    };\n    let investigatedSubdivision = null;\n    let investigatedSubdivisionStartT;\n    let investigatedSubdivisionEndT;\n    let baselinePointDistFromStart = 0;\n    let baselinePointDistFromEnd = 0;\n    let memo = 0;\n    const count = subdivisions.length;\n    let piece = count > 0 ? 1 / count : 0;\n\n    for (let i = 0; i < count; i += 1) {\n      const index = fromStart ? i : count - 1 - i;\n      const division = subdivisions[i];\n      const dist = division.endpointDistance();\n\n      if (length <= memo + dist) {\n        investigatedSubdivision = division;\n        investigatedSubdivisionStartT = index * piece;\n        investigatedSubdivisionEndT = (index + 1) * piece;\n        baselinePointDistFromStart = fromStart ? length - memo : dist + memo - length;\n        baselinePointDistFromEnd = fromStart ? dist + memo - length : length - memo;\n        break;\n      }\n\n      memo += dist;\n    }\n\n    if (investigatedSubdivision == null) {\n      return fromStart ? 1 : 0;\n    } // note that precision affects what length is recorded\n    // (imprecise measurements underestimate length by up to 10^(-precision) of the precise length)\n    // e.g. at precision 1, the length may be underestimated by up to 10% and cause this function to return 1\n\n\n    const total = this.length(opts);\n    const precisionRatio = Math.pow(10, -precision); // eslint-disable-line\n    // recursively divide investigated subdivision:\n    // until distance between baselinePoint and closest path endpoint is within 10^(-precision)\n    // then return the closest endpoint of that final subdivision\n    // eslint-disable-next-line\n\n    while (true) {\n      let ratio;\n      ratio = total !== 0 ? baselinePointDistFromStart / total : 0;\n\n      if (ratio < precisionRatio) {\n        return investigatedSubdivisionStartT;\n      }\n\n      ratio = total !== 0 ? baselinePointDistFromEnd / total : 0;\n\n      if (ratio < precisionRatio) {\n        return investigatedSubdivisionEndT;\n      } // otherwise, set up for next iteration\n\n\n      let newBaselinePointDistFromStart;\n      let newBaselinePointDistFromEnd;\n      const divided = investigatedSubdivision.divide(0.5);\n      piece /= 2;\n      const baseline1Length = divided[0].endpointDistance();\n      const baseline2Length = divided[1].endpointDistance();\n\n      if (baselinePointDistFromStart <= baseline1Length) {\n        investigatedSubdivision = divided[0];\n        investigatedSubdivisionEndT -= piece;\n        newBaselinePointDistFromStart = baselinePointDistFromStart;\n        newBaselinePointDistFromEnd = baseline1Length - newBaselinePointDistFromStart;\n      } else {\n        investigatedSubdivision = divided[1];\n        investigatedSubdivisionStartT += piece;\n        newBaselinePointDistFromStart = baselinePointDistFromStart - baseline1Length;\n        newBaselinePointDistFromEnd = baseline2Length - newBaselinePointDistFromStart;\n      }\n\n      baselinePointDistFromStart = newBaselinePointDistFromStart;\n      baselinePointDistFromEnd = newBaselinePointDistFromEnd;\n    }\n  }\n\n  toPoints(options = {}) {\n    const subdivisions = this.getDivisions(options);\n    const points = [subdivisions[0].start.clone()];\n    subdivisions.forEach(c => points.push(c.end.clone()));\n    return points;\n  }\n\n  toPolyline(options = {}) {\n    return new Polyline(this.toPoints(options));\n  }\n\n  scale(sx, sy, origin) {\n    this.start.scale(sx, sy, origin);\n    this.controlPoint1.scale(sx, sy, origin);\n    this.controlPoint2.scale(sx, sy, origin);\n    this.end.scale(sx, sy, origin);\n    return this;\n  }\n\n  rotate(angle, origin) {\n    this.start.rotate(angle, origin);\n    this.controlPoint1.rotate(angle, origin);\n    this.controlPoint2.rotate(angle, origin);\n    this.end.rotate(angle, origin);\n    return this;\n  }\n\n  translate(tx, ty) {\n    if (typeof tx === 'number') {\n      this.start.translate(tx, ty);\n      this.controlPoint1.translate(tx, ty);\n      this.controlPoint2.translate(tx, ty);\n      this.end.translate(tx, ty);\n    } else {\n      this.start.translate(tx);\n      this.controlPoint1.translate(tx);\n      this.controlPoint2.translate(tx);\n      this.end.translate(tx);\n    }\n\n    return this;\n  }\n\n  equals(c) {\n    return c != null && this.start.equals(c.start) && this.controlPoint1.equals(c.controlPoint1) && this.controlPoint2.equals(c.controlPoint2) && this.end.equals(c.end);\n  }\n\n  clone() {\n    return new Curve(this.start, this.controlPoint1, this.controlPoint2, this.end);\n  }\n\n  toJSON() {\n    return {\n      start: this.start.toJSON(),\n      controlPoint1: this.controlPoint1.toJSON(),\n      controlPoint2: this.controlPoint2.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n\n  serialize() {\n    return [this.start.serialize(), this.controlPoint1.serialize(), this.controlPoint2.serialize(), this.end.serialize()].join(' ');\n  }\n\n}\n\n(function (Curve) {\n  Curve.toStringTag = `X6.Geometry.${Curve.name}`;\n\n  function isCurve(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Curve) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const curve = instance;\n\n    try {\n      if ((tag == null || tag === Curve.toStringTag) && Point.isPoint(curve.start) && Point.isPoint(curve.controlPoint1) && Point.isPoint(curve.controlPoint2) && Point.isPoint(curve.end) && typeof curve.toPoints === 'function' && typeof curve.toPolyline === 'function') {\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n\n  Curve.isCurve = isCurve;\n})(Curve || (Curve = {}));\n\n(function (Curve) {\n  function getFirstControlPoints(rhs) {\n    const n = rhs.length;\n    const x = []; // `x` is a solution vector.\n\n    const tmp = [];\n    let b = 2.0;\n    x[0] = rhs[0] / b; // Decomposition and forward substitution.\n\n    for (let i = 1; i < n; i += 1) {\n      tmp[i] = 1 / b;\n      b = (i < n - 1 ? 4.0 : 3.5) - tmp[i];\n      x[i] = (rhs[i] - x[i - 1]) / b;\n    }\n\n    for (let i = 1; i < n; i += 1) {\n      // Backsubstitution.\n      x[n - i - 1] -= tmp[n - i] * x[n - i];\n    }\n\n    return x;\n  }\n\n  function getCurveControlPoints(points) {\n    const knots = points.map(p => Point.clone(p));\n    const firstControlPoints = [];\n    const secondControlPoints = [];\n    const n = knots.length - 1; // Special case: Bezier curve should be a straight line.\n\n    if (n === 1) {\n      // 3P1 = 2P0 + P3\n      firstControlPoints[0] = new Point((2 * knots[0].x + knots[1].x) / 3, (2 * knots[0].y + knots[1].y) / 3); // P2 = 2P1 – P0\n\n      secondControlPoints[0] = new Point(2 * firstControlPoints[0].x - knots[0].x, 2 * firstControlPoints[0].y - knots[0].y);\n      return [firstControlPoints, secondControlPoints];\n    } // Calculate first Bezier control points.\n    // Right hand side vector.\n\n\n    const rhs = []; // Set right hand side X values.\n\n    for (let i = 1; i < n - 1; i += 1) {\n      rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;\n    }\n\n    rhs[0] = knots[0].x + 2 * knots[1].x;\n    rhs[n - 1] = (8 * knots[n - 1].x + knots[n].x) / 2.0; // Get first control points X-values.\n\n    const x = getFirstControlPoints(rhs); // Set right hand side Y values.\n\n    for (let i = 1; i < n - 1; i += 1) {\n      rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;\n    }\n\n    rhs[0] = knots[0].y + 2 * knots[1].y;\n    rhs[n - 1] = (8 * knots[n - 1].y + knots[n].y) / 2.0; // Get first control points Y-values.\n\n    const y = getFirstControlPoints(rhs); // Fill output arrays.\n\n    for (let i = 0; i < n; i += 1) {\n      // First control point.\n      firstControlPoints.push(new Point(x[i], y[i])); // Second control point.\n\n      if (i < n - 1) {\n        secondControlPoints.push(new Point(2 * knots[i + 1].x - x[i + 1], 2 * knots[i + 1].y - y[i + 1]));\n      } else {\n        secondControlPoints.push(new Point((knots[n].x + x[n - 1]) / 2, (knots[n].y + y[n - 1]) / 2));\n      }\n    }\n\n    return [firstControlPoints, secondControlPoints];\n  }\n\n  function throughPoints(points) {\n    if (points == null || Array.isArray(points) && points.length < 2) {\n      throw new Error('At least 2 points are required');\n    }\n\n    const controlPoints = getCurveControlPoints(points);\n    const curves = [];\n\n    for (let i = 0, ii = controlPoints[0].length; i < ii; i += 1) {\n      const controlPoint1 = new Point(controlPoints[0][i].x, controlPoints[0][i].y);\n      const controlPoint2 = new Point(controlPoints[1][i].x, controlPoints[1][i].y);\n      curves.push(new Curve(points[i], controlPoint1, controlPoint2, points[i + 1]));\n    }\n\n    return curves;\n  }\n\n  Curve.throughPoints = throughPoints;\n})(Curve || (Curve = {}));","map":{"version":3,"mappings":"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","names":["Point","Line","Rectangle","Polyline","Geometry","Curve","constructor","start","controlPoint1","controlPoint2","end","create","Symbol","toStringTag","bbox","x0","x","y0","y","x1","y1","x2","y2","x3","y3","points","tvalues","bounds","a","b","c","t","t1","t2","b2ac","sqrtb2ac","i","Math","abs","push","sqrt","mt","j","length","jlen","X","Y","left","min","apply","top","right","max","bottom","closestPoint","p","options","pointAtT","closestPointT","closestPointLength","opts","getOptions","lengthAtT","closestPointNormalizedLength","cpLength","precision","getPrecision","subdivisions","getDivisions","precisionRatio","pow","investigatedSubdivision","investigatedSubdivisionStartT","investigatedSubdivisionEndT","distFromStart","distFromEnd","chordLength","minSumDist","count","piece","forEach","division","startDist","distance","endDist","sumDist","endpointDistance","startPrecisionRatio","endPrecisionRatio","hasRequiredPrecision","hasMiniStartDistance","hasMiniEndDistance","hasMiniDistance","divided","divide","startDist1","endDist1","sumDist1","startDist2","endDist2","sumDist2","closestPointTangent","tangentAtT","containsPoint","polyline","toPolyline","divideAt","ratio","divideAtT","tAt","divideAtLength","tAtLength","dividerPoints","getSkeletonPoints","startControl1","startControlPoint1","startControl2","startControlPoint2","divider","dividerControl1","dividerControlPoint1","dividerControl2","dividerControlPoint2","control1","control2","clone","midpoint1","pointAt","midpoint2","midpoint3","subControl1","subControl2","divideLine","getSubdivisions","previousLength","iteration","divisions","reduce","memo","undefined","PRECISION","subCurve","pointAtLength","isDifferentiable","equals","tangentAt","tangentAtLength","skeletonPoints","p1","p2","tangentStart","tangentLine","translate","total","fromStart","baselinePointDistFromStart","baselinePointDistFromEnd","index","dist","newBaselinePointDistFromStart","newBaselinePointDistFromEnd","baseline1Length","baseline2Length","toPoints","scale","sx","sy","origin","rotate","angle","tx","ty","toJSON","serialize","join","name","isCurve","instance","tag","curve","isPoint","e","getFirstControlPoints","rhs","n","tmp","getCurveControlPoints","knots","map","firstControlPoints","secondControlPoints","throughPoints","Array","isArray","Error","controlPoints","curves","ii"],"sourceRoot":"","sources":["../../src/geometry/curve.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}