{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { AST_TOKEN_TYPES, createEntity, DefineValuePlaceholder, IDENTIFIER, STORAGE_CLASS, Target } from '@antv/g-webgpu-core'; // tslint:disable-next-line:no-submodule-imports\n\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\nexport var Kernel = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ConfigService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function Kernel() {\n    _classCallCheck(this, Kernel);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    this.entity = createEntity();\n    this.model = void 0;\n    this.dirty = true;\n    this.compiledBundle = void 0;\n    this.initPromise = void 0;\n  }\n\n  _createClass(Kernel, [{\n    key: \"init\",\n    value: function init() {\n      var _this$configService$g = this.configService.get(),\n          canvas = _this$configService$g.canvas,\n          engineOptions = _this$configService$g.engineOptions;\n\n      this.initPromise = this.engine.init(_objectSpread({\n        canvas: canvas || createCanvas(),\n        swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n        antialiasing: false\n      }, engineOptions));\n    }\n  }, {\n    key: \"setBundle\",\n    value: function setBundle(bundle) {\n      // deep clone\n      this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n    }\n  }, {\n    key: \"setDispatch\",\n    value: function setDispatch(dispatch) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.dispatch = dispatch;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setMaxIteration\",\n    value: function setMaxIteration(maxIteration) {\n      if (this.compiledBundle.context) {\n        this.compiledBundle.context.maxIteration = maxIteration;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setBinding\",\n    value: function setBinding(name, data) {\n      var _this = this;\n\n      if (typeof name === 'string') {\n        var isNumberLikeData = isNumber(data) || isTypedArray(data) || isArray(data);\n\n        if (this.compiledBundle && this.compiledBundle.context) {\n          // set define, eg. setBinding('MAX_LENGTH', 10)\n          var existedDefine = this.compiledBundle.context.defines.find(function (b) {\n            return b.name === name;\n          });\n\n          if (existedDefine) {\n            existedDefine.value = data;\n            return this;\n          } // set uniform\n\n\n          var existedBinding = this.compiledBundle.context.uniforms.find(function (b) {\n            return b.name === name;\n          });\n\n          if (existedBinding) {\n            // update uniform or buffer\n            if (isNumberLikeData) {\n              // @ts-ignore\n              existedBinding.data = data;\n              existedBinding.isReferer = false;\n\n              if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateUniform(name, data);\n                }\n              } else {\n                if (this.model) {\n                  // @ts-ignore\n                  this.model.updateBuffer(name, data);\n                }\n              }\n            } else {\n              // update with another kernel\n              existedBinding.isReferer = true; // @ts-ignore\n\n              existedBinding.data = data;\n            }\n          }\n        }\n      } else {\n        Object.keys(name).forEach(function (key) {\n          _this.setBinding(key, name[key]);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var iteration,\n            i,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                iteration = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n\n                if (!this.dirty) {\n                  _context.next = 6;\n                  break;\n                }\n\n                if (this.compiledBundle.context) {\n                  if (iteration > 1) {\n                    this.compiledBundle.context.maxIteration = iteration;\n                  } else {\n                    this.compiledBundle.context.maxIteration++;\n                  }\n                }\n\n                _context.next = 5;\n                return this.compile();\n\n              case 5:\n                this.dirty = false;\n\n              case 6:\n                this.engine.beginFrame(); // 首先开启当前 frame 的 compute pass\n\n                this.engine.clear({});\n\n                if (this.compiledBundle.context) {\n                  this.compiledBundle.context.uniforms.filter(function (_ref) {\n                    var isReferer = _ref.isReferer;\n                    return isReferer;\n                  }).forEach(function (_ref2) {\n                    var data = _ref2.data,\n                        name = _ref2.name; // @ts-ignore\n\n                    _this2.model.confirmInput(data.model, name);\n                  });\n                }\n\n                for (i = 0; i < iteration; i++) {\n                  this.model.run();\n                }\n\n                this.engine.endFrame();\n                return _context.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n    /**\n     * read output from GPUBuffer\n     */\n\n  }, {\n    key: \"getOutput\",\n    value: function () {\n      var _getOutput = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.model.readData());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getOutput() {\n        return _getOutput.apply(this, arguments);\n      }\n\n      return getOutput;\n    }()\n  }, {\n    key: \"compile\",\n    value: function () {\n      var _compile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var context, target, shader;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.initPromise;\n\n              case 2:\n                context = _objectSpread({}, this.compiledBundle.context);\n                target = this.engine.supportWebGPU ? this.engine.useWGSL ? Target.WGSL : Target.GLSL450 : Target.GLSL100;\n                shader = this.compiledBundle.shaders[target]; // this.bindings?.forEach(({ name, data }) => {\n                //   if (name === name.toUpperCase()) {\n                //     const define = context.defines.find((d) => d.name === name);\n                //     if (define) {\n                //       // @ts-ignore\n                //       define.value = data;\n                //     }\n                //   }\n                // });\n                // 生成运行时 define\n\n                context.defines.filter(function (define) {\n                  return define.runtime;\n                }).forEach(function (define) {\n                  var valuePlaceHolder = \"\".concat(DefineValuePlaceholder).concat(define.name);\n                  shader = shader.replace(valuePlaceHolder, \"\".concat(define.value));\n                });\n                context.shader = shader; // 添加 uniform 绑定的数据\n\n                context.uniforms.forEach(function (uniform) {\n                  // const binding = this.bindings.find((b) => b.name === uniform.name);\n                  // if (binding) {\n                  //   // @ts-ignore\n                  //   uniform.data = binding.referer || binding.data;\n                  //   // @ts-ignore\n                  //   uniform.isReferer = !!binding.referer;\n                  // }\n                  // 未指定数据，尝试根据 uniform 类型初始化\n                  if (!uniform.data) {\n                    if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n                      var sizePerElement = 1;\n\n                      if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n                        sizePerElement = 1;\n                      } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n                        sizePerElement = 4;\n                      }\n\n                      uniform.data = new Float32Array(context.output.length * sizePerElement).fill(0);\n                    }\n                  }\n                }); // } else if (uniform.type === 'image2D') {\n                //   // @ts-ignore\n                //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n                // }\n\n                this.compiledBundle.context = context;\n                _context3.next = 11;\n                return this.engine.createComputeModel(this.compiledBundle.context);\n\n              case 11:\n                this.model = _context3.sent;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function compile() {\n        return _compile.apply(this, arguments);\n      }\n\n      return compile;\n    }()\n  }]);\n\n  return Kernel;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"mappings":"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","names":["AST_TOKEN_TYPES","createEntity","DefineValuePlaceholder","IDENTIFIER","STORAGE_CLASS","Target","WebGPUConstants","inject","injectable","createCanvas","isArray","isNumber","isTypedArray","Kernel","RenderEngine","ConfigService","_classCallCheck","_initializerDefineProperty","entity","model","dirty","compiledBundle","initPromise","_createClass","key","value","configService","get","canvas","engineOptions","engine","init","swapChainFormat","TextureFormat","BGRA8Unorm","antialiasing","bundle","JSON","parse","stringify","dispatch","context","maxIteration","name","data","isNumberLikeData","existedDefine","defines","find","b","existedBinding","uniforms","isReferer","storageClass","Uniform","updateUniform","updateBuffer","Object","keys","forEach","_this","setBinding","iteration","_context","compile","beginFrame","clear","filter","_this2","confirmInput","i","run","endFrame","readData","_context3","target","supportWebGPU","useWGSL","WGSL","GLSL450","GLSL100","shader","shaders","define","runtime","valuePlaceHolder","replace","uniform","StorageBuffer","sizePerElement","type","FloatArray","Vector4FloatArray","Float32Array","output","length","fill","createComputeModel","configurable","enumerable","writable","initializer"],"sources":["../src/Kernel.ts"],"sourcesContent":["import {\n  AST_TOKEN_TYPES,\n  createEntity,\n  DefineValuePlaceholder,\n  IComputeModel,\n  IConfigService,\n  IDENTIFIER,\n  IRendererService,\n  KernelBundle,\n  STORAGE_CLASS,\n  Target,\n} from '@antv/g-webgpu-core';\n// tslint:disable-next-line:no-submodule-imports\nimport * as WebGPUConstants from '@webgpu/types/dist/constants';\nimport { inject, injectable } from 'inversify';\nimport { createCanvas } from './utils/canvas';\nimport isArray from './utils/is-array';\nimport { isNumber } from './utils/is-number';\nimport { isTypedArray } from './utils/is-typedarray';\n\n@injectable()\nexport class Kernel {\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ConfigService)\n  private readonly configService: IConfigService;\n\n  private entity = createEntity();\n\n  private model: IComputeModel;\n\n  private dirty: boolean = true;\n\n  private compiledBundle: KernelBundle;\n\n  private initPromise: Promise<void>;\n\n  public init() {\n    const { canvas, engineOptions } = this.configService.get();\n\n    this.initPromise = this.engine.init({\n      canvas: canvas || createCanvas(),\n      swapChainFormat: WebGPUConstants.TextureFormat.BGRA8Unorm,\n      antialiasing: false,\n      ...engineOptions,\n    });\n  }\n\n  public setBundle(bundle: KernelBundle) {\n    // deep clone\n    this.compiledBundle = JSON.parse(JSON.stringify(bundle));\n  }\n\n  public setDispatch(dispatch: [number, number, number]) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.dispatch = dispatch;\n    }\n    return this;\n  }\n\n  public setMaxIteration(maxIteration: number) {\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.maxIteration = maxIteration;\n    }\n    return this;\n  }\n\n  public setBinding(\n    name:\n      | string\n      | Record<\n          string,\n          | number\n          | number[]\n          | Float32Array\n          | Uint8Array\n          | Uint16Array\n          | Uint32Array\n          | Int8Array\n          | Int16Array\n          | Int32Array\n          | Kernel\n        >,\n    data?:\n      | number\n      | number[]\n      | Float32Array\n      | Uint8Array\n      | Uint16Array\n      | Uint32Array\n      | Int8Array\n      | Int16Array\n      | Int32Array\n      | Kernel,\n  ) {\n    if (typeof name === 'string') {\n      const isNumberLikeData =\n        isNumber(data) || isTypedArray(data) || isArray(data);\n      if (this.compiledBundle && this.compiledBundle.context) {\n        // set define, eg. setBinding('MAX_LENGTH', 10)\n        const existedDefine = this.compiledBundle.context.defines.find(\n          (b) => b.name === name,\n        );\n        if (existedDefine) {\n          existedDefine.value = data as number;\n          return this;\n        }\n\n        // set uniform\n        const existedBinding = this.compiledBundle.context.uniforms.find(\n          (b) => b.name === name,\n        );\n        if (existedBinding) {\n          // update uniform or buffer\n          if (isNumberLikeData) {\n            // @ts-ignore\n            existedBinding.data = data;\n            existedBinding.isReferer = false;\n\n            if (existedBinding.storageClass === STORAGE_CLASS.Uniform) {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateUniform(name, data);\n              }\n            } else {\n              if (this.model) {\n                // @ts-ignore\n                this.model.updateBuffer(name, data);\n              }\n            }\n          } else {\n            // update with another kernel\n            existedBinding.isReferer = true;\n            // @ts-ignore\n            existedBinding.data = data as Kernel;\n          }\n        }\n      }\n    } else {\n      Object.keys(name).forEach((key) => {\n        this.setBinding(key, name[key]);\n      });\n    }\n    return this;\n  }\n\n  public async execute(iteration: number = 1) {\n    if (this.dirty) {\n      if (this.compiledBundle.context) {\n        if (iteration > 1) {\n          this.compiledBundle.context.maxIteration = iteration;\n        } else {\n          this.compiledBundle.context.maxIteration++;\n        }\n      }\n      await this.compile();\n      this.dirty = false;\n    }\n\n    this.engine.beginFrame();\n\n    // 首先开启当前 frame 的 compute pass\n    this.engine.clear({});\n\n    if (this.compiledBundle.context) {\n      this.compiledBundle.context.uniforms\n        .filter(({ isReferer }) => isReferer)\n        .forEach(({ data, name }) => {\n          // @ts-ignore\n          this.model.confirmInput((data as Kernel).model, name);\n        });\n    }\n    for (let i = 0; i < iteration; i++) {\n      this.model.run();\n    }\n\n    this.engine.endFrame();\n    return this;\n  }\n\n  /**\n   * read output from GPUBuffer\n   */\n  public async getOutput() {\n    return this.model.readData();\n  }\n\n  private async compile() {\n    await this.initPromise;\n\n    const context = {\n      ...this.compiledBundle.context!,\n    };\n\n    const target = this.engine.supportWebGPU\n      ? this.engine.useWGSL\n        ? Target.WGSL\n        : Target.GLSL450\n      : Target.GLSL100;\n    let shader = this.compiledBundle.shaders[target];\n\n    // this.bindings?.forEach(({ name, data }) => {\n    //   if (name === name.toUpperCase()) {\n    //     const define = context.defines.find((d) => d.name === name);\n    //     if (define) {\n    //       // @ts-ignore\n    //       define.value = data;\n    //     }\n    //   }\n    // });\n\n    // 生成运行时 define\n    context.defines\n      .filter((define) => define.runtime)\n      .forEach((define) => {\n        const valuePlaceHolder = `${DefineValuePlaceholder}${define.name}`;\n        shader = shader.replace(valuePlaceHolder, `${define.value}`);\n      });\n\n    context.shader = shader;\n\n    // 添加 uniform 绑定的数据\n    context.uniforms.forEach((uniform) => {\n      // const binding = this.bindings.find((b) => b.name === uniform.name);\n      // if (binding) {\n      //   // @ts-ignore\n      //   uniform.data = binding.referer || binding.data;\n      //   // @ts-ignore\n      //   uniform.isReferer = !!binding.referer;\n      // }\n\n      // 未指定数据，尝试根据 uniform 类型初始化\n      if (!uniform.data) {\n        if (uniform.storageClass === STORAGE_CLASS.StorageBuffer) {\n          let sizePerElement = 1;\n          if (uniform.type === AST_TOKEN_TYPES.FloatArray) {\n            sizePerElement = 1;\n          } else if (uniform.type === AST_TOKEN_TYPES.Vector4FloatArray) {\n            sizePerElement = 4;\n          }\n          uniform.data = new Float32Array(\n            context.output.length! * sizePerElement,\n          ).fill(0);\n        }\n      }\n    });\n    // } else if (uniform.type === 'image2D') {\n    //   // @ts-ignore\n    //   buffer.data = new Uint8ClampedArray(context.output.length!).fill(0);\n    // }\n\n    this.compiledBundle.context = context;\n    this.model = await this.engine.createComputeModel(\n      this.compiledBundle.context,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}