{"ast":null,"code":"import { Point, Path, Polyline } from '../../geometry';\nimport { NumberExt, FunctionExt } from '../../util';\nexport const ref = {// We do not set `ref` attribute directly on an element.\n  // The attribute itself does not qualify for relative positioning.\n}; // if `refX` is in [0, 1] then `refX` is a fraction of bounding box width\n// if `refX` is < 0 then `refX`'s absolute values is the right coordinate of the bounding box\n// otherwise, `refX` is the left coordinate of the bounding box\n\nexport const refX = {\n  position: positionWrapper('x', 'width', 'origin')\n};\nexport const refY = {\n  position: positionWrapper('y', 'height', 'origin')\n}; // `ref-dx` and `ref-dy` define the offset of the subelement relative to the right and/or bottom\n// coordinate of the reference element.\n\nexport const refDx = {\n  position: positionWrapper('x', 'width', 'corner')\n};\nexport const refDy = {\n  position: positionWrapper('y', 'height', 'corner')\n}; // 'ref-width'/'ref-height' defines the width/height of the subelement relatively to\n// the reference element size\n// val in 0..1         ref-width = 0.75 sets the width to 75% of the ref. el. width\n// val < 0 || val > 1  ref-height = -20 sets the height to the ref. el. height shorter by 20\n\nexport const refWidth = {\n  set: setWrapper('width', 'width')\n};\nexport const refHeight = {\n  set: setWrapper('height', 'height')\n};\nexport const refRx = {\n  set: setWrapper('rx', 'width')\n};\nexport const refRy = {\n  set: setWrapper('ry', 'height')\n};\nexport const refRInscribed = {\n  set: (attrName => {\n    const widthFn = setWrapper(attrName, 'width');\n    const heightFn = setWrapper(attrName, 'height');\n    return function (value, options) {\n      const refBBox = options.refBBox;\n      const fn = refBBox.height > refBBox.width ? widthFn : heightFn;\n      return FunctionExt.call(fn, this, value, options);\n    };\n  })('r')\n};\nexport const refRCircumscribed = {\n  set(val, {\n    refBBox\n  }) {\n    let value = parseFloat(val);\n    const percentage = NumberExt.isPercentage(val);\n\n    if (percentage) {\n      value /= 100;\n    }\n\n    const diagonalLength = Math.sqrt(refBBox.height * refBBox.height + refBBox.width * refBBox.width);\n    let rValue;\n\n    if (Number.isFinite(value)) {\n      if (percentage || value >= 0 && value <= 1) {\n        rValue = value * diagonalLength;\n      } else {\n        rValue = Math.max(value + diagonalLength, 0);\n      }\n    }\n\n    return {\n      r: rValue\n    };\n  }\n\n};\nexport const refCx = {\n  set: setWrapper('cx', 'width')\n};\nexport const refCy = {\n  set: setWrapper('cy', 'height')\n};\nexport const refDResetOffset = {\n  set: dWrapper({\n    resetOffset: true\n  })\n};\nexport const refDKeepOffset = {\n  set: dWrapper({\n    resetOffset: false\n  })\n};\nexport const refPointsResetOffset = {\n  set: pointsWrapper({\n    resetOffset: true\n  })\n};\nexport const refPointsKeepOffset = {\n  set: pointsWrapper({\n    resetOffset: false\n  })\n}; // aliases\n// -------\n\nexport const refR = refRInscribed;\nexport const refD = refDResetOffset;\nexport const refPoints = refPointsResetOffset; // Allows to combine both absolute and relative positioning\n// refX: 50%, refX2: 20\n\nexport const refX2 = refX;\nexport const refY2 = refY;\nexport const refWidth2 = refWidth;\nexport const refHeight2 = refHeight; // utils\n// -----\n\nfunction positionWrapper(axis, dimension, origin) {\n  return (val, {\n    refBBox\n  }) => {\n    if (val == null) {\n      return null;\n    }\n\n    let value = parseFloat(val);\n    const percentage = NumberExt.isPercentage(val);\n\n    if (percentage) {\n      value /= 100;\n    }\n\n    let delta;\n\n    if (Number.isFinite(value)) {\n      const refOrigin = refBBox[origin];\n\n      if (percentage || value > 0 && value < 1) {\n        delta = refOrigin[axis] + refBBox[dimension] * value;\n      } else {\n        delta = refOrigin[axis] + value;\n      }\n    }\n\n    const point = new Point();\n    point[axis] = delta || 0;\n    return point;\n  };\n}\n\nfunction setWrapper(attrName, dimension) {\n  return function (val, {\n    refBBox\n  }) {\n    let value = parseFloat(val);\n    const percentage = NumberExt.isPercentage(val);\n\n    if (percentage) {\n      value /= 100;\n    }\n\n    const attrs = {};\n\n    if (Number.isFinite(value)) {\n      const attrValue = percentage || value >= 0 && value <= 1 ? value * refBBox[dimension] : Math.max(value + refBBox[dimension], 0);\n      attrs[attrName] = attrValue;\n    }\n\n    return attrs;\n  };\n}\n\nfunction shapeWrapper(shapeConstructor, options) {\n  const cacheName = 'x6-shape';\n  const resetOffset = options && options.resetOffset;\n  return function (value, {\n    view,\n    elem,\n    refBBox\n  }) {\n    const $elem = view.$(elem);\n    let cache = $elem.data(cacheName);\n\n    if (!cache || cache.value !== value) {\n      // only recalculate if value has changed\n      const cachedShape = shapeConstructor(value);\n      cache = {\n        value,\n        shape: cachedShape,\n        shapeBBox: cachedShape.bbox()\n      };\n      $elem.data(cacheName, cache);\n    }\n\n    const shape = cache.shape.clone();\n    const shapeBBox = cache.shapeBBox.clone();\n    const shapeOrigin = shapeBBox.getOrigin();\n    const refOrigin = refBBox.getOrigin();\n    shapeBBox.x = refOrigin.x;\n    shapeBBox.y = refOrigin.y;\n    const fitScale = refBBox.getMaxScaleToFit(shapeBBox, refOrigin); // `maxRectScaleToFit` can give Infinity if width or height is 0\n\n    const sx = shapeBBox.width === 0 || refBBox.width === 0 ? 1 : fitScale.sx;\n    const sy = shapeBBox.height === 0 || refBBox.height === 0 ? 1 : fitScale.sy;\n    shape.scale(sx, sy, shapeOrigin);\n\n    if (resetOffset) {\n      shape.translate(-shapeOrigin.x, -shapeOrigin.y);\n    }\n\n    return shape;\n  };\n} // `d` attribute for SVGPaths\n\n\nfunction dWrapper(options) {\n  function pathConstructor(value) {\n    return Path.parse(value);\n  }\n\n  const shape = shapeWrapper(pathConstructor, options);\n  return (value, args) => {\n    const path = shape(value, args);\n    return {\n      d: path.serialize()\n    };\n  };\n} // `points` attribute for SVGPolylines and SVGPolygons\n\n\nfunction pointsWrapper(options) {\n  const shape = shapeWrapper(points => new Polyline(points), options);\n  return (value, args) => {\n    const polyline = shape(value, args);\n    return {\n      points: polyline.serialize()\n    };\n  };\n}","map":{"version":3,"mappings":"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","names":["Point","Path","Polyline","NumberExt","FunctionExt","ref","refX","position","positionWrapper","refY","refDx","refDy","refWidth","set","setWrapper","refHeight","refRx","refRy","refRInscribed","attrName","widthFn","heightFn","value","options","refBBox","fn","height","width","call","refRCircumscribed","val","parseFloat","percentage","isPercentage","diagonalLength","Math","sqrt","rValue","Number","isFinite","max","r","refCx","refCy","refDResetOffset","dWrapper","resetOffset","refDKeepOffset","refPointsResetOffset","pointsWrapper","refPointsKeepOffset","refR","refD","refPoints","refX2","refY2","refWidth2","refHeight2","axis","dimension","origin","delta","refOrigin","point","attrs","attrValue","shapeWrapper","shapeConstructor","cacheName","view","elem","$elem","$","cache","data","cachedShape","shape","shapeBBox","bbox","clone","shapeOrigin","getOrigin","x","y","fitScale","getMaxScaleToFit","sx","sy","scale","translate","pathConstructor","parse","args","path","d","serialize","points","polyline"],"sourceRoot":"","sources":["../../../src/registry/attr/ref.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}