{"ast":null,"code":"import { Angle, Point, Line } from '../../geometry';\n\nfunction rollup(points, merge) {\n  if (merge != null && merge !== false) {\n    const amount = typeof merge === 'boolean' ? 0 : merge;\n\n    if (amount > 0) {\n      const center1 = Point.create(points[1]).move(points[2], amount);\n      const center2 = Point.create(points[1]).move(points[0], amount);\n      return [center1.toJSON(), ...points, center2.toJSON()];\n    }\n\n    {\n      const center = points[1];\n      return [Object.assign({}, center), ...points, Object.assign({}, center)];\n    }\n  }\n\n  return points;\n}\n\nexport const loop = function (vertices, options, edgeView) {\n  const width = options.width || 50;\n  const height = options.height || 80;\n  const halfHeight = height / 2;\n  const angle = options.angle || 'auto';\n  const sourceAnchor = edgeView.sourceAnchor;\n  const targetAnchor = edgeView.targetAnchor;\n  const sourceBBox = edgeView.sourceBBox;\n  const targetBBox = edgeView.targetBBox;\n\n  if (sourceAnchor.equals(targetAnchor)) {\n    const getVertices = angle => {\n      const rad = Angle.toRad(angle);\n      const sin = Math.sin(rad);\n      const cos = Math.cos(rad);\n      const center = new Point(sourceAnchor.x + cos * width, sourceAnchor.y + sin * width);\n      const ref = new Point(center.x - cos * halfHeight, center.y - sin * halfHeight);\n      const p1 = ref.clone().rotate(-90, center);\n      const p2 = ref.clone().rotate(90, center);\n      return [p1.toJSON(), center.toJSON(), p2.toJSON()];\n    };\n\n    const validate = end => {\n      const start = sourceAnchor.clone().move(end, -1);\n      const line = new Line(start, end);\n      return !sourceBBox.containsPoint(end) && !sourceBBox.intersectsWithLine(line);\n    };\n\n    const angles = [0, 90, 180, 270, 45, 135, 225, 315];\n\n    if (typeof angle === 'number') {\n      return rollup(getVertices(angle), options.merge);\n    }\n\n    const center = sourceBBox.getCenter();\n\n    if (center.equals(sourceAnchor)) {\n      return rollup(getVertices(0), options.merge);\n    }\n\n    const deg = center.angleBetween(sourceAnchor, center.clone().translate(1, 0));\n    let ret = getVertices(deg);\n\n    if (validate(ret[1])) {\n      return rollup(ret, options.merge);\n    } // return the best vertices\n\n\n    for (let i = 1, l = angles.length; i < l; i += 1) {\n      ret = getVertices(deg + angles[i]);\n\n      if (validate(ret[1])) {\n        return rollup(ret, options.merge);\n      }\n    }\n\n    return rollup(ret, options.merge);\n  }\n\n  {\n    const line = new Line(sourceAnchor, targetAnchor);\n    let parallel = line.parallel(-width);\n    let center = parallel.getCenter();\n    let p1 = parallel.start.clone().move(parallel.end, halfHeight);\n    let p2 = parallel.end.clone().move(parallel.start, halfHeight);\n    const ref = line.parallel(-1);\n    const line1 = new Line(ref.start, center);\n    const line2 = new Line(ref.end, center);\n\n    if (sourceBBox.containsPoint(center) || targetBBox.containsPoint(center) || sourceBBox.intersectsWithLine(line1) || sourceBBox.intersectsWithLine(line2) || targetBBox.intersectsWithLine(line1) || targetBBox.intersectsWithLine(line2)) {\n      parallel = line.parallel(width);\n      center = parallel.getCenter();\n      p1 = parallel.start.clone().move(parallel.end, halfHeight);\n      p2 = parallel.end.clone().move(parallel.start, halfHeight);\n    }\n\n    if (options.merge) {\n      const line = new Line(sourceAnchor, targetAnchor);\n      const normal = new Line(center, line.center).setLength(Number.MAX_SAFE_INTEGER);\n      const intersects1 = sourceBBox.intersectsWithLine(normal);\n      const intersects2 = targetBBox.intersectsWithLine(normal);\n      const intersects = intersects1 ? Array.isArray(intersects1) ? intersects1 : [intersects1] : [];\n\n      if (intersects2) {\n        if (Array.isArray(intersects2)) {\n          intersects.push(...intersects2);\n        } else {\n          intersects.push(intersects2);\n        }\n      }\n\n      const anchor = line.center.closest(intersects);\n\n      if (anchor) {\n        edgeView.sourceAnchor = anchor.clone();\n        edgeView.targetAnchor = anchor.clone();\n      } else {\n        edgeView.sourceAnchor = line.center.clone();\n        edgeView.targetAnchor = line.center.clone();\n      }\n    }\n\n    return rollup([p1.toJSON(), center.toJSON(), p2.toJSON()], options.merge);\n  }\n};","map":{"version":3,"mappings":"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","names":["Angle","Point","Line","rollup","points","merge","amount","center1","create","move","center2","toJSON","center","Object","loop","vertices","options","edgeView","width","height","halfHeight","angle","sourceAnchor","targetAnchor","sourceBBox","targetBBox","equals","getVertices","rad","toRad","sin","Math","cos","x","y","ref","p1","clone","rotate","p2","validate","end","start","line","containsPoint","intersectsWithLine","angles","getCenter","deg","angleBetween","translate","ret","i","l","length","parallel","line1","line2","normal","setLength","Number","MAX_SAFE_INTEGER","intersects1","intersects2","intersects","Array","isArray","push","anchor","closest"],"sourceRoot":"","sources":["../../../src/registry/router/loop.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}