{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\n\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\n\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\n\nvar _util = require(\"./util\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\n\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\n\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","detectAllUndirectedCycle","detectAllDirectedCycle","detectAllCycles","default","_dfs","_interopRequireDefault","require","_connectedComponent","_interopRequireWildcard","_util","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","detectDirectedCycle","graphData","cycle","_a","nodes","dfsParentMap","unvisitedSet","visitingSet","visitedSet","forEach","node","id","callbacks","enter","currentNode","current","previousNode","previous","currentCycleNode","previousCycleNode","leave","allowTraversal","nextNode","next","keys","length","firsetUnVisitedKey","nodeIds","include","_b","allCycles","components","_i","components_1","component","root","rootId","stack","parent_1","used","Set","curNode","pop","curNodeId","neighbors","getNeighbors","edges","_loop_1","i","_c","neighborId","neighbor","find","push","cycleValid","cyclePath","p","size","findIndex","indexOf","index","add","path","blocked","B","idx2Node","node2Idx","unblock","thisNode","delete","n","clear","circuit","start","adjList","closed","nodeId","_loop_2","getMinComponentAdj","minCompIdx","minIdx","Infinity","comp","j","nodeIdx_1","filter","map","c","nodeIdx","subgraphNodes","sccs","detectStrongConnectComponents","scc","startNode","directed","_default"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/algorithm/lib/detect-cycle.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectAllUndirectedCycle = exports.detectAllDirectedCycle = exports.detectAllCycles = exports.default = void 0;\n\nvar _dfs = _interopRequireDefault(require(\"./dfs\"));\n\nvar _connectedComponent = _interopRequireWildcard(require(\"./connected-component\"));\n\nvar _util = require(\"./util\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar detectDirectedCycle = function detectDirectedCycle(graphData) {\n  var cycle = null;\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a;\n  var dfsParentMap = {}; // 所有没有被访问的节点集合\n\n  var unvisitedSet = {}; // 正在被访问的节点集合\n\n  var visitingSet = {}; // 所有已经被访问过的节点集合\n\n  var visitedSet = {}; // 初始化 unvisitedSet\n\n  nodes.forEach(function (node) {\n    unvisitedSet[node.id] = node;\n  });\n  var callbacks = {\n    enter: function enter(_a) {\n      var currentNode = _a.current,\n          previousNode = _a.previous;\n\n      if (visitingSet[currentNode]) {\n        // 如果当前节点正在访问中，则说明检测到环路了\n        cycle = {};\n        var currentCycleNode = currentNode;\n        var previousCycleNode = previousNode;\n\n        while (previousCycleNode !== currentNode) {\n          cycle[currentCycleNode] = previousCycleNode;\n          currentCycleNode = previousCycleNode;\n          previousCycleNode = dfsParentMap[previousCycleNode];\n        }\n\n        cycle[currentCycleNode] = previousCycleNode;\n      } else {\n        // 如果不存在正在访问集合中，则将其放入正在访问集合，并从未访问集合中删除\n        visitingSet[currentNode] = currentNode;\n        delete unvisitedSet[currentNode]; // 更新 DSF parents 列表\n\n        dfsParentMap[currentNode] = previousNode;\n      }\n    },\n    leave: function leave(_a) {\n      var currentNode = _a.current; // 如果所有的节点的子节点都已经访问过了，则从正在访问集合中删除掉，并将其移入到已访问集合中，\n      // 同时也意味着当前节点的所有邻居节点都被访问过了\n\n      visitedSet[currentNode] = currentNode;\n      delete visitingSet[currentNode];\n    },\n    allowTraversal: function allowTraversal(_a) {\n      var nextNode = _a.next; // 如果检测到环路则需要终止所有进一步的遍历，否则会导致无限循环遍历\n\n      if (cycle) {\n        return false;\n      } // 仅允许遍历没有访问的节点，visitedSet 中的都已经访问过了\n\n\n      return !visitedSet[nextNode];\n    }\n  }; // 开始遍历节点\n\n  while (Object.keys(unvisitedSet).length) {\n    // 从第一个节点开始进行 DFS 遍历\n    var firsetUnVisitedKey = Object.keys(unvisitedSet)[0];\n    (0, _dfs.default)(graphData, firsetUnVisitedKey, callbacks);\n  }\n\n  return cycle;\n};\n/**\n * 检测无向图中的所有Base cycles\n * refer: https://www.codeproject.com/Articles/1158232/Enumerating-All-Cycles-in-an-Undirected-Graph\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回一组base cycles\n */\n\n\nvar detectAllUndirectedCycle = function detectAllUndirectedCycle(graphData, nodeIds, include) {\n  var _a, _b;\n\n  if (include === void 0) {\n    include = true;\n  }\n\n  var allCycles = [];\n  var components = (0, _connectedComponent.default)(graphData, false); // loop through all connected components\n\n  for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n    var component = components_1[_i];\n    if (!component.length) continue;\n    var root = component[0];\n    var rootId = root.id;\n    var stack = [root];\n    var parent_1 = (_a = {}, _a[rootId] = root, _a);\n    var used = (_b = {}, _b[rootId] = new Set(), _b); // walk a spanning tree to find cycles\n\n    while (stack.length > 0) {\n      var curNode = stack.pop();\n      var curNodeId = curNode.id;\n      var neighbors = (0, _util.getNeighbors)(curNodeId, graphData.edges);\n\n      var _loop_1 = function _loop_1(i) {\n        var _c;\n\n        var neighborId = neighbors[i];\n        var neighbor = graphData.nodes.find(function (node) {\n          return node.id === neighborId;\n        }); // const neighborId = neighbor.get('id');\n\n        if (neighborId === curNodeId) {\n          // 自环\n          allCycles.push((_c = {}, _c[neighborId] = curNode, _c));\n        } else if (!(neighborId in used)) {\n          // visit a new node\n          parent_1[neighborId] = curNode;\n          stack.push(neighbor);\n          used[neighborId] = new Set([curNode]);\n        } else if (!used[curNodeId].has(neighbor)) {\n          // a cycle found\n          var cycleValid = true;\n          var cyclePath = [neighbor, curNode];\n          var p = parent_1[curNodeId];\n\n          while (used[neighborId].size && !used[neighborId].has(p)) {\n            cyclePath.push(p);\n            if (p === parent_1[p.id]) break;else p = parent_1[p.id];\n          }\n\n          cyclePath.push(p);\n\n          if (nodeIds && include) {\n            // 如果有指定包含的节点\n            cycleValid = false;\n\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = true;\n            }\n          } else if (nodeIds && !include) {\n            // 如果有指定不包含的节点\n            if (cyclePath.findIndex(function (node) {\n              return nodeIds.indexOf(node.id) > -1;\n            }) > -1) {\n              cycleValid = false;\n            }\n          } // 把 node list 形式转换为 cycle 的格式\n\n\n          if (cycleValid) {\n            var cycle = {};\n\n            for (var index = 1; index < cyclePath.length; index += 1) {\n              cycle[cyclePath[index - 1].id] = cyclePath[index];\n            }\n\n            if (cyclePath.length) {\n              cycle[cyclePath[cyclePath.length - 1].id] = cyclePath[0];\n            }\n\n            allCycles.push(cycle);\n          }\n\n          used[neighborId].add(curNode);\n        }\n      };\n\n      for (var i = 0; i < neighbors.length; i += 1) {\n        _loop_1(i);\n      }\n    }\n  }\n\n  return allCycles;\n};\n/**\n * Johnson's algorithm, 时间复杂度 O((V + E)(C + 1))$ and space bounded by O(V + E)\n * refer: https://www.cs.tufts.edu/comp/150GA/homeworks/hw1/Johnson%2075.PDF\n * refer: https://networkx.github.io/documentation/stable/_modules/networkx/algorithms/cycles.html#simple_cycles\n * @param graph\n * @param nodeIds 节点 ID 的数组\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: INode}] 返回所有的 simple cycles\n */\n\n\nexports.detectAllUndirectedCycle = detectAllUndirectedCycle;\n\nvar detectAllDirectedCycle = function detectAllDirectedCycle(graphData, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  var path = []; // stack of nodes in current path\n\n  var blocked = new Set();\n  var B = []; // remember portions of the graph that yield no elementary circuit\n\n  var allCycles = [];\n  var idx2Node = {};\n  var node2Idx = {}; // 辅助函数： unblock all blocked nodes\n\n  var unblock = function unblock(thisNode) {\n    var stack = [thisNode];\n\n    while (stack.length > 0) {\n      var node = stack.pop();\n\n      if (blocked.has(node)) {\n        blocked.delete(node);\n        B[node.id].forEach(function (n) {\n          stack.push(n);\n        });\n        B[node.id].clear();\n      }\n    }\n  };\n\n  var circuit = function circuit(node, start, adjList) {\n    var closed = false; // whether a path is closed\n\n    if (nodeIds && include === false && nodeIds.indexOf(node.id) > -1) return closed;\n    path.push(node);\n    blocked.add(node);\n    var neighbors = adjList[node.id];\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = idx2Node[neighbors[i]];\n\n      if (neighbor === start) {\n        var cycle = {};\n\n        for (var index = 1; index < path.length; index += 1) {\n          cycle[path[index - 1].id] = path[index];\n        }\n\n        if (path.length) {\n          cycle[path[path.length - 1].id] = path[0];\n        }\n\n        allCycles.push(cycle);\n        closed = true;\n      } else if (!blocked.has(neighbor)) {\n        if (circuit(neighbor, start, adjList)) {\n          closed = true;\n        }\n      }\n    }\n\n    if (closed) {\n      unblock(node);\n    } else {\n      for (var i = 0; i < neighbors.length; i += 1) {\n        var neighbor = idx2Node[neighbors[i]];\n\n        if (!B[neighbor.id].has(node)) {\n          B[neighbor.id].add(node);\n        }\n      }\n    }\n\n    path.pop();\n    return closed;\n  };\n\n  var _a = graphData.nodes,\n      nodes = _a === void 0 ? [] : _a; // Johnson's algorithm 要求给节点赋顺序，先按节点在数组中的顺序\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    var nodeId = node.id;\n    node2Idx[nodeId] = i;\n    idx2Node[i] = node;\n  } // 如果有指定包含的节点，则把指定节点排序在前，以便提早结束搜索\n\n\n  if (nodeIds && include) {\n    var _loop_2 = function _loop_2(i) {\n      var nodeId = nodeIds[i];\n      node2Idx[nodes[i].id] = node2Idx[nodeId];\n      node2Idx[nodeId] = 0;\n      idx2Node[0] = nodes.find(function (node) {\n        return node.id === nodeId;\n      });\n      idx2Node[node2Idx[nodes[i].id]] = nodes[i];\n    };\n\n    for (var i = 0; i < nodeIds.length; i++) {\n      _loop_2(i);\n    }\n  } // 返回 节点顺序 >= nodeOrder 的强连通分量的adjList\n\n\n  var getMinComponentAdj = function getMinComponentAdj(components) {\n    var _a;\n\n    var minCompIdx;\n    var minIdx = Infinity; // Find least component and the lowest node\n\n    for (var i = 0; i < components.length; i += 1) {\n      var comp = components[i];\n\n      for (var j = 0; j < comp.length; j++) {\n        var nodeIdx_1 = node2Idx[comp[j].id];\n\n        if (nodeIdx_1 < minIdx) {\n          minIdx = nodeIdx_1;\n          minCompIdx = i;\n        }\n      }\n    }\n\n    var component = components[minCompIdx];\n    var adjList = [];\n\n    for (var i = 0; i < component.length; i += 1) {\n      var node = component[i];\n      adjList[node.id] = [];\n\n      for (var _i = 0, _b = (0, _util.getNeighbors)(node.id, graphData.edges, 'target').filter(function (n) {\n        return component.map(function (c) {\n          return c.id;\n        }).indexOf(n) > -1;\n      }); _i < _b.length; _i++) {\n        var neighbor = _b[_i]; // 对自环情况 (点连向自身) 特殊处理：记录自环，但不加入adjList\n\n        if (neighbor === node.id && !(include === false && nodeIds.indexOf(node.id) > -1)) {\n          allCycles.push((_a = {}, _a[node.id] = node, _a));\n        } else {\n          adjList[node.id].push(node2Idx[neighbor]);\n        }\n      }\n    }\n\n    return {\n      component: component,\n      adjList: adjList,\n      minIdx: minIdx\n    };\n  };\n\n  var nodeIdx = 0;\n\n  while (nodeIdx < nodes.length) {\n    var subgraphNodes = nodes.filter(function (n) {\n      return node2Idx[n.id] >= nodeIdx;\n    });\n    var sccs = (0, _connectedComponent.detectStrongConnectComponents)({\n      nodes: subgraphNodes,\n      edges: graphData.edges\n    }).filter(function (component) {\n      return component.length > 1;\n    });\n    if (sccs.length === 0) break;\n    var scc = getMinComponentAdj(sccs);\n    var minIdx = scc.minIdx,\n        adjList = scc.adjList,\n        component = scc.component;\n\n    if (component.length > 1) {\n      component.forEach(function (node) {\n        B[node.id] = new Set();\n      });\n      var startNode = idx2Node[minIdx]; // startNode 不在指定要包含的节点中，提前结束搜索\n\n      if (nodeIds && include && nodeIds.indexOf(startNode.id) === -1) return allCycles;\n      circuit(startNode, startNode, adjList);\n      nodeIdx = minIdx + 1;\n    } else {\n      break;\n    }\n  }\n\n  return allCycles;\n};\n/**\n * 查找图中所有满足要求的圈\n * @param graph\n * @param directed 是否为有向图\n * @param nodeIds 节点 ID 的数组，若不指定，则返回图中所有的圈\n * @param include 包含或排除指定的节点\n * @return [{[key: string]: Node}] 包含所有环的数组，每个环用一个Object表示，其中key为节点id，value为该节点在环中指向的下一个节点\n */\n\n\nexports.detectAllDirectedCycle = detectAllDirectedCycle;\n\nvar detectAllCycles = function detectAllCycles(graphData, directed, nodeIds, include) {\n  if (include === void 0) {\n    include = true;\n  }\n\n  if (directed) return detectAllDirectedCycle(graphData, nodeIds, include);\n  return detectAllUndirectedCycle(graphData, nodeIds, include);\n};\n\nexports.detectAllCycles = detectAllCycles;\nvar _default = detectDirectedCycle;\nexports.default = _default;"],"mappings":"AAAA;;AAEA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;EAAE;;EAA2B,OAAOD,OAAO,GAAG,cAAc,OAAOE,MAArB,IAA+B,YAAY,OAAOA,MAAM,CAACC,QAAzD,GAAoE,UAAUF,GAAV,EAAe;IAAE,OAAO,OAAOA,GAAd;EAAoB,CAAzG,GAA4G,UAAUA,GAAV,EAAe;IAAE,OAAOA,GAAG,IAAI,cAAc,OAAOC,MAA5B,IAAsCD,GAAG,CAACG,WAAJ,KAAoBF,MAA1D,IAAoED,GAAG,KAAKC,MAAM,CAACG,SAAnF,GAA+F,QAA/F,GAA0G,OAAOJ,GAAxH;EAA8H,CAArQ,EAAuQD,OAAO,CAACC,GAAD,CAArR;AAA6R;;AAEhVK,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,sBAAR,GAAiCH,OAAO,CAACI,eAAR,GAA0BJ,OAAO,CAACK,OAAR,GAAkB,KAAK,CAArH;;AAEA,IAAIC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAjC;;AAEA,IAAIC,mBAAmB,GAAGC,uBAAuB,CAACF,OAAO,CAAC,uBAAD,CAAR,CAAjD;;AAEA,IAAIG,KAAK,GAAGH,OAAO,CAAC,QAAD,CAAnB;;AAEA,SAASI,wBAAT,CAAkCC,WAAlC,EAA+C;EAAE,IAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;EAAa,IAAIC,iBAAiB,GAAG,IAAID,OAAJ,EAAxB;EAAuC,IAAIE,gBAAgB,GAAG,IAAIF,OAAJ,EAAvB;EAAsC,OAAO,CAACF,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,WAAlC,EAA+C;IAAE,OAAOA,WAAW,GAAGG,gBAAH,GAAsBD,iBAAxC;EAA4D,CAAzI,EAA2IF,WAA3I,CAAP;AAAiK;;AAE/U,SAASH,uBAAT,CAAiCjB,GAAjC,EAAsCoB,WAAtC,EAAmD;EAAE,IAAI,CAACA,WAAD,IAAgBpB,GAAhB,IAAuBA,GAAG,CAACwB,UAA/B,EAA2C;IAAE,OAAOxB,GAAP;EAAa;;EAAC,IAAIA,GAAG,KAAK,IAAR,IAAgBD,OAAO,CAACC,GAAD,CAAP,KAAiB,QAAjB,IAA6B,OAAOA,GAAP,KAAe,UAAhE,EAA4E;IAAE,OAAO;MAAEY,OAAO,EAAEZ;IAAX,CAAP;EAA0B;;EAAC,IAAIyB,KAAK,GAAGN,wBAAwB,CAACC,WAAD,CAApC;;EAAmD,IAAIK,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAU1B,GAAV,CAAb,EAA6B;IAAE,OAAOyB,KAAK,CAACE,GAAN,CAAU3B,GAAV,CAAP;EAAwB;;EAAC,IAAI4B,MAAM,GAAG,EAAb;EAAiB,IAAIC,qBAAqB,GAAGxB,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACyB,wBAA5D;;EAAsF,KAAK,IAAIC,GAAT,IAAgB/B,GAAhB,EAAqB;IAAE,IAAI+B,GAAG,KAAK,SAAR,IAAqB1B,MAAM,CAACD,SAAP,CAAiB4B,cAAjB,CAAgCC,IAAhC,CAAqCjC,GAArC,EAA0C+B,GAA1C,CAAzB,EAAyE;MAAE,IAAIG,IAAI,GAAGL,qBAAqB,GAAGxB,MAAM,CAACyB,wBAAP,CAAgC9B,GAAhC,EAAqC+B,GAArC,CAAH,GAA+C,IAA/E;;MAAqF,IAAIG,IAAI,KAAKA,IAAI,CAACP,GAAL,IAAYO,IAAI,CAACC,GAAtB,CAAR,EAAoC;QAAE9B,MAAM,CAACC,cAAP,CAAsBsB,MAAtB,EAA8BG,GAA9B,EAAmCG,IAAnC;MAA2C,CAAjF,MAAuF;QAAEN,MAAM,CAACG,GAAD,CAAN,GAAc/B,GAAG,CAAC+B,GAAD,CAAjB;MAAyB;IAAE;EAAE;;EAACH,MAAM,CAAChB,OAAP,GAAiBZ,GAAjB;;EAAsB,IAAIyB,KAAJ,EAAW;IAAEA,KAAK,CAACU,GAAN,CAAUnC,GAAV,EAAe4B,MAAf;EAAyB;;EAAC,OAAOA,MAAP;AAAgB;;AAEtyB,SAASd,sBAAT,CAAgCd,GAAhC,EAAqC;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACwB,UAAX,GAAwBxB,GAAxB,GAA8B;IAAEY,OAAO,EAAEZ;EAAX,CAArC;AAAwD;;AAE/F,IAAIoC,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,SAA7B,EAAwC;EAChE,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,EAAE,GAAGF,SAAS,CAACG,KAAnB;EAAA,IACIA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADjC;EAEA,IAAIE,YAAY,GAAG,EAAnB,CAJgE,CAIzC;;EAEvB,IAAIC,YAAY,GAAG,EAAnB,CANgE,CAMzC;;EAEvB,IAAIC,WAAW,GAAG,EAAlB,CARgE,CAQ1C;;EAEtB,IAAIC,UAAU,GAAG,EAAjB,CAVgE,CAU3C;;EAErBJ,KAAK,CAACK,OAAN,CAAc,UAAUC,IAAV,EAAgB;IAC5BJ,YAAY,CAACI,IAAI,CAACC,EAAN,CAAZ,GAAwBD,IAAxB;EACD,CAFD;EAGA,IAAIE,SAAS,GAAG;IACdC,KAAK,EAAE,SAASA,KAAT,CAAeV,EAAf,EAAmB;MACxB,IAAIW,WAAW,GAAGX,EAAE,CAACY,OAArB;MAAA,IACIC,YAAY,GAAGb,EAAE,CAACc,QADtB;;MAGA,IAAIV,WAAW,CAACO,WAAD,CAAf,EAA8B;QAC5B;QACAZ,KAAK,GAAG,EAAR;QACA,IAAIgB,gBAAgB,GAAGJ,WAAvB;QACA,IAAIK,iBAAiB,GAAGH,YAAxB;;QAEA,OAAOG,iBAAiB,KAAKL,WAA7B,EAA0C;UACxCZ,KAAK,CAACgB,gBAAD,CAAL,GAA0BC,iBAA1B;UACAD,gBAAgB,GAAGC,iBAAnB;UACAA,iBAAiB,GAAGd,YAAY,CAACc,iBAAD,CAAhC;QACD;;QAEDjB,KAAK,CAACgB,gBAAD,CAAL,GAA0BC,iBAA1B;MACD,CAbD,MAaO;QACL;QACAZ,WAAW,CAACO,WAAD,CAAX,GAA2BA,WAA3B;QACA,OAAOR,YAAY,CAACQ,WAAD,CAAnB,CAHK,CAG6B;;QAElCT,YAAY,CAACS,WAAD,CAAZ,GAA4BE,YAA5B;MACD;IACF,CAzBa;IA0BdI,KAAK,EAAE,SAASA,KAAT,CAAejB,EAAf,EAAmB;MACxB,IAAIW,WAAW,GAAGX,EAAE,CAACY,OAArB,CADwB,CACM;MAC9B;;MAEAP,UAAU,CAACM,WAAD,CAAV,GAA0BA,WAA1B;MACA,OAAOP,WAAW,CAACO,WAAD,CAAlB;IACD,CAhCa;IAiCdO,cAAc,EAAE,SAASA,cAAT,CAAwBlB,EAAxB,EAA4B;MAC1C,IAAImB,QAAQ,GAAGnB,EAAE,CAACoB,IAAlB,CAD0C,CAClB;;MAExB,IAAIrB,KAAJ,EAAW;QACT,OAAO,KAAP;MACD,CALyC,CAKxC;;;MAGF,OAAO,CAACM,UAAU,CAACc,QAAD,CAAlB;IACD;EA1Ca,CAAhB,CAfgE,CA0D7D;;EAEH,OAAOrD,MAAM,CAACuD,IAAP,CAAYlB,YAAZ,EAA0BmB,MAAjC,EAAyC;IACvC;IACA,IAAIC,kBAAkB,GAAGzD,MAAM,CAACuD,IAAP,CAAYlB,YAAZ,EAA0B,CAA1B,CAAzB;IACA,CAAC,GAAG7B,IAAI,CAACD,OAAT,EAAkByB,SAAlB,EAA6ByB,kBAA7B,EAAiDd,SAAjD;EACD;;EAED,OAAOV,KAAP;AACD,CAnED;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI7B,wBAAwB,GAAG,SAASA,wBAAT,CAAkC4B,SAAlC,EAA6C0B,OAA7C,EAAsDC,OAAtD,EAA+D;EAC5F,IAAIzB,EAAJ,EAAQ0B,EAAR;;EAEA,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,IAAV;EACD;;EAED,IAAIE,SAAS,GAAG,EAAhB;EACA,IAAIC,UAAU,GAAG,CAAC,GAAGnD,mBAAmB,CAACJ,OAAxB,EAAiCyB,SAAjC,EAA4C,KAA5C,CAAjB,CAR4F,CAQvB;;EAErE,KAAK,IAAI+B,EAAE,GAAG,CAAT,EAAYC,YAAY,GAAGF,UAAhC,EAA4CC,EAAE,GAAGC,YAAY,CAACR,MAA9D,EAAsEO,EAAE,EAAxE,EAA4E;IAC1E,IAAIE,SAAS,GAAGD,YAAY,CAACD,EAAD,CAA5B;IACA,IAAI,CAACE,SAAS,CAACT,MAAf,EAAuB;IACvB,IAAIU,IAAI,GAAGD,SAAS,CAAC,CAAD,CAApB;IACA,IAAIE,MAAM,GAAGD,IAAI,CAACxB,EAAlB;IACA,IAAI0B,KAAK,GAAG,CAACF,IAAD,CAAZ;IACA,IAAIG,QAAQ,IAAInC,EAAE,GAAG,EAAL,EAASA,EAAE,CAACiC,MAAD,CAAF,GAAaD,IAAtB,EAA4BhC,EAAhC,CAAZ;IACA,IAAIoC,IAAI,IAAIV,EAAE,GAAG,EAAL,EAASA,EAAE,CAACO,MAAD,CAAF,GAAa,IAAII,GAAJ,EAAtB,EAAiCX,EAArC,CAAR,CAP0E,CAOxB;;IAElD,OAAOQ,KAAK,CAACZ,MAAN,GAAe,CAAtB,EAAyB;MACvB,IAAIgB,OAAO,GAAGJ,KAAK,CAACK,GAAN,EAAd;MACA,IAAIC,SAAS,GAAGF,OAAO,CAAC9B,EAAxB;MACA,IAAIiC,SAAS,GAAG,CAAC,GAAG9D,KAAK,CAAC+D,YAAV,EAAwBF,SAAxB,EAAmC1C,SAAS,CAAC6C,KAA7C,CAAhB;;MAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;QAChC,IAAIC,EAAJ;;QAEA,IAAIC,UAAU,GAAGN,SAAS,CAACI,CAAD,CAA1B;QACA,IAAIG,QAAQ,GAAGlD,SAAS,CAACG,KAAV,CAAgBgD,IAAhB,CAAqB,UAAU1C,IAAV,EAAgB;UAClD,OAAOA,IAAI,CAACC,EAAL,KAAYuC,UAAnB;QACD,CAFc,CAAf,CAJgC,CAM5B;;QAEJ,IAAIA,UAAU,KAAKP,SAAnB,EAA8B;UAC5B;UACAb,SAAS,CAACuB,IAAV,EAAgBJ,EAAE,GAAG,EAAL,EAASA,EAAE,CAACC,UAAD,CAAF,GAAiBT,OAA1B,EAAmCQ,EAAnD;QACD,CAHD,MAGO,IAAI,EAAEC,UAAU,IAAIX,IAAhB,CAAJ,EAA2B;UAChC;UACAD,QAAQ,CAACY,UAAD,CAAR,GAAuBT,OAAvB;UACAJ,KAAK,CAACgB,IAAN,CAAWF,QAAX;UACAZ,IAAI,CAACW,UAAD,CAAJ,GAAmB,IAAIV,GAAJ,CAAQ,CAACC,OAAD,CAAR,CAAnB;QACD,CALM,MAKA,IAAI,CAACF,IAAI,CAACI,SAAD,CAAJ,CAAgBrD,GAAhB,CAAoB6D,QAApB,CAAL,EAAoC;UACzC;UACA,IAAIG,UAAU,GAAG,IAAjB;UACA,IAAIC,SAAS,GAAG,CAACJ,QAAD,EAAWV,OAAX,CAAhB;UACA,IAAIe,CAAC,GAAGlB,QAAQ,CAACK,SAAD,CAAhB;;UAEA,OAAOJ,IAAI,CAACW,UAAD,CAAJ,CAAiBO,IAAjB,IAAyB,CAAClB,IAAI,CAACW,UAAD,CAAJ,CAAiB5D,GAAjB,CAAqBkE,CAArB,CAAjC,EAA0D;YACxDD,SAAS,CAACF,IAAV,CAAeG,CAAf;YACA,IAAIA,CAAC,KAAKlB,QAAQ,CAACkB,CAAC,CAAC7C,EAAH,CAAlB,EAA0B,MAA1B,KAAqC6C,CAAC,GAAGlB,QAAQ,CAACkB,CAAC,CAAC7C,EAAH,CAAZ;UACtC;;UAED4C,SAAS,CAACF,IAAV,CAAeG,CAAf;;UAEA,IAAI7B,OAAO,IAAIC,OAAf,EAAwB;YACtB;YACA0B,UAAU,GAAG,KAAb;;YAEA,IAAIC,SAAS,CAACG,SAAV,CAAoB,UAAUhD,IAAV,EAAgB;cACtC,OAAOiB,OAAO,CAACgC,OAAR,CAAgBjD,IAAI,CAACC,EAArB,IAA2B,CAAC,CAAnC;YACD,CAFG,IAEC,CAAC,CAFN,EAES;cACP2C,UAAU,GAAG,IAAb;YACD;UACF,CATD,MASO,IAAI3B,OAAO,IAAI,CAACC,OAAhB,EAAyB;YAC9B;YACA,IAAI2B,SAAS,CAACG,SAAV,CAAoB,UAAUhD,IAAV,EAAgB;cACtC,OAAOiB,OAAO,CAACgC,OAAR,CAAgBjD,IAAI,CAACC,EAArB,IAA2B,CAAC,CAAnC;YACD,CAFG,IAEC,CAAC,CAFN,EAES;cACP2C,UAAU,GAAG,KAAb;YACD;UACF,CA7BwC,CA6BvC;;;UAGF,IAAIA,UAAJ,EAAgB;YACd,IAAIpD,KAAK,GAAG,EAAZ;;YAEA,KAAK,IAAI0D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,SAAS,CAAC9B,MAAtC,EAA8CmC,KAAK,IAAI,CAAvD,EAA0D;cACxD1D,KAAK,CAACqD,SAAS,CAACK,KAAK,GAAG,CAAT,CAAT,CAAqBjD,EAAtB,CAAL,GAAiC4C,SAAS,CAACK,KAAD,CAA1C;YACD;;YAED,IAAIL,SAAS,CAAC9B,MAAd,EAAsB;cACpBvB,KAAK,CAACqD,SAAS,CAACA,SAAS,CAAC9B,MAAV,GAAmB,CAApB,CAAT,CAAgCd,EAAjC,CAAL,GAA4C4C,SAAS,CAAC,CAAD,CAArD;YACD;;YAEDzB,SAAS,CAACuB,IAAV,CAAenD,KAAf;UACD;;UAEDqC,IAAI,CAACW,UAAD,CAAJ,CAAiBW,GAAjB,CAAqBpB,OAArB;QACD;MACF,CAhED;;MAkEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACnB,MAA9B,EAAsCuB,CAAC,IAAI,CAA3C,EAA8C;QAC5CD,OAAO,CAACC,CAAD,CAAP;MACD;IACF;EACF;;EAED,OAAOlB,SAAP;AACD,CAjGD;AAkGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA3D,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;;AAEA,IAAIC,sBAAsB,GAAG,SAASA,sBAAT,CAAgC2B,SAAhC,EAA2C0B,OAA3C,EAAoDC,OAApD,EAA6D;EACxF,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,IAAV;EACD;;EAED,IAAIkC,IAAI,GAAG,EAAX,CALwF,CAKzE;;EAEf,IAAIC,OAAO,GAAG,IAAIvB,GAAJ,EAAd;EACA,IAAIwB,CAAC,GAAG,EAAR,CARwF,CAQ5E;;EAEZ,IAAIlC,SAAS,GAAG,EAAhB;EACA,IAAImC,QAAQ,GAAG,EAAf;EACA,IAAIC,QAAQ,GAAG,EAAf,CAZwF,CAYrE;;EAEnB,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;IACvC,IAAI/B,KAAK,GAAG,CAAC+B,QAAD,CAAZ;;IAEA,OAAO/B,KAAK,CAACZ,MAAN,GAAe,CAAtB,EAAyB;MACvB,IAAIf,IAAI,GAAG2B,KAAK,CAACK,GAAN,EAAX;;MAEA,IAAIqB,OAAO,CAACzE,GAAR,CAAYoB,IAAZ,CAAJ,EAAuB;QACrBqD,OAAO,CAACM,MAAR,CAAe3D,IAAf;QACAsD,CAAC,CAACtD,IAAI,CAACC,EAAN,CAAD,CAAWF,OAAX,CAAmB,UAAU6D,CAAV,EAAa;UAC9BjC,KAAK,CAACgB,IAAN,CAAWiB,CAAX;QACD,CAFD;QAGAN,CAAC,CAACtD,IAAI,CAACC,EAAN,CAAD,CAAW4D,KAAX;MACD;IACF;EACF,CAdD;;EAgBA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiB9D,IAAjB,EAAuB+D,KAAvB,EAA8BC,OAA9B,EAAuC;IACnD,IAAIC,MAAM,GAAG,KAAb,CADmD,CAC/B;;IAEpB,IAAIhD,OAAO,IAAIC,OAAO,KAAK,KAAvB,IAAgCD,OAAO,CAACgC,OAAR,CAAgBjD,IAAI,CAACC,EAArB,IAA2B,CAAC,CAAhE,EAAmE,OAAOgE,MAAP;IACnEb,IAAI,CAACT,IAAL,CAAU3C,IAAV;IACAqD,OAAO,CAACF,GAAR,CAAYnD,IAAZ;IACA,IAAIkC,SAAS,GAAG8B,OAAO,CAAChE,IAAI,CAACC,EAAN,CAAvB;;IAEA,KAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACnB,MAA9B,EAAsCuB,CAAC,IAAI,CAA3C,EAA8C;MAC5C,IAAIG,QAAQ,GAAGc,QAAQ,CAACrB,SAAS,CAACI,CAAD,CAAV,CAAvB;;MAEA,IAAIG,QAAQ,KAAKsB,KAAjB,EAAwB;QACtB,IAAIvE,KAAK,GAAG,EAAZ;;QAEA,KAAK,IAAI0D,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGE,IAAI,CAACrC,MAAjC,EAAyCmC,KAAK,IAAI,CAAlD,EAAqD;UACnD1D,KAAK,CAAC4D,IAAI,CAACF,KAAK,GAAG,CAAT,CAAJ,CAAgBjD,EAAjB,CAAL,GAA4BmD,IAAI,CAACF,KAAD,CAAhC;QACD;;QAED,IAAIE,IAAI,CAACrC,MAAT,EAAiB;UACfvB,KAAK,CAAC4D,IAAI,CAACA,IAAI,CAACrC,MAAL,GAAc,CAAf,CAAJ,CAAsBd,EAAvB,CAAL,GAAkCmD,IAAI,CAAC,CAAD,CAAtC;QACD;;QAEDhC,SAAS,CAACuB,IAAV,CAAenD,KAAf;QACAyE,MAAM,GAAG,IAAT;MACD,CAbD,MAaO,IAAI,CAACZ,OAAO,CAACzE,GAAR,CAAY6D,QAAZ,CAAL,EAA4B;QACjC,IAAIqB,OAAO,CAACrB,QAAD,EAAWsB,KAAX,EAAkBC,OAAlB,CAAX,EAAuC;UACrCC,MAAM,GAAG,IAAT;QACD;MACF;IACF;;IAED,IAAIA,MAAJ,EAAY;MACVR,OAAO,CAACzD,IAAD,CAAP;IACD,CAFD,MAEO;MACL,KAAK,IAAIsC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACnB,MAA9B,EAAsCuB,CAAC,IAAI,CAA3C,EAA8C;QAC5C,IAAIG,QAAQ,GAAGc,QAAQ,CAACrB,SAAS,CAACI,CAAD,CAAV,CAAvB;;QAEA,IAAI,CAACgB,CAAC,CAACb,QAAQ,CAACxC,EAAV,CAAD,CAAerB,GAAf,CAAmBoB,IAAnB,CAAL,EAA+B;UAC7BsD,CAAC,CAACb,QAAQ,CAACxC,EAAV,CAAD,CAAekD,GAAf,CAAmBnD,IAAnB;QACD;MACF;IACF;;IAEDoD,IAAI,CAACpB,GAAL;IACA,OAAOiC,MAAP;EACD,CA7CD;;EA+CA,IAAIxE,EAAE,GAAGF,SAAS,CAACG,KAAnB;EAAA,IACIA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADjC,CA7EwF,CA8EnD;;EAErC,KAAK,IAAI6C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,KAAK,CAACqB,MAA1B,EAAkCuB,CAAC,IAAI,CAAvC,EAA0C;IACxC,IAAItC,IAAI,GAAGN,KAAK,CAAC4C,CAAD,CAAhB;IACA,IAAI4B,MAAM,GAAGlE,IAAI,CAACC,EAAlB;IACAuD,QAAQ,CAACU,MAAD,CAAR,GAAmB5B,CAAnB;IACAiB,QAAQ,CAACjB,CAAD,CAAR,GAActC,IAAd;EACD,CArFuF,CAqFtF;;;EAGF,IAAIiB,OAAO,IAAIC,OAAf,EAAwB;IACtB,IAAIiD,OAAO,GAAG,SAASA,OAAT,CAAiB7B,CAAjB,EAAoB;MAChC,IAAI4B,MAAM,GAAGjD,OAAO,CAACqB,CAAD,CAApB;MACAkB,QAAQ,CAAC9D,KAAK,CAAC4C,CAAD,CAAL,CAASrC,EAAV,CAAR,GAAwBuD,QAAQ,CAACU,MAAD,CAAhC;MACAV,QAAQ,CAACU,MAAD,CAAR,GAAmB,CAAnB;MACAX,QAAQ,CAAC,CAAD,CAAR,GAAc7D,KAAK,CAACgD,IAAN,CAAW,UAAU1C,IAAV,EAAgB;QACvC,OAAOA,IAAI,CAACC,EAAL,KAAYiE,MAAnB;MACD,CAFa,CAAd;MAGAX,QAAQ,CAACC,QAAQ,CAAC9D,KAAK,CAAC4C,CAAD,CAAL,CAASrC,EAAV,CAAT,CAAR,GAAkCP,KAAK,CAAC4C,CAAD,CAAvC;IACD,CARD;;IAUA,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,OAAO,CAACF,MAA5B,EAAoCuB,CAAC,EAArC,EAAyC;MACvC6B,OAAO,CAAC7B,CAAD,CAAP;IACD;EACF,CAtGuF,CAsGtF;;;EAGF,IAAI8B,kBAAkB,GAAG,SAASA,kBAAT,CAA4B/C,UAA5B,EAAwC;IAC/D,IAAI5B,EAAJ;;IAEA,IAAI4E,UAAJ;IACA,IAAIC,MAAM,GAAGC,QAAb,CAJ+D,CAIxC;;IAEvB,KAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,UAAU,CAACN,MAA/B,EAAuCuB,CAAC,IAAI,CAA5C,EAA+C;MAC7C,IAAIkC,IAAI,GAAGnD,UAAU,CAACiB,CAAD,CAArB;;MAEA,KAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACzD,MAAzB,EAAiC0D,CAAC,EAAlC,EAAsC;QACpC,IAAIC,SAAS,GAAGlB,QAAQ,CAACgB,IAAI,CAACC,CAAD,CAAJ,CAAQxE,EAAT,CAAxB;;QAEA,IAAIyE,SAAS,GAAGJ,MAAhB,EAAwB;UACtBA,MAAM,GAAGI,SAAT;UACAL,UAAU,GAAG/B,CAAb;QACD;MACF;IACF;;IAED,IAAId,SAAS,GAAGH,UAAU,CAACgD,UAAD,CAA1B;IACA,IAAIL,OAAO,GAAG,EAAd;;IAEA,KAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAAS,CAACT,MAA9B,EAAsCuB,CAAC,IAAI,CAA3C,EAA8C;MAC5C,IAAItC,IAAI,GAAGwB,SAAS,CAACc,CAAD,CAApB;MACA0B,OAAO,CAAChE,IAAI,CAACC,EAAN,CAAP,GAAmB,EAAnB;;MAEA,KAAK,IAAIqB,EAAE,GAAG,CAAT,EAAYH,EAAE,GAAG,CAAC,GAAG/C,KAAK,CAAC+D,YAAV,EAAwBnC,IAAI,CAACC,EAA7B,EAAiCV,SAAS,CAAC6C,KAA3C,EAAkD,QAAlD,EAA4DuC,MAA5D,CAAmE,UAAUf,CAAV,EAAa;QACpG,OAAOpC,SAAS,CAACoD,GAAV,CAAc,UAAUC,CAAV,EAAa;UAChC,OAAOA,CAAC,CAAC5E,EAAT;QACD,CAFM,EAEJgD,OAFI,CAEIW,CAFJ,IAES,CAAC,CAFjB;MAGD,CAJqB,CAAtB,EAIItC,EAAE,GAAGH,EAAE,CAACJ,MAJZ,EAIoBO,EAAE,EAJtB,EAI0B;QACxB,IAAImB,QAAQ,GAAGtB,EAAE,CAACG,EAAD,CAAjB,CADwB,CACD;;QAEvB,IAAImB,QAAQ,KAAKzC,IAAI,CAACC,EAAlB,IAAwB,EAAEiB,OAAO,KAAK,KAAZ,IAAqBD,OAAO,CAACgC,OAAR,CAAgBjD,IAAI,CAACC,EAArB,IAA2B,CAAC,CAAnD,CAA5B,EAAmF;UACjFmB,SAAS,CAACuB,IAAV,EAAgBlD,EAAE,GAAG,EAAL,EAASA,EAAE,CAACO,IAAI,CAACC,EAAN,CAAF,GAAcD,IAAvB,EAA6BP,EAA7C;QACD,CAFD,MAEO;UACLuE,OAAO,CAAChE,IAAI,CAACC,EAAN,CAAP,CAAiB0C,IAAjB,CAAsBa,QAAQ,CAACf,QAAD,CAA9B;QACD;MACF;IACF;;IAED,OAAO;MACLjB,SAAS,EAAEA,SADN;MAELwC,OAAO,EAAEA,OAFJ;MAGLM,MAAM,EAAEA;IAHH,CAAP;EAKD,CA9CD;;EAgDA,IAAIQ,OAAO,GAAG,CAAd;;EAEA,OAAOA,OAAO,GAAGpF,KAAK,CAACqB,MAAvB,EAA+B;IAC7B,IAAIgE,aAAa,GAAGrF,KAAK,CAACiF,MAAN,CAAa,UAAUf,CAAV,EAAa;MAC5C,OAAOJ,QAAQ,CAACI,CAAC,CAAC3D,EAAH,CAAR,IAAkB6E,OAAzB;IACD,CAFmB,CAApB;IAGA,IAAIE,IAAI,GAAG,CAAC,GAAG9G,mBAAmB,CAAC+G,6BAAxB,EAAuD;MAChEvF,KAAK,EAAEqF,aADyD;MAEhE3C,KAAK,EAAE7C,SAAS,CAAC6C;IAF+C,CAAvD,EAGRuC,MAHQ,CAGD,UAAUnD,SAAV,EAAqB;MAC7B,OAAOA,SAAS,CAACT,MAAV,GAAmB,CAA1B;IACD,CALU,CAAX;IAMA,IAAIiE,IAAI,CAACjE,MAAL,KAAgB,CAApB,EAAuB;IACvB,IAAImE,GAAG,GAAGd,kBAAkB,CAACY,IAAD,CAA5B;IACA,IAAIV,MAAM,GAAGY,GAAG,CAACZ,MAAjB;IAAA,IACIN,OAAO,GAAGkB,GAAG,CAAClB,OADlB;IAAA,IAEIxC,SAAS,GAAG0D,GAAG,CAAC1D,SAFpB;;IAIA,IAAIA,SAAS,CAACT,MAAV,GAAmB,CAAvB,EAA0B;MACxBS,SAAS,CAACzB,OAAV,CAAkB,UAAUC,IAAV,EAAgB;QAChCsD,CAAC,CAACtD,IAAI,CAACC,EAAN,CAAD,GAAa,IAAI6B,GAAJ,EAAb;MACD,CAFD;MAGA,IAAIqD,SAAS,GAAG5B,QAAQ,CAACe,MAAD,CAAxB,CAJwB,CAIU;;MAElC,IAAIrD,OAAO,IAAIC,OAAX,IAAsBD,OAAO,CAACgC,OAAR,CAAgBkC,SAAS,CAAClF,EAA1B,MAAkC,CAAC,CAA7D,EAAgE,OAAOmB,SAAP;MAChE0C,OAAO,CAACqB,SAAD,EAAYA,SAAZ,EAAuBnB,OAAvB,CAAP;MACAc,OAAO,GAAGR,MAAM,GAAG,CAAnB;IACD,CATD,MASO;MACL;IACD;EACF;;EAED,OAAOlD,SAAP;AACD,CA1LD;AA2LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA3D,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AAEA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyB0B,SAAzB,EAAoC6F,QAApC,EAA8CnE,OAA9C,EAAuDC,OAAvD,EAAgE;EACpF,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,IAAV;EACD;;EAED,IAAIkE,QAAJ,EAAc,OAAOxH,sBAAsB,CAAC2B,SAAD,EAAY0B,OAAZ,EAAqBC,OAArB,CAA7B;EACd,OAAOvD,wBAAwB,CAAC4B,SAAD,EAAY0B,OAAZ,EAAqBC,OAArB,CAA/B;AACD,CAPD;;AASAzD,OAAO,CAACI,eAAR,GAA0BA,eAA1B;AACA,IAAIwH,QAAQ,GAAG/F,mBAAf;AACA7B,OAAO,CAACK,OAAR,GAAkBuH,QAAlB"},"metadata":{},"sourceType":"script"}