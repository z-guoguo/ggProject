{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { RenderPass } from './RenderPass';\nvar PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0\n};\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n\nexport var PixelPickingPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ResourcePool), _dec4 = inject(IDENTIFIER.RenderPassFactory), _dec5 = inject(IDENTIFIER.MeshComponentManager), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function PixelPickingPass() {\n    var _this = this;\n\n    _classCallCheck(this, PixelPickingPass);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"renderPassFactory\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor4, this);\n\n    this.pickingFBO = void 0;\n    this.views = void 0;\n    this.highlightEnabled = true;\n    this.highlightColor = [255, 0, 0, 255];\n    this.alreadyInRendering = false;\n\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'picking fbo', {\n        width: 1,\n        height: 1\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      }; // 防止被 FrameGraph 剔除\n\n      passNode.hasSideEffect = true;\n    };\n\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.views = views;\n\n                if (!_this.alreadyInRendering) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _iterator = _createForOfIteratorHelper(views);\n\n                try {\n                  _loop = function _loop() {\n                    var view = _step.value;\n\n                    var _view$getViewport = view.getViewport(),\n                        width = _view$getViewport.width,\n                        height = _view$getViewport.height; // throttled\n\n\n                    _this.alreadyInRendering = true; // 实例化资源\n\n                    var resourceNode = fg.getResourceNode(pass.data.output);\n                    _this.pickingFBO = _this.resourcePool.getOrCreateResource(resourceNode.resource); // TODO: only draw 1x1 quad, with offset camera\n\n                    _this.pickingFBO.resize({\n                      width: width,\n                      height: height\n                    });\n\n                    _this.engine.useFramebuffer(_this.pickingFBO, function () {\n                      _this.engine.clear({\n                        framebuffer: _this.pickingFBO,\n                        color: [0, 0, 0, 0],\n                        stencil: 0,\n                        depth: 1\n                      }); // 渲染\n\n\n                      var renderPass = _this.renderPassFactory(RenderPass.IDENTIFIER); // 修改所有\n\n\n                      var meshes = [];\n                      var scene = view.getScene();\n\n                      var _iterator2 = _createForOfIteratorHelper(scene.getEntities()),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var meshEntity = _step2.value;\n\n                          var mesh = _this.mesh.getComponentByEntity(meshEntity);\n\n                          var material = mesh.material;\n                          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n                          meshes.push(mesh);\n                        } // @ts-ignore\n\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      renderPass.renderView(view);\n                      meshes.forEach(function (mesh) {\n                        var material = mesh.material;\n                        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n                      });\n                      _this.alreadyInRendering = false;\n                    });\n                  };\n\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.pick = function (_ref2, view) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      var _this$engine = _this.engine,\n          readPixels = _this$engine.readPixels,\n          useFramebuffer = _this$engine.useFramebuffer;\n\n      var _view$getViewport2 = view.getViewport(),\n          width = _view$getViewport2.width,\n          height = _view$getViewport2.height;\n\n      var xInDevicePixel = x * window.devicePixelRatio;\n      var yInDevicePixel = y * window.devicePixelRatio; // const xInDevicePixel = x;\n      // const yInDevicePixel = y;\n\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n\n      var pickedColors;\n      var pickedFeatureIdx;\n      useFramebuffer(_this.pickingFBO, function () {\n        // avoid realloc\n        pickedColors = readPixels({\n          x: Math.round(xInDevicePixel),\n          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n          y: Math.round(height - (y + 1) * window.devicePixelRatio),\n          // y: Math.round(height - (y + 1)),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          pickedFeatureIdx = decodePickingColor(pickedColors);\n\n          if (_this.highlightEnabled) {\n            // 高亮\n            _this.highlightPickedFeature(pickedColors, view);\n          }\n        }\n      });\n      return pickedFeatureIdx;\n    };\n  }\n\n  _createClass(PixelPickingPass, [{\n    key: \"enableHighlight\",\n    value: function enableHighlight(enabled) {\n      this.highlightEnabled = enabled;\n    }\n  }, {\n    key: \"setHighlightColor\",\n    value: function setHighlightColor(color) {\n      this.highlightColor = color;\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n\n    /**\n     * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n     * 1. 鼠标移走时无法恢复\n     * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n     * 因此高亮还是放在 shader 中做比较好\n     */\n    value: function highlightPickedFeature(pickedColors, view) {\n      if (pickedColors) {\n        var _iterator3 = _createForOfIteratorHelper(view.getScene().getEntities()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var meshEntity = _step3.value;\n            var mesh = this.mesh.getComponentByEntity(meshEntity);\n            var material = mesh.material;\n            material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n            material.setUniform('u_PickingColor', [pickedColors[0], pickedColors[1], pickedColors[2]]);\n            material.setUniform('u_HighlightColor', this.highlightColor);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }]);\n\n  return PixelPickingPass;\n}(), _class3.IDENTIFIER = 'PixelPicking Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"renderPassFactory\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":{"version":3,"mappings":"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","names":["inject","injectable","IDENTIFIER","decodePickingColor","RenderPass","PickingStage","NONE","ENCODE","HIGHLIGHT","PixelPickingPass","RenderEngine","ResourcePool","RenderPassFactory","MeshComponentManager","_classCallCheck","_initializerDefineProperty","pickingFBO","views","highlightEnabled","highlightColor","alreadyInRendering","setup","fg","passNode","pass","output","createRenderTarget","width","height","data","write","hasSideEffect","execute","_this","_context","_iterator","_loop","view","getViewport","resourceNode","getResourceNode","resourcePool","getOrCreateResource","resource","resize","engine","useFramebuffer","clear","framebuffer","color","stencil","depth","renderPass","renderPassFactory","meshes","scene","getScene","getEntities","meshEntity","mesh","getComponentByEntity","material","setUniform","push","_iterator2","renderView","forEach","pick","x","y","readPixels","xInDevicePixel","window","devicePixelRatio","yInDevicePixel","pickedColors","pickedFeatureIdx","Math","round","Uint8Array","highlightPickedFeature","_createClass","key","value","enabled","_iterator3","configurable","enumerable","writable","initializer"],"sources":["../../../../src/components/renderer/passes/PixelPickingPass.ts"],"sourcesContent":["import { inject, injectable, named } from 'inversify';\nimport { ComponentManager } from '../../../ComponentManager';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { FrameGraphHandle } from '../../framegraph/FrameGraphHandle';\nimport { FrameGraphPass } from '../../framegraph/FrameGraphPass';\nimport { PassNode } from '../../framegraph/PassNode';\nimport { ResourcePool } from '../../framegraph/ResourcePool';\nimport { FrameGraphSystem } from '../../framegraph/System';\nimport { MaterialComponent } from '../../material/MaterialComponent';\nimport { MeshComponent } from '../../mesh/MeshComponent';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { IRendererService, IView } from '../IRendererService';\nimport { IRenderPass } from './IRenderPass';\nimport { RenderPass, RenderPassData } from './RenderPass';\n\nexport interface PixelPickingPassData {\n  output: FrameGraphHandle;\n}\n\nconst PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0,\n};\n\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n@injectable()\nexport class PixelPickingPass implements IRenderPass<PixelPickingPassData> {\n  public static IDENTIFIER = 'PixelPicking Pass';\n\n  @inject(IDENTIFIER.RenderEngine)\n  private readonly engine: IRendererService;\n\n  @inject(IDENTIFIER.ResourcePool)\n  private readonly resourcePool: ResourcePool;\n\n  @inject(IDENTIFIER.RenderPassFactory)\n  private readonly renderPassFactory: <T>(name: string) => IRenderPass<T>;\n\n  @inject(IDENTIFIER.MeshComponentManager)\n  private readonly mesh: ComponentManager<MeshComponent>;\n\n  private pickingFBO: IFramebuffer;\n  private views: IView[];\n  private highlightEnabled = true;\n  private highlightColor = [255, 0, 0, 255];\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public enableHighlight(enabled: boolean) {\n    this.highlightEnabled = enabled;\n  }\n\n  public setHighlightColor(color: number[]) {\n    this.highlightColor = color;\n  }\n\n  public setup = (\n    fg: FrameGraphSystem,\n    passNode: PassNode,\n    pass: FrameGraphPass<PixelPickingPassData>,\n  ): void => {\n    const output = fg.createRenderTarget(passNode, 'picking fbo', {\n      width: 1,\n      height: 1,\n    });\n\n    pass.data = {\n      output: passNode.write(fg, output),\n    };\n\n    // 防止被 FrameGraph 剔除\n    passNode.hasSideEffect = true;\n  };\n\n  public execute = async (\n    fg: FrameGraphSystem,\n    pass: FrameGraphPass<PixelPickingPassData>,\n    views: IView[],\n  ): Promise<void> => {\n    this.views = views;\n\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    for (const view of views) {\n      const { width, height } = view.getViewport();\n      // throttled\n      this.alreadyInRendering = true;\n\n      // 实例化资源\n      const resourceNode = fg.getResourceNode(pass.data.output);\n      this.pickingFBO = this.resourcePool.getOrCreateResource(\n        resourceNode.resource,\n      );\n\n      // TODO: only draw 1x1 quad, with offset camera\n      this.pickingFBO.resize({ width, height });\n      this.engine.useFramebuffer(this.pickingFBO, () => {\n        this.engine.clear({\n          framebuffer: this.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1,\n        });\n\n        // 渲染\n        const renderPass = this.renderPassFactory<RenderPassData>(\n          RenderPass.IDENTIFIER,\n        );\n\n        // 修改所有\n        const meshes: MeshComponent[] = [];\n        const scene = view.getScene();\n        for (const meshEntity of scene.getEntities()) {\n          const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n          meshes.push(mesh);\n        }\n\n        // @ts-ignore\n        renderPass.renderView(view);\n        meshes.forEach((mesh) => {\n          const material = mesh.material;\n          material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n        });\n\n        this.alreadyInRendering = false;\n      });\n    }\n  };\n\n  public pick = ({ x, y }: { x: number; y: number }, view: IView) => {\n    const { readPixels, useFramebuffer } = this.engine;\n    const { width, height } = view.getViewport();\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    // const xInDevicePixel = x;\n    // const yInDevicePixel = y;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n\n    let pickedColors: Uint8Array | undefined;\n    let pickedFeatureIdx: number | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * window.devicePixelRatio),\n        // y: Math.round(height - (y + 1)),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        pickedFeatureIdx = decodePickingColor(pickedColors);\n\n        if (this.highlightEnabled) {\n          // 高亮\n          this.highlightPickedFeature(pickedColors, view);\n        }\n      }\n    });\n    return pickedFeatureIdx;\n  };\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   */\n  private highlightPickedFeature(\n    pickedColors: Uint8Array | undefined,\n    view: IView,\n  ) {\n    if (pickedColors) {\n      for (const meshEntity of view.getScene().getEntities()) {\n        const mesh = this.mesh.getComponentByEntity(meshEntity)!;\n        const material = mesh.material;\n        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n\n        material.setUniform('u_PickingColor', [\n          pickedColors[0],\n          pickedColors[1],\n          pickedColors[2],\n        ]);\n        material.setUniform('u_HighlightColor', this.highlightColor);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}