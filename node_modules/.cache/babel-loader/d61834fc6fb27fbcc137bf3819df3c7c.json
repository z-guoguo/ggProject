{"ast":null,"code":"import { distance, getBBoxByArray } from './util';\nimport * as vec2 from 'gl-matrix/vec2';\nexport default {\n  /**\n   * 计算线段的包围盒\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {object} 包围盒对象\n   */\n  box: function (x1, y1, x2, y2) {\n    return getBBoxByArray([x1, x2], [y1, y2]);\n  },\n\n  /**\n   * 线段的长度\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {number} 距离\n   */\n  length: function (x1, y1, x2, y2) {\n    return distance(x1, y1, x2, y2);\n  },\n\n  /**\n   * 根据比例获取点\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} t 指定比例\n   * @return {object} 包含 x, y 的点\n   */\n  pointAt: function (x1, y1, x2, y2, t) {\n    return {\n      x: (1 - t) * x1 + t * x2,\n      y: (1 - t) * y1 + t * y2\n    };\n  },\n\n  /**\n   * 点到线段的距离\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} x  测试点 x\n   * @param {number} y  测试点 y\n   * @return {number} 距离\n   */\n  pointDistance: function (x1, y1, x2, y2, x, y) {\n    // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n    // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n    var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n\n    if (cross < 0) {\n      return distance(x1, y1, x, y);\n    }\n\n    var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n    if (cross > lengthSquare) {\n      return distance(x2, y2, x, y);\n    }\n\n    return this.pointToLine(x1, y1, x2, y2, x, y);\n  },\n\n  /**\n   * 点到直线的距离，而不是点到线段的距离\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} x  测试点 x\n   * @param {number} y  测试点 y\n   * @return {number} 距离\n   */\n  pointToLine: function (x1, y1, x2, y2, x, y) {\n    var d = [x2 - x1, y2 - y1]; // 如果端点相等，则判定点到点的距离\n\n    if (vec2.exactEquals(d, [0, 0])) {\n      return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n    }\n\n    var u = [-d[1], d[0]];\n    vec2.normalize(u, u);\n    var a = [x - x1, y - y1];\n    return Math.abs(vec2.dot(a, u));\n  },\n\n  /**\n   * 线段的角度\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {number} 导数\n   */\n  tangentAngle: function (x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n  }\n};","map":{"version":3,"mappings":"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","names":["distance","getBBoxByArray","vec2","box","x1","y1","x2","y2","length","pointAt","t","x","y","pointDistance","cross","lengthSquare","pointToLine","d","exactEquals","Math","sqrt","u","normalize","a","abs","dot","tangentAngle","atan2"],"sourceRoot":"","sources":["../src/line.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}