{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: \"\".concat(this.type, \"-keyShape\"),\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');","map":{"version":3,"names":["__assign","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","fontFamily","windowFontFamily","anchorPoints","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","concat","type","name","draggable","defaultStyle","mergeStyle","getOptions","strokeStyle","color","getSize","width","height","styles","x","y","update","item","updateType","getContainer","get","attr","updateShape"],"sources":["/Users/wawalike/Desktop/ggProject/node_modules/@antv/g6-core/es/element/nodes/simple-rect.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('simple-rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'simple-rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: \"\".concat(this.type, \"-keyShape\"),\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false, updateType);\n  }\n}, 'single-node');"],"mappings":"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"},"metadata":{},"sourceType":"module"}