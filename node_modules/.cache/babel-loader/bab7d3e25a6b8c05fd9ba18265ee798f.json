{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar SPEED_DIVISOR = 800;\n\nvar RadialNonoverlapForce =\n/** @class */\nfunction () {\n  function RadialNonoverlapForce(params) {\n    this.disp = [];\n    this.positions = params.positions;\n    this.adjMatrix = params.adjMatrix;\n    this.focusID = params.focusID;\n    this.radii = params.radii;\n    this.iterations = params.iterations || 10;\n    this.height = params.height || 10;\n    this.width = params.width || 10;\n    this.speed = params.speed || 100;\n    this.gravity = params.gravity || 10;\n    this.nodeSizeFunc = params.nodeSizeFunc;\n    this.k = params.k || 5;\n    this.strictRadial = params.strictRadial;\n    this.nodes = params.nodes;\n  }\n\n  RadialNonoverlapForce.prototype.layout = function () {\n    var self = this;\n    var positions = self.positions;\n    var disp = [];\n    var iterations = self.iterations;\n    var maxDisplace = self.width / 10;\n    self.maxDisplace = maxDisplace;\n    self.disp = disp;\n\n    for (var i = 0; i < iterations; i++) {\n      positions.forEach(function (_, k) {\n        disp[k] = {\n          x: 0,\n          y: 0\n        };\n      }); // 给重叠的节点增加斥力\n\n      self.getRepulsion();\n      self.updatePositions();\n    }\n\n    return positions;\n  };\n\n  RadialNonoverlapForce.prototype.getRepulsion = function () {\n    var self = this;\n    var positions = self.positions;\n    var nodes = self.nodes;\n    var disp = self.disp;\n    var k = self.k;\n    var radii = self.radii || [];\n    positions.forEach(function (v, i) {\n      disp[i] = {\n        x: 0,\n        y: 0\n      };\n      positions.forEach(function (u, j) {\n        if (i === j) {\n          return;\n        } // v and u are not on the same circle, return\n\n\n        if (radii[i] !== radii[j]) {\n          return;\n        }\n\n        var vecx = v[0] - u[0];\n        var vecy = v[1] - u[1];\n        var vecLength = Math.sqrt(vecx * vecx + vecy * vecy);\n\n        if (vecLength === 0) {\n          vecLength = 1;\n          var sign = i > j ? 1 : -1;\n          vecx = 0.01 * sign;\n          vecy = 0.01 * sign;\n        } // these two nodes overlap\n\n\n        if (vecLength < self.nodeSizeFunc(nodes[i]) / 2 + self.nodeSizeFunc(nodes[j]) / 2) {\n          var common = k * k / vecLength;\n          disp[i].x += vecx / vecLength * common;\n          disp[i].y += vecy / vecLength * common;\n        }\n      });\n    });\n  };\n\n  RadialNonoverlapForce.prototype.updatePositions = function () {\n    var self = this;\n    var positions = self.positions;\n    var disp = self.disp;\n    var speed = self.speed;\n    var strictRadial = self.strictRadial;\n    var f = self.focusID;\n    var maxDisplace = self.maxDisplace || self.width / 10;\n\n    if (strictRadial) {\n      disp.forEach(function (di, i) {\n        var vx = positions[i][0] - positions[f][0];\n        var vy = positions[i][1] - positions[f][1];\n        var vLength = Math.sqrt(vx * vx + vy * vy);\n        var vpx = vy / vLength;\n        var vpy = -vx / vLength;\n        var diLength = Math.sqrt(di.x * di.x + di.y * di.y);\n        var alpha = Math.acos((vpx * di.x + vpy * di.y) / diLength);\n\n        if (alpha > Math.PI / 2) {\n          alpha -= Math.PI / 2;\n          vpx *= -1;\n          vpy *= -1;\n        }\n\n        var tdispLength = Math.cos(alpha) * diLength;\n        di.x = vpx * tdispLength;\n        di.y = vpy * tdispLength;\n      });\n    } // move\n\n\n    var radii = self.radii;\n    positions.forEach(function (n, i) {\n      if (i === f) {\n        return;\n      }\n\n      var distLength = Math.sqrt(disp[i].x * disp[i].x + disp[i].y * disp[i].y);\n\n      if (distLength > 0 && i !== f) {\n        var limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n        n[0] += disp[i].x / distLength * limitedDist;\n        n[1] += disp[i].y / distLength * limitedDist;\n\n        if (strictRadial) {\n          var vx = n[0] - positions[f][0];\n          var vy = n[1] - positions[f][1];\n          var nfDis = Math.sqrt(vx * vx + vy * vy);\n          vx = vx / nfDis * radii[i];\n          vy = vy / nfDis * radii[i];\n          n[0] = positions[f][0] + vx;\n          n[1] = positions[f][1] + vy;\n        }\n      }\n    });\n  };\n\n  return RadialNonoverlapForce;\n}();\n\nexports.default = RadialNonoverlapForce;","map":{"version":3,"mappings":"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","names":["SPEED_DIVISOR","params","positions","adjMatrix","focusID","radii","iterations","height","width","speed","gravity","nodeSizeFunc","k","strictRadial","nodes","RadialNonoverlapForce","self","disp","maxDisplace","i","forEach","_","x","y","getRepulsion","updatePositions","v","u","j","vecx","vecy","vecLength","Math","sqrt","sign","common","f","di","vx","vy","vLength","vpx","vpy","diLength","alpha","acos","PI","tdispLength","cos","n","distLength","limitedDist","min","nfDis"],"sourceRoot":"","sources":["../../../src/layout/radial/radialNonoverlapForce.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}