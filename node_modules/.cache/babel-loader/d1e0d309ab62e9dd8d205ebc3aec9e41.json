{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { assign, isEmpty, isFunction, isNil, isNumber, isObject, isString, map } from '@antv/util';\nimport { getTickMethod } from './tick-method/register';\n\nvar Scale =\n/** @class */\nfunction () {\n  function Scale(cfg) {\n    /**\n     * 度量的类型\n     */\n    this.type = 'base';\n    /**\n     * 是否分类类型的度量\n     */\n\n    this.isCategory = false;\n    /**\n     * 是否线性度量，有linear, time 度量\n     */\n\n    this.isLinear = false;\n    /**\n     * 是否连续类型的度量，linear,time,log, pow, quantile, quantize 都支持\n     */\n\n    this.isContinuous = false;\n    /**\n     * 是否是常量的度量，传入和传出一致\n     */\n\n    this.isIdentity = false;\n    this.values = [];\n    this.range = [0, 1];\n    this.ticks = [];\n    this.__cfg__ = cfg;\n    this.initCfg();\n    this.init();\n  } // 对于原始值的必要转换，如分类、时间字段需转换成数值，用transform/map命名可能更好\n\n\n  Scale.prototype.translate = function (v) {\n    return v;\n  };\n  /** 重新初始化 */\n\n\n  Scale.prototype.change = function (cfg) {\n    // 覆盖配置项，而不替代\n    assign(this.__cfg__, cfg);\n    this.init();\n  };\n\n  Scale.prototype.clone = function () {\n    return this.constructor(this.__cfg__);\n  };\n  /** 获取坐标轴需要的ticks */\n\n\n  Scale.prototype.getTicks = function () {\n    var _this = this;\n\n    return map(this.ticks, function (tick, idx) {\n      if (isObject(tick)) {\n        // 仅当符合Tick类型时才有意义\n        return tick;\n      }\n\n      return {\n        text: _this.getText(tick, idx),\n        tickValue: tick,\n        value: _this.scale(tick)\n      };\n    });\n  };\n  /** 获取Tick的格式化结果 */\n\n\n  Scale.prototype.getText = function (value, key) {\n    var formatter = this.formatter;\n    var res = formatter ? formatter(value, key) : value;\n\n    if (isNil(res) || !isFunction(res.toString)) {\n      return '';\n    }\n\n    return res.toString();\n  }; // 获取配置项中的值，当前 scale 上的值可能会被修改\n\n\n  Scale.prototype.getConfig = function (key) {\n    return this.__cfg__[key];\n  }; // scale初始化\n\n\n  Scale.prototype.init = function () {\n    assign(this, this.__cfg__);\n    this.setDomain();\n\n    if (isEmpty(this.getConfig('ticks'))) {\n      this.ticks = this.calculateTicks();\n    }\n  }; // 子类上覆盖某些属性，不能直接在类上声明，否则会被覆盖\n\n\n  Scale.prototype.initCfg = function () {};\n\n  Scale.prototype.setDomain = function () {};\n\n  Scale.prototype.calculateTicks = function () {\n    var tickMethod = this.tickMethod;\n    var ticks = [];\n\n    if (isString(tickMethod)) {\n      var method = getTickMethod(tickMethod);\n\n      if (!method) {\n        throw new Error('There is no method to to calculate ticks!');\n      }\n\n      ticks = method(this);\n    } else if (isFunction(tickMethod)) {\n      ticks = tickMethod(this);\n    }\n\n    return ticks;\n  }; // range 的最小值\n\n\n  Scale.prototype.rangeMin = function () {\n    return this.range[0];\n  }; // range 的最大值\n\n\n  Scale.prototype.rangeMax = function () {\n    return this.range[1];\n  };\n  /** 定义域转 0~1 */\n\n\n  Scale.prototype.calcPercent = function (value, min, max) {\n    if (isNumber(value)) {\n      return (value - min) / (max - min);\n    }\n\n    return NaN;\n  };\n  /** 0~1转定义域 */\n\n\n  Scale.prototype.calcValue = function (percent, min, max) {\n    return min + percent * (max - min);\n  };\n\n  return Scale;\n}();\n\nexport default Scale;","map":{"version":3,"mappings":"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","names":["assign","isEmpty","isFunction","isNil","isNumber","isObject","isString","map","getTickMethod","cfg","__cfg__","initCfg","init","Scale","v","constructor","ticks","tick","idx","text","_this","getText","tickValue","value","scale","key","formatter","res","toString","setDomain","getConfig","calculateTicks","tickMethod","method","Error","range","min","max","NaN","percent"],"sourceRoot":"","sources":["../src/base.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}