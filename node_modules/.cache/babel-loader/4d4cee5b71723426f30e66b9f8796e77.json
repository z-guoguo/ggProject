{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport class SelectionManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.movedMap = new WeakMap();\n    this.unselectMap = new WeakMap();\n  }\n\n  get widgetOptions() {\n    return this.options.selecting;\n  }\n\n  get rubberbandDisabled() {\n    return this.widgetOptions.enabled !== true || this.widgetOptions.rubberband !== true;\n  }\n\n  get disabled() {\n    return this.widgetOptions.enabled !== true;\n  }\n\n  get length() {\n    return this.widget.length;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createSelection();\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.on('blank:click', this.onBlankClick, this);\n    this.graph.on('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.on('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.on('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  stopListening() {\n    this.graph.off('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.off('blank:click', this.onBlankClick, this);\n    this.graph.off('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.off('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.off('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  onBlankMouseDown({\n    e\n  }) {\n    if (this.allowRubberband(e, true) || this.allowRubberband(e) && !this.graph.scroller.allowPanning(e, true) && !this.graph.panning.allowPanning(e, true)) {\n      this.startRubberband(e);\n    }\n  }\n\n  onBlankClick() {\n    this.clean();\n  }\n\n  allowRubberband(e, strict) {\n    return !this.rubberbandDisabled && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowRubberband(e);\n  }\n\n  allowMultipleSelection(e) {\n    return this.isMultiple() && ModifierKey.isMatch(e, this.widgetOptions.multipleSelectionModifiers);\n  }\n\n  onCellMouseMove({\n    cell\n  }) {\n    this.movedMap.set(cell, true);\n  }\n\n  onCellMouseUp({\n    e,\n    cell\n  }) {\n    const options = this.widgetOptions;\n    let disabled = this.disabled;\n\n    if (!disabled && this.movedMap.has(cell)) {\n      disabled = options.selectCellOnMoved === false;\n\n      if (!disabled) {\n        disabled = options.selectNodeOnMoved === false && cell.isNode();\n      }\n\n      if (!disabled) {\n        disabled = options.selectEdgeOnMoved === false && cell.isEdge();\n      }\n    }\n\n    if (!disabled) {\n      if (!this.allowMultipleSelection(e)) {\n        this.reset(cell);\n      } else if (this.unselectMap.has(cell)) {\n        this.unselectMap.delete(cell);\n      } else if (this.isSelected(cell)) {\n        this.unselect(cell);\n      } else {\n        this.select(cell);\n      }\n    }\n\n    this.movedMap.delete(cell);\n  }\n\n  onBoxMouseDown({\n    e,\n    cell\n  }) {\n    if (!this.disabled) {\n      if (this.allowMultipleSelection(e)) {\n        this.unselect(cell);\n        this.unselectMap.set(cell, true);\n      }\n    }\n  }\n\n  isEmpty() {\n    return this.length <= 0;\n  }\n\n  isSelected(cell) {\n    return this.widget.isSelected(cell);\n  }\n\n  getCells(cells) {\n    return (Array.isArray(cells) ? cells : [cells]).map(cell => typeof cell === 'string' ? this.graph.getCellById(cell) : cell).filter(cell => cell != null);\n  }\n\n  select(cells, options = {}) {\n    const selected = this.getCells(cells);\n\n    if (selected.length) {\n      if (this.isMultiple()) {\n        this.widget.select(selected, options);\n      } else {\n        this.reset(selected.slice(0, 1), options);\n      }\n    }\n\n    return this;\n  }\n\n  unselect(cells, options = {}) {\n    this.widget.unselect(this.getCells(cells), options);\n    return this;\n  }\n\n  reset(cells, options = {}) {\n    this.widget.reset(cells ? this.getCells(cells) : [], options);\n    return this;\n  }\n\n  clean(options = {}) {\n    this.widget.clean(options);\n    return this;\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.widgetOptions.enabled = true;\n    }\n\n    return this;\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.widgetOptions.enabled = false;\n    }\n\n    return this;\n  }\n\n  startRubberband(e) {\n    if (!this.rubberbandDisabled) {\n      this.widget.startSelecting(e);\n    }\n\n    return this;\n  }\n\n  enableRubberband() {\n    if (this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = true; // if (\n      //   ModifierKey.equals(\n      //     this.graph.options.scroller.modifiers,\n      //     this.graph.options.selecting.modifiers,\n      //   )\n      // ) {\n      //   this.graph.scroller.disablePanning()\n      // }\n    }\n\n    return this;\n  }\n\n  disableRubberband() {\n    if (!this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = false;\n    }\n\n    return this;\n  }\n\n  isMultiple() {\n    return this.widgetOptions.multiple !== false;\n  }\n\n  enableMultiple() {\n    this.widgetOptions.multiple = true;\n    return this;\n  }\n\n  disableMultiple() {\n    this.widgetOptions.multiple = false;\n    return this;\n  }\n\n  setModifiers(modifiers) {\n    this.widgetOptions.modifiers = modifiers;\n    return this;\n  }\n\n  setContent(content) {\n    this.widget.setContent(content);\n    return this;\n  }\n\n  setFilter(filter) {\n    this.widget.setFilter(filter);\n    return this;\n  }\n\n  dispose() {\n    this.stopListening();\n    this.widget.dispose();\n  }\n\n}\n\n__decorate([Base.dispose()], SelectionManager.prototype, \"dispose\", null);","map":{"version":3,"mappings":"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","names":["ModifierKey","Base","SelectionManager","constructor","WeakMap","widgetOptions","options","selecting","rubberbandDisabled","enabled","rubberband","disabled","length","widget","cells","init","graph","hook","createSelection","startListening","on","onBlankMouseDown","onBlankClick","onCellMouseMove","onCellMouseUp","onBoxMouseDown","stopListening","off","e","allowRubberband","scroller","allowPanning","panning","startRubberband","clean","strict","isMatch","modifiers","allowMultipleSelection","isMultiple","multipleSelectionModifiers","cell","movedMap","set","has","selectCellOnMoved","selectNodeOnMoved","isNode","selectEdgeOnMoved","isEdge","reset","unselectMap","delete","isSelected","unselect","select","isEmpty","getCells","Array","isArray","map","getCellById","filter","selected","slice","enable","disable","startSelecting","enableRubberband","disableRubberband","multiple","enableMultiple","disableMultiple","setModifiers","setContent","content","setFilter","dispose","__decorate"],"sourceRoot":"","sources":["../../src/graph/selection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}