import { defineComponent, h, reactive, isVue3, Vue } from 'vue-demi';
import { NodeView } from '@antv/x6';
import { VueShapeView } from './view';
export function useTeleport(uniqViewId) {
    if (isVue3) {
        const { Teleport, markRaw, Fragment, VNode, VNodeData } = Vue;
        const action = 'vue';
        const items = reactive({});
        const TeleportContainer = defineComponent({
            setup() {
                return () => h(Fragment, {}, Object.keys(items).map((id) => h(items[id])));
            },
        });
        const connect = (id, node, graph, component, getContainer) => {
            items[id] = markRaw(defineComponent({
                render: () => (getContainer()
                    ? h(Teleport, { to: getContainer() }, [
                        h(component),
                    ])
                    : null),
                provide: () => ({
                    getGraph: () => graph,
                    getNode: () => node,
                }),
            }));
        };
        const disconnect = (id) => {
            delete items[id];
        };
        class VuePortalShapeView extends NodeView {
            init() {
                super.init();
                const targetId = `${this.graph.view.cid}:${this.cell.id}`;
                this.cell.on('removed', () => {
                    disconnect(targetId);
                });
                const component = this.graph.hook.getVueComponent(this.cell);
                // 这里需要将当前View的cell以及graph还有component等对象存储起来给TeleportContainer使用
                connect(targetId, this.cell, this.graph, component, this.getComponentContainer.bind(this));
            }
            getComponentContainer() {
                return this.cell.prop('useForeignObject') === false
                    ? this.selectors.content
                    : this.selectors.foContent;
            }
            confirmUpdate(flag) {
                const ret = super.confirmUpdate(flag);
                return this.handleAction(ret, action, () => {
                    // 这里无需做任何处理，但是，没有这个函数的时候，会卡死...
                });
            }
        }
        VuePortalShapeView.config({
            bootstrap: [action],
            actions: {
                component: action,
            },
        });
        NodeView.registry.register(uniqViewId, VuePortalShapeView, true);
        return TeleportContainer;
    }
    // 如果是vue2就默认输出一个警告信息
    console.warn('useTeleport should run in vue3');
    // 或者拿默认的view注册一个，保证这个api是可用状态，不至于用户使用了，但是报错
    NodeView.registry.register(uniqViewId, VueShapeView, true);
    return defineComponent(() => null);
}
export default useTeleport;
//# sourceMappingURL=teleport.js.map